{
  "hash": "562f9d73762aaa9d2b5aea25445e8bc4",
  "result": {
    "markdown": "---\nsubtitle: 'SGCX | Modelling Reference'\n---\n\n\\newpage\n\n# Modelling Reference {#modelling .unnumbered}\n\n**In this notebook we use data from study SGC3A to explore different modelling techniques and assess their suitability for the bimodal accuracy distributions in the SGC project data.**\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Hmisc) # %nin% operator\nlibrary(jtools) #misc helpers \n\nlibrary(ggpubr) #arrange plots\nlibrary(cowplot) #arrange shift function plots\nlibrary(ggformula) #easy graphs\nlibrary(vcd) #mosaic plots\nlibrary(vcdExtra) #mosaic plots\nlibrary(kableExtra) #printing tables \nlibrary(sjPlot) #visualize model coefficients\nlibrary(ggeasy) #the way it should be\nlibrary(statsExpressions) #expressions to add to plots\nlibrary(ggstatsplot) #plots with expressions\nlibrary(ggdist)\nlibrary(ggeffects) #visualization log regr models\n\n#misc utilities\nlibrary(broom)\nlibrary(modelr)\nlibrary(distributional)\nlibrary(report) #easystats reporting\nlibrary(see) #easystats visualization\nlibrary(performance) #easystats model diagnostics\nlibrary(equatiomatic) #extract model equation\nlibrary(pwr) #power analyses\n\n#modelling\nlibrary(WRS2) #robust and nonparametric tests \nlibrary(lmerTest) #for CIs in glmer \nlibrary(qqplotr) #confint on qq plot\nlibrary(gmodels) #contingency table and CHISQR\nlibrary(pscl) #zeroinfl / hurdle models \nlibrary(lme4) #mixed effects models \nlibrary(ordinal) #ordinal regression\nlibrary(MASS) # polyr ordinal regression\nlibrary(VGAM) #censored, zero infl, etc\nlibrary(brant) #brant test for ordinal regression\nlibrary(nnet) #multinomial logistic regression \nlibrary(bayestestR)\n\n#one package to rule them all\nlibrary(tidyverse) #ALL THE THINGS\n\n#OUTPUT OPTIONS\nlibrary(dplyr, warn.conflicts = FALSE)\noptions(dplyr.summarise.inform = FALSE)\noptions(ggplot2.summarise.inform = FALSE)\noptions(scipen=1, digits=3)\n\n#GRAPH THEMEING\ntheme_set(theme_minimal()) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# HACK WD FOR LOCAL RUNNING?\n# imac = \"/Users/amyraefox/Code/SGC-Scaffolding_Graph_Comprehension/SGC-X/ANALYSIS/MAIN\"\n#mbp = \"/Users/amyfox/Sites/RESEARCH/SGC—Scaffolding Graph Comprehension/SGC-X/ANALYSIS/MAIN\"\n#setwd(mbp)\n\n#IMPORT DATA \ndf_items <- read_rds('analysis/SGC3A/data/2-scored-data/sgc3a_scored_items.rds')\ndf_subjects <- read_rds('analysis/SGC3A/data/2-scored-data/sgc3a_scored_participants.rds')\n\n#PREP DATA \ndf_subjects <- df_subjects %>% mutate(\n  test_score = item_test_NABS,\n  raw_condition = condition,\n  condition = pretty_condition\n)\n\ndf_items <- df_items %>% mutate(\n  accuracy = as.factor(score_niceABS),\n  scaled = recode_factor(score_SCALED, \"-1\" = \"orth\", \"-0.5\"=\"unknown\",\"0\"=\"uncertain\",\"0.5\"=\"lines\",\"1\"=\"tri\"),\n  scaled = as.ordered(scaled),\n  raw_condition = condition,\n  condition = pretty_condition,\n  state = recode_factor(score_SCALED, #for ordinal\n                         \"-1\" = \"orth-like\",\n                         \"-0.5\" = \"unknown\",\n                         \"0\" = \"unknown\",\n                         \"0.5\" = \"tri-like\",\n                         \"1\" = \"tri-like\"),\n  state = as.ordered(state)\n)\n# 3 group ordered STATE variable\n# 5 group ordered SCALED variable [matches high_interpretation]\n```\n:::\n\n# INDEPENDENT SAMPLES\n\n## CONTINUOUS OUTCOME\n\n**Does CONDITION have an effect on TEST PHASE ABSOLUTE SCORE?\\\n(# questions correct on test phase of task, \\[in lab\\] participants)**\n\n*(Can also be transformed to proportion or percentage).*\n\n::: {.cell}\n\n```{.r .cell-code}\n#::::::::::::SETUP DATA\ndf = df_subjects %>% filter(mode == \"lab-synch\")\n\n#::::::::::::DESCRIPTIVES\nmosaic::favstats(test_score ~ condition, data = df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  condition min Q1 median Q3 max mean   sd  n missing\n1   control   0  0      0  1   8 1.71 3.05 62       0\n2   impasse   0  0      2  7   8 3.33 3.40 64       0\n```\n:::\n\n```{.r .cell-code}\n#::::::::::::VISUALIZE DISTRIBUTIONS\n\n# #GGFORMULA | FACETED HISTOGRAM\n# stats = df %>% group_by(pretty_condition) %>% dplyr::summarise(mean = mean(item_test_NABS))\n# gf_props(~item_test_NABS, \n#          fill = ~pretty_condition, data = df) %>% \n#   gf_facet_grid(~pretty_condition) %>% \n#   gf_vline(data = stats, xintercept = ~mean, color = \"red\") +\n#   labs(x = \"# Correct\",\n#        y = \"proportion of subjects\",\n#        title = \"Test Phase Absolute Score (# Correct)\",\n#        subtitle = \"\") + theme(legend.position = \"blank\")\n\n##GGPUBR | HIST+DENSITY SCORE \np <- gghistogram(df, x = \"test_score\", binwidth = 0.5,\n   add = \"mean\", rug = TRUE,\n   fill = \"pretty_condition\", #, palette = c(\"#00AFBB\", \"#E7B800\"),\n   add_density = TRUE)\nfacet(p, facet.by=c(\"condition\")) +\n  labs( title = \"Distribution of TEST Absolute Score\",\n        subtitle =\"Pattern of response is similar across data collection modes but differs by condition\",\n        x = \"Total Absolute Score (Test Phase)\", y = \"number of subjects\") +\n  theme_minimal() + theme(legend.position = \"blank\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/SETUP-IND-TESTSCORE-1.png){width=672}\n:::\n\n```{.r .cell-code}\n##VERTICAL RAINCLOUD USING GGDISTR\nggplot(df, aes(x = condition, y = test_score,\n                        fill = condition) ) + \n  ggdist::stat_halfeye(\n    side = \"left\",\n    justification = 1.1,\n    width = 1, \n    point_colour = NA\n   ) + \n  geom_boxplot(\n    inherit.aes = FALSE, #supress fill\n    mapping = aes(x=condition, y = test_score),\n    width = .15, \n    outlier.shape = NA\n  ) + \n  geom_point(\n    inherit.aes = FALSE, #supress fill\n    mapping = aes(x=condition, y = test_score, color = condition),\n    size = 1.3,\n    alpha = .3,\n    position = position_jitter( \n      seed = 1, width = .05\n  )) + labs( \n    title = \"Distribution of TEST Absolute Score \",\n    x = \"Condition\", y = \"Total Absolute Score (Test Phase)\") +\n  theme(legend.position = \"blank\") + \n  coord_cartesian(xlim = c(0.5, NA), clip = \"off\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/SETUP-IND-TESTSCORE-2.png){width=672}\n:::\n:::\n\n### Independent Samples T-Test (Student's T)\n\n-   Tests null hypothesis that true difference in population mean is == 0\n-   Assumes normally distributed variables\n-   Assumes equal variance of samples (homogeneity of variance)\n-   **SGC accuracy data violate both homogeneity and normality**\\*\n\n::: {.cell}\n\n```{.r .cell-code}\n(t <- t.test( test_score ~ condition,data = df,\n              paired = FALSE, var.equal = TRUE, alternative = c(\"two.sided\"))) # less, greater for one sided tests\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tTwo Sample t-test\n\ndata:  test_score by condition\nt = -3, df = 124, p-value = 0.006\nalternative hypothesis: true difference in means between group control and group impasse is not equal to 0\n95 percent confidence interval:\n -2.759 -0.478\nsample estimates:\nmean in group control mean in group impasse \n                 1.71                  3.33 \n```\n:::\n\n```{.r .cell-code}\nreport(t)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in .effectsize_t.test(model, type = type, verbose = verbose, ...):\nUnable to retrieve data from htest object. Using t_to_d() approximation.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEffect sizes were labelled following Cohen's (1988) recommendations.\n\nThe Two Sample t-test testing the difference of test_score by condition (mean in group control = 1.71, mean in group impasse = 3.33) suggests that the effect is negative, statistically significant, and medium (difference = -1.62, 95% CI [-2.76, -0.48], t(124) = -2.81, p = 0.006; Cohen's d = -0.50, 95% CI [-0.86, -0.15])\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#STATSPLOT | VIOLIN\n\n#one tailed tests must be done manually by extracting results expression and adding as subtitle\n#default is two tailed test\n# results <- two_sample_test( data = df, x = pretty_condition, \n#                             y = item_test_NABS,\n#                             alternative = \"g\")\n\nggbetweenstats(y = test_score, x = condition, data = df,\n               type = \"parametric\", var.equal = TRUE,\n               alternative  = \"g\",\n               pairwide.display = \"significant\", ) \n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# + labs(subtitle = results$expression[[1]])\n```\n:::\n\n### Independent Samples T-Test (Welch's T)\n\n-   Tests null hypothesis that true difference in population mean is == 0\n-   Assumes normally distributed variables\n-   **Does not** assumes equal variance of samples (homogeneity of variance)\n-   ***SGC accuracy data violates normality assumption***\n\n::: {.cell}\n\n```{.r .cell-code}\n(t <- t.test( test_score ~ condition,data = df,\n              paired = FALSE, var.equal = FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWelch Two Sample t-test\n\ndata:  test_score by condition\nt = -3, df = 123, p-value = 0.006\nalternative hypothesis: true difference in means between group control and group impasse is not equal to 0\n95 percent confidence interval:\n -2.76 -0.48\nsample estimates:\nmean in group control mean in group impasse \n                 1.71                  3.33 \n```\n:::\n\n```{.r .cell-code}\nreport(t)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in .effectsize_t.test(model, type = type, verbose = verbose, ...):\nUnable to retrieve data from htest object. Using t_to_d() approximation.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEffect sizes were labelled following Cohen's (1988) recommendations.\n\nThe Welch Two Sample t-test testing the difference of test_score by condition (mean in group control = 1.71, mean in group impasse = 3.33) suggests that the effect is negative, statistically significant, and medium (difference = -1.62, 95% CI [-2.76, -0.48], t(123.25) = -2.81, p = 0.006; Cohen's d = -0.51, 95% CI [-0.86, -0.15])\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#STATSPLOT | VIOLIN\nggbetweenstats(y = test_score, x = condition, data = df,\n               type = \"parametric\", var.equal = FALSE,\n               pairwide.display = \"significant\", )\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n### Yuen's T-Test (Trimmed Means)\n\n-   **Robust alternative to** to t-test is Yuen's t-test which uses trimmed means\n-   Trimmed means are not desireable for this research scenario because they trim data from the extremes, and in this study these are true, interesting values\n-   <https://garstats.wordpress.com/2017/11/28/trimmed-means/>\n\n::: {.cell}\n\n```{.r .cell-code}\n(y <- yuenbt( formula = test_score ~ condition, data = df,\n              side = TRUE, EQVAR = FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\nyuenbt(formula = test_score ~ condition, data = df, side = TRUE, \n    EQVAR = FALSE)\n\nTest statistic: -2.99 (df = NA), p-value = 0.00835\n\nTrimmed mean difference:  -2.53 \n95 percent confidence interval:\n-4.15     -0.907 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#STATSPLOT | VIOLIN\nggbetweenstats(y = test_score, x = condition, data = df,\n               type = \"robust\", var.equal = FALSE,\n               pairwide.display = \"significant\", )\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n### Wilcoxon Rank Sum (Mann-Whitney Test)\n\n-   **Non parametric alternative** to t-test; compares median rather than mean by ranking data\n-   Does not assume normality\n-   Does not assume equal variance of samples (homogeneity of variance)\n-   **Appropriate for SGC accuracy data**\n\n::: {.cell}\n\n```{.r .cell-code}\n(w <- wilcox.test(df$test_score ~ df$condition,\n                 paired = FALSE, alternative = \"two.sided\")) #less, greater\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWilcoxon rank sum test with continuity correction\n\ndata:  df$test_score by df$condition\nW = 1438, p-value = 0.003\nalternative hypothesis: true location shift is not equal to 0\n```\n:::\n\n```{.r .cell-code}\nreport(w)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEffect sizes were labelled following Funder's (2019) recommendations.\n\nThe Wilcoxon rank sum test with continuity correction testing the difference in ranks between df$test_score and df$condition suggests that the effect is negative, statistically significant, and medium (W = 1438.00, p = 0.003; r (rank biserial) = -0.28, 95% CI [-0.45, -0.08])\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#STATSPLOT | VIOLIN\nggbetweenstats(y = test_score, x = condition, data = df,\n               type = \"nonparametric\", var.equal = FALSE,\n               pairwide.display = \"significant\", )\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n### Floor/Ceiling Corrections + Wilcoxon Rank Sum\n\n-   The bimodal distribution of the subject-level score data do not meet the requirements for t-tests.\n-   However, a non-parametric alternative is available (Wilcoxon rank sum test / Man-Whitney test)\n-   Additional corrections are available for data with 'floor' and/or 'ceiling' effects via the 'DACR' package\n-   https://link.springer.com/article/10.3758/s13428-020-01407-2#Sec14 see also https://qmliu.shinyapps.io/DACFE/\n\nFor comparison we run a standard followed by a Wilcoxon rank-sum (Mann-Whitney) test that is a nonparametric alternative for non-normally distributed data.\n\n::: {.cell}\n\n```{.r .cell-code}\n(t <- wilcox.test(df$test_score ~ df$condition))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWilcoxon rank sum test with continuity correction\n\ndata:  df$test_score by df$condition\nW = 1438, p-value = 0.003\nalternative hypothesis: true location shift is not equal to 0\n```\n:::\n:::\n\nNext, we calculate the t-test and ANOVA (F-test) based on a series of corrections provided for data with floor and/or ceiling effects.\n\n-   <https://link.springer.com/article/10.3758/s13428-020-01407-2#Sec14>\n\nUsing properties from truncated normal distributions, the authors propose an easy-to-use method for the *t*-test and ANOVA with ceiling/floor data.\n\n*The proposed method calculates the degrees of freedom based on the after-truncation sample sizes (where l = number of floor observations, and r = number of ceiling observations). The rationale was that the proposed method utilizes full information only from data points of n − r − l participants and partial information from data points of r + l participants of a group for the mean and variance estimation. Specifically, the corrected mean and variance estimates (Eqs. 14 and 15) are functions of mean and variance estimates using after-truncation data (n − r − l participants) and the standardized floor and ceiling threshold estimates. The thresholds are estimated using the ceiling and floor percentage estimates based on data points of n − r and n − l participants, respectively. This is a relatively conservative approach for calculating the degrees of freedom, which can help control the type I error rate. This feature can be beneficial, especially given the \"replication crisis\" in psychological and behavioral research.*\n\n::: {.cell}\n\n```{.r .cell-code}\n#FLOOR-CEILING ADJUSTED T TESTS\nlibrary(DACF) #tests for data with floor and ceiling \n# https://www.rdocumentation.org/packages/DACF/versions/1.0.0\n\n#prepare data [vector of scores for each group]\nscore_111 <- df %>% filter(condition == \"control\") %>% dplyr::select(test_score) %>% pull()\nscore_121 <- df %>% filter(condition == \"impasse\") %>% dplyr::select(test_score) %>% pull()\n\n# recover the mean and variance for ceiling/floor data\na <- rec.mean.var(score_111) %>% unlist()\n# recover the mean and variance for ceiling/floor data\nb <- rec.mean.var(score_121) %>% unlist()\nr <- as.data.frame(rbind(\"control\"=a ,\"impasse\"=b))\nr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        ceiling.percentage floor.percentage est.mean est.var\ncontrol              0.113            0.710    -7.70   207.4\nimpasse              0.172            0.422     2.39    51.8\n```\n:::\n\n```{.r .cell-code}\n# method \"a\" uses original sample size\n# method \"b\" uses after-truncation sample size\n\n# perform adjusted t test\nlw.t.test(score_111,score_121,\"b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$statistic\n[1] -4.94\n\n$p.value\n[1] 0.000012\n\n$est.d\n[1] -0.887\n\n$conf.int\n[1] -14.22  -5.97\n```\n:::\n\n```{.r .cell-code}\n#FLOOR-CEILING ADJUSTED F* TEST ANOVA\nlw.f.star(df,test_score~condition,\"b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$statistic\n[1] 5.85\n\n$p.value\n[1] 0.0321\n\n$est.f.squared\n[1] 0.158\n```\n:::\n\n```{.r .cell-code}\n# method \"a\" uses original sample size\n# method \"b\" uses after-truncation sample size\n```\n:::\n\n*The control condition has 11% of data at ceiling and 71% at floor, with corrected mean of -7 and variance of 207. The impasse condition has 17% at ceiling, and only 42% at floor, with with corrected mean of 2.39 and variance respectively as of 58.*\n\n*A corrected t-test t statistic is -4.94, p = 0.05. The estimated Cohen's d is -0.89 with a confidence interval 0f \\[-14.22, -5.97\\].*\n\n*A correct F-test (ANOVA) has a corrected F-statstic of 5.85, p \\< 0.05, and Fsquared effect size of 0.195*\n\n### Linear Regression\n\n-   Assumes homogeneity of variance\n-   Assumes normally distributed residuals\n-   when default dummy coding is used;\n    -   intercept = predicted mean of first group,\n    -   predictor coefficient = difference to mean of second group\n\n::: {.cell}\n\n```{.r .cell-code}\n#SCORE predicted by CONDITION\nlm.1 <- lm(test_score ~ condition, data = df)\npaste(\"Model\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Model\"\n```\n:::\n\n```{.r .cell-code}\nsummary(lm.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = test_score ~ condition, data = df)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n -3.33  -1.71  -1.71   3.67   6.29 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)         1.710      0.411    4.16 0.000058 ***\nconditionimpasse    1.618      0.576    2.81   0.0058 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.23 on 124 degrees of freedom\nMultiple R-squared:  0.0598,\tAdjusted R-squared:  0.0522 \nF-statistic: 7.89 on 1 and 124 DF,  p-value: 0.00579\n```\n:::\n\n```{.r .cell-code}\npaste(\"Partition Variance\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Partition Variance\"\n```\n:::\n\n```{.r .cell-code}\nanova(lm.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: test_score\n           Df Sum Sq Mean Sq F value Pr(>F)   \ncondition   1     82    82.5    7.89 0.0058 **\nResiduals 124   1297    10.5                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\npaste(\"Confidence Interval on Parameter Estimates\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Confidence Interval on Parameter Estimates\"\n```\n:::\n\n```{.r .cell-code}\nconfint(lm.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 2.5 % 97.5 %\n(Intercept)      0.897   2.52\nconditionimpasse 0.478   2.76\n```\n:::\n\n```{.r .cell-code}\nreport(lm.1) #sanity check\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWe fitted a linear model (estimated using OLS) to predict test_score with condition (formula: test_score ~ condition). The model explains a statistically significant and weak proportion of variance (R2 = 0.06, F(1, 124) = 7.89, p = 0.006, adj. R2 = 0.05). The model's intercept, corresponding to condition = control, is at 1.71 (95% CI [0.90, 2.52], t(124) = 4.16, p < .001). Within this model:\n\n  - The effect of condition [impasse] is statistically significant and positive (beta = 1.62, 95% CI [0.48, 2.76], t(124) = 2.81, p = 0.006; Std. beta = 0.49, 95% CI [0.14, 0.83])\n\nStandardized parameters were obtained by fitting the model on a standardized version of the dataset. 95% Confidence Intervals (CIs) and p-values were computed using the Wald approximation.\n```\n:::\n\n```{.r .cell-code}\ncheck_model(lm.1)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#MODEL ESTIMATES WITH UNCERTAINTY\n\n#setup references\nm <- lm.1\ndf <- df\ncall <- m$call %>% as.character()\n\n# uncertainty model visualization\ndf  %>%\n  modelr::data_grid(condition) %>%\n  augment(lm.1, newdata = ., se_fit = TRUE) %>%\n  ggplot(aes(y = condition, color = condition)) +\n  stat_halfeye( scale = .5,\n      aes(\n        xdist = dist_student_t(df = df.residual(m), mu = .fitted, sigma = .se.fit),\n        fill = stat(cut_cdf_qi(cdf,\n                .width = c(.90, .95),\n                labels = scales::percent_format())))) +\n  scale_fill_brewer(direction = -1) +\n  labs (title = \"(LAB) Test Phase Accuracy ~ Condition\",\n        x = \"model predicted mean (% correct)\", y = \"Condition\", fill = \"Interval\",\n        subtitle = paste(\"lm(\",call[2],\")\")\n  ) + theme(legend.position = \"blank\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/PLOT-MODEL-COEFSS-GGDIST-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#sjPlot\np1 <- plot_model(lm.1,  type = \"eff\", \n           show.data = TRUE, jitter = TRUE,\n           show.p = TRUE) \n\n#BS TO MANUALLY ADD REGRESSION FORMULA AS SUBTITLE \n# library(equatiomatic)\n# library(latex2exp)\n# (x <- extract_eq(lm.1, use_coefs = TRUE, ital_vars=TRUE, coef_digits = 1, raw_tex = FALSE))\n# b = TeX(x)\n# p1[[\"condition\"]][[\"labels\"]][[\"subtitle\"]]= expression( paste(widehat(accuracy), \" = \", 1.7, \" + \", \"1.6\", \"*\", condition[impasse]) )\np1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$condition\n```\n:::\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/PLOT-MODEL-PRED-SJPLOT-1.png){width=672}\n:::\n:::\n\n### Censored (Tobit) Regression\n\n<https://stats.oarc.ucla.edu/r/dae/tobit-models/>\n\n**For censored data (i.e. truncated axis).** The tobit model, also called a censored regression model, is designed to estimate linear relationships between variables when there is either left- or right-censoring in the dependent variable (also known as censoring from below and above, respectively). Censoring from above takes place when cases with a value at or above some threshold, all take on the value of that threshold, so that the true value might be equal to the threshold, but it might also be higher. In the case of censoring from below, values those that fall at or below some threshold are censored.\n\n-   censored vs truncated : There is sometimes confusion about the difference between truncated data and censored data.\n-   With censored variables, all of the observations are in the dataset, but we don't know the \"true\" values of some of them.\n-   With truncation some of the observations are not included in the analysis because of the value of the variable.\n-   When a variable is censored, regression models for truncated data provide inconsistent estimates of the parameters. See Long (1997, chapter 7) for a more detailed discussion of problems of using regression models for truncated data to analyze censored data.\n\n::: {.cell}\n\n```{.r .cell-code}\n#set censoring values \nlo = 0\nhi = 8 \nrange(df$test_score)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 8\n```\n:::\n\n```{.r .cell-code}\nprint(\"Lo and Hi should equate to upper and lower bounds of the # Qs \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Lo and Hi should equate to upper and lower bounds of the # Qs \"\n```\n:::\n\n```{.r .cell-code}\nlibrary(VGAM)\n\n#FIT MODEL\nm1<- vglm(test_score ~ condition, tobit(Lower = lo, Upper =hi ), data = df)\nsummary(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nvglm(formula = test_score ~ condition, family = tobit(Lower = lo, \n    Upper = hi), data = df)\n\nCoefficients: \n                 Estimate Std. Error z value Pr(>|z|)    \n(Intercept):1      -4.185      1.483   -2.82   0.0048 ** \n(Intercept):2       2.203      0.127   17.38   <2e-16 ***\nconditionimpasse    5.577      1.982    2.81   0.0049 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nNames of linear predictors: mu, loglink(sd)\n\nLog-likelihood: -196 on 249 degrees of freedom\n\nNumber of Fisher scoring iterations: 11 \n\nNo Hauck-Donner effect found in any of the estimates\n```\n:::\n\n```{.r .cell-code}\n#CONFIDENCE INTERVALS\nb <- coef(m1)\nse <- sqrt(diag(vcov(m1)))\ncbind(LL = b - qnorm(0.975) * se, UL = b + qnorm(0.975) * se)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    LL    UL\n(Intercept):1    -7.09 -1.28\n(Intercept):2     1.95  2.45\nconditionimpasse  1.69  9.46\n```\n:::\n\n```{.r .cell-code}\n#TEST FIT\n#We can test the significance of condition overall by fitting an empty model and using a likelihood ratio test.\nm0 <- vglm(test_score ~ 1, tobit(Lower = lo, Upper = hi), data = df)\n(p <- pchisq(2 * (logLik(m1) - logLik(m0)), df = 2, lower.tail = FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.0134\n```\n:::\n\n```{.r .cell-code}\npaste(\"P value of likelihood ratio test less than alpha = 0.05? \", p <0.05)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"P value of likelihood ratio test less than alpha = 0.05?  TRUE\"\n```\n:::\n\n```{.r .cell-code}\ncompare_performance(m0,m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Comparison of Model Performance Indices\n\nName | Model |     AIC | AIC weights |     BIC | BIC weights |  RMSE | Sigma\n----------------------------------------------------------------------------\nm0   |  vglm | 404.682 |       0.035 | 410.355 |       0.131 | 7.529 | 7.560\nm1   |  vglm | 398.060 |       0.965 | 406.569 |       0.869 | 7.101 | 7.144\n```\n:::\n\n```{.r .cell-code}\n#DIAGNOSTICS\nplot(m1)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-17-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-17-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-17-4.png){width=672}\n:::\n\n```{.r .cell-code}\ndf$yhat <- fitted(m1)[,1]\ndf$rr <- resid(m1, type = \"response\")\ndf$rp <- resid(m1, type = \"pearson\")[,1]\n\npar(mfcol = c(2, 3))\n\nwith(df, {\n  plot(yhat, rr, main = \"Fitted vs Residuals\")\n  qqnorm(rr)\n  plot(yhat, rp, main = \"Fitted vs Pearson Residuals\")\n  qqnorm(rp)\n  plot(test_score, rp, main = \"Actual vs Pearson Residuals\")\n  plot(test_score, yhat, main = \"Actual vs Fitted\")\n})\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-17-5.png){width=672}\n:::\n\n```{.r .cell-code}\n#VARIANCE ACCOUNTED FOR\nprint(\"VARIANCE ACCOUNTED FOR\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"VARIANCE ACCOUNTED FOR\"\n```\n:::\n\n```{.r .cell-code}\n# correlation\n(r <- with(df, cor(yhat, test_score)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.245\n```\n:::\n\n```{.r .cell-code}\n# variance accounted for\nr^2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.0598\n```\n:::\n\n```{.r .cell-code}\nperformance(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Indices of model performance\n\nAIC     |     BIC |  RMSE | Sigma\n---------------------------------\n398.060 | 406.569 | 7.101 | 7.144\n```\n:::\n\n```{.r .cell-code}\n#NOTE: censReg package also does Tobit regression [including mixed models]\n```\n:::\n\n-   The coefficient labeled \"(Intercept):1\" is the intercept or constant for the model.\n-   The coefficient labeled \"(Intercept):2\" is an ancillary statistic. If we exponentiate this value, we get a statistic that is analogous to the square root of the residual variance in OLS regression. logSigma is the variance of the model (logarithmized) (same as the second intercept in the VGAM output)\n-   The predicted value of test_phase_score is 5.75 points *higher* for students in the impasse condition than for students in the control condition. (72% improvement in score!)\n\n**Using censReg package** - https://cran.r-project.org/web/packages/censReg/vignettes/censReg.pdf\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(censReg) #censored regression\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: maxLik\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: miscTools\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nPlease cite the 'maxLik' package as:\nHenningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.\n\nIf you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:\nhttps://r-forge.r-project.org/projects/maxlik/\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nPlease cite the 'censReg' package as:\nHenningsen, Arne (2017). censReg: Censored Regression (Tobit) Models. R package version 0.5. http://CRAN.R-Project.org/package=censReg.\n\nIf you have questions, suggestions, or comments regarding the 'censReg' package, please use a forum or 'tracker' at the R-Forge site of the 'sampleSelection' project:\nhttps://r-forge.r-project.org/projects/sampleselection/\n```\n:::\n\n```{.r .cell-code}\n#FIT MODEL\nc1 <- censReg( test_score ~ condition, left=lo, right=hi, data = df )\nsummary(c1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\ncensReg(formula = test_score ~ condition, left = lo, right = hi, \n    data = df)\n\nObservations:\n         Total  Left-censored     Uncensored Right-censored \n           126             71             37             18 \n\nCoefficients:\n                 Estimate Std. error t value Pr(> t)    \n(Intercept)       -4.1854     1.7149  -2.441 0.01466 *  \nconditionimpasse   5.5775     1.9995   2.789 0.00528 ** \nlogSigma           2.2033     0.1424  15.471 < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nNewton-Raphson maximisation, 5 iterations\nReturn code 1: gradient close to zero (gradtol)\nLog-likelihood: -196 on 3 Df\n```\n:::\n\n```{.r .cell-code}\n#CONFIDENCE INTERVALS\nb <- coef(c1)\nse <- sqrt(diag(vcov(c1)))\ncbind(LL = b - qnorm(0.975) * se, UL = b + qnorm(0.975) * se)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    LL     UL\n(Intercept)      -7.55 -0.824\nconditionimpasse  1.66  9.496\nlogSigma          1.92  2.482\n```\n:::\n\n```{.r .cell-code}\n#TEST FIT\n#We can test the significance of condition overall by fitting an empty model and using a likelihood ratio test.\n\nc0 <- censReg( test_score ~ 1, left=lo, right=hi, data = df )\n(p <- pchisq(2 * (logLik(c1) - logLik(c0)), df = 2, lower.tail = FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'log Lik.' 0.0134 (df=3)\n```\n:::\n\n```{.r .cell-code}\npaste(\"P value of likelihood ratio test less than alpha = 0.05? \", p <0.05)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"P value of likelihood ratio test less than alpha = 0.05?  TRUE\"\n```\n:::\n\n```{.r .cell-code}\nperformance(c1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in get_residuals.default(model, verbose = verbose, type = \"response\", :\nCan't extract residuals from model.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Response residuals not available to calculate mean square error. (R)MSE\n  is probably not reliable.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Models of class 'censReg' are not yet supported.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n-   logSigma is the variance of the model (logarithmized) (same as the second intercept in the VGAM output)\n-   output should match that of VGAM\n\n## COUNT OUTCOME\n\n**Does CONDITION have an effect on TEST PHASE ABSOLUTE SCORE?\\\n(# questions correct on test phase of task, \\[in lab\\] participants)**\n\nThe outcome variable absolute score is clearly not normal. As it represents the cumulative number of items a participant has answered correctly, we can try considering it a type of *count*, (i.e. count of the number of questions the participant got correct) and attempt to model it using a General Linear Model with the Poisson distribution (and the default log-link function). Note that the process of answering questions on a test do not seem to strictly match the assumptions of a Poisson process.\n\n::: {.cell}\n\n```{.r .cell-code}\n#::::::::::::SETUP DATA\ndf = df_subjects %>% filter(mode == \"lab-synch\")\n\n#::::::::::::DESCRIPTIVES\nmosaic::favstats(test_score ~ condition, data = df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  condition min Q1 median Q3 max mean   sd  n missing\n1   control   0  0      0  1   8 1.71 3.05 62       0\n2   impasse   0  0      2  7   8 3.33 3.40 64       0\n```\n:::\n\n```{.r .cell-code}\n#::::::::::::VISUALIZE DISTRIBUTIONS\n\n# #GGFORMULA | FACETED HISTOGRAM\n# stats = df %>% group_by(pretty_condition) %>% dplyr::summarise(mean = mean(item_test_NABS))\n# gf_props(~item_test_NABS, \n#          fill = ~pretty_condition, data = df) %>% \n#   gf_facet_grid(~pretty_condition) %>% \n#   gf_vline(data = stats, xintercept = ~mean, color = \"red\") +\n#   labs(x = \"# Correct\",\n#        y = \"proportion of subjects\",\n#        title = \"Test Phase Absolute Score (# Correct)\",\n#        subtitle = \"\") + theme(legend.position = \"blank\")\n\n##GGPUBR | HIST+DENSITY SCORE \np <- gghistogram(df, x = \"test_score\", binwidth = 0.5,\n   add = \"mean\", rug = TRUE,\n   fill = \"pretty_condition\", #, palette = c(\"#00AFBB\", \"#E7B800\"),\n   add_density = TRUE)\nfacet(p, facet.by=c(\"condition\")) +\n  labs( title = \"Distribution of TEST Absolute Score\",\n        subtitle =\"Pattern of response is similar across data collection modes but differs by condition\",\n        x = \"Total Absolute Score (Test Phase)\", y = \"number of subjects\") +\n  theme_minimal() + theme(legend.position = \"blank\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/SETUP-COUNT-TESTSCORE-1.png){width=672}\n:::\n\n```{.r .cell-code}\n##VERTICAL RAINCLOUD USING GGDISTR\nggplot(df, aes(x = condition, y = test_score,\n                        fill = condition) ) + \n  ggdist::stat_halfeye(\n    side = \"left\",\n    justification = 1.1,\n    width = 1, \n    point_colour = NA\n   ) + \n  geom_boxplot(\n    inherit.aes = FALSE, #supress fill\n    mapping = aes(x=condition, y = test_score),\n    width = .15, \n    outlier.shape = NA\n  ) + \n  geom_point(\n    inherit.aes = FALSE, #supress fill\n    mapping = aes(x=condition, y = test_score, color = condition),\n    size = 1.3,\n    alpha = .3,\n    position = position_jitter( \n      seed = 1, width = .05\n  )) + labs( \n    title = \"Distribution of TEST Absolute Score \",\n    x = \"Condition\", y = \"Total Absolute Score (Test Phase)\") +\n  theme(legend.position = \"blank\") + \n  coord_cartesian(xlim = c(0.5, NA), clip = \"off\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/SETUP-COUNT-TESTSCORE-2.png){width=672}\n:::\n:::\n\n### Poisson Regression\n\n<https://stats.oarc.ucla.edu/r/dae/poisson-regression/>\\\n*General Linear model using the Poisson distribution*\n\n::: {.cell}\n\n```{.r .cell-code}\n#SCORE predicted by CONDITION --> POISSON DISTRIBUTION\np.1 <- glm(test_score ~ condition, data = df, family = \"poisson\")\npaste(\"Model\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Model\"\n```\n:::\n\n```{.r .cell-code}\nsumm(p.1)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed table-responsive\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Observations </td>\n   <td style=\"text-align:right;\"> 126 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Dependent variable </td>\n   <td style=\"text-align:right;\"> test_score </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Type </td>\n   <td style=\"text-align:right;\"> Generalized linear model </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Family </td>\n   <td style=\"text-align:right;\"> poisson </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Link </td>\n   <td style=\"text-align:right;\"> log </td>\n  </tr>\n</tbody>\n</table> <table class=\"table table-striped table-hover table-condensed table-responsive\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> 𝛘²(1) </td>\n   <td style=\"text-align:right;\"> 33.28 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Pseudo-R² (Cragg-Uhler) </td>\n   <td style=\"text-align:right;\"> 0.23 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Pseudo-R² (McFadden) </td>\n   <td style=\"text-align:right;\"> 0.04 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> AIC </td>\n   <td style=\"text-align:right;\"> 764.95 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> BIC </td>\n   <td style=\"text-align:right;\"> 770.62 </td>\n  </tr>\n</tbody>\n</table> <table class=\"table table-striped table-hover table-condensed table-responsive\" style=\"width: auto !important; margin-left: auto; margin-right: auto;border-bottom: 0;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:right;\"> Est. </th>\n   <th style=\"text-align:right;\"> S.E. </th>\n   <th style=\"text-align:right;\"> z val. </th>\n   <th style=\"text-align:right;\"> p </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> (Intercept) </td>\n   <td style=\"text-align:right;\"> 0.54 </td>\n   <td style=\"text-align:right;\"> 0.10 </td>\n   <td style=\"text-align:right;\"> 5.52 </td>\n   <td style=\"text-align:right;\"> 0.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> conditionimpasse </td>\n   <td style=\"text-align:right;\"> 0.67 </td>\n   <td style=\"text-align:right;\"> 0.12 </td>\n   <td style=\"text-align:right;\"> 5.60 </td>\n   <td style=\"text-align:right;\"> 0.00 </td>\n  </tr>\n</tbody>\n<tfoot><tr><td style=\"padding: 0; \" colspan=\"100%\">\n<sup></sup> Standard errors: MLE</td></tr></tfoot>\n</table>\n`````\n:::\n\n```{.r .cell-code}\npaste(\"Partition Variance\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Partition Variance\"\n```\n:::\n\n```{.r .cell-code}\nanova(p.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Deviance Table\n\nModel: poisson, link: log\n\nResponse: test_score\n\nTerms added sequentially (first to last)\n\n          Df Deviance Resid. Df Resid. Dev\nNULL                        125        604\ncondition  1     33.3       124        570\n```\n:::\n\n```{.r .cell-code}\npaste(\"Confidence Interval on Parameter Estimates\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Confidence Interval on Parameter Estimates\"\n```\n:::\n\n```{.r .cell-code}\nconfint(p.1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWaiting for profiling to be done...\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                 2.5 % 97.5 %\n(Intercept)      0.340  0.721\nconditionimpasse 0.436  0.902\n```\n:::\n\n```{.r .cell-code}\nreport(p.1) #sanity check\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWe fitted a poisson model (estimated using ML) to predict test_score with condition (formula: test_score ~ condition). The model's explanatory power is moderate (Nagelkerke's R2 = 0.23). The model's intercept, corresponding to condition = control, is at 0.54 (95% CI [0.34, 0.72], p < .001). Within this model:\n\n  - The effect of condition [impasse] is statistically significant and positive (beta = 0.67, 95% CI [0.44, 0.90], p < .001; Std. beta = 0.67, 95% CI [0.44, 0.90])\n\nStandardized parameters were obtained by fitting the model on a standardized version of the dataset. 95% Confidence Intervals (CIs) and p-values were computed using \n```\n:::\n\n```{.r .cell-code}\nplot_model(p.1)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncheck_model(p.1)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-20-2.png){width=672}\n:::\n:::\n\n*The variable condition has a coefficient of 0.67, (p \\< 0.005). This means that for the impasse condition, the expected log count \\# of questions increases by 0.67. By exponentiating the estimate we see that \\# question correct rate for the impasse condition is 1.95x that of the control condition. However, model diagnostics suggest the residuals are not normally distributed.*\n\n### Negative Binomial Regression\n\n<https://stats.oarc.ucla.edu/r/dae/negative-binomial-regression/> -*overdispersed count data (variance much greater than mean)*\n\n-   similar to Poisson regression, but using the negative binomial distribution, which can better account for 'overdispersed' data where variance is much greater than the mean\n\n::: {.cell}\n\n```{.r .cell-code}\n#NEGATIVE BIONOMIAL REGRESSION\n\nlibrary(MASS)\n\n#fit model \nnb.1 <- glm.nb(test_score ~ condition, data = df)\n\n#check overdispersion need \n#assumes conditional means are not equal to conditional variances\n#conduct likelihood ration test to compare and test [need poisson]\nm.t <- glm(test_score ~ condition, family = \"poisson\", data = df)\n#pchisq(2 * (logLik(nb.1) - logLik(m.t)), df = 1, lower.tail = FALSE)\n#A large (+) log likelihood suggests that the negative binomial is more appropriate than the Poisson model\ntest_lrt(m.t, nb.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Likelihood-Ratio-Test (LRT) for Model Comparison (ML-estimator)\n\nName |  Model | df | df_diff |   Chi2 |      p\n----------------------------------------------\nm.t  |    glm |  2 |         |        |       \nnb.1 | negbin |  3 |       1 | 277.71 | < .001\n```\n:::\n\n```{.r .cell-code}\n#EXPONENTIATE PARAMETER ESTIMATES\nest <- cbind(Estimate = coef(nb.1), confint(nb.1))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWaiting for profiling to be done...\n```\n:::\n\n```{.r .cell-code}\n#exponentiate parameter estimates\nprint(\"Exponentiated Estimates\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Exponentiated Estimates\"\n```\n:::\n\n```{.r .cell-code}\nexp(est)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 Estimate 2.5 % 97.5 %\n(Intercept)          1.71  1.07   2.89\nconditionimpasse     1.95  0.98   3.86\n```\n:::\n\n```{.r .cell-code}\nsummary(nb.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nglm.nb(formula = test_score ~ condition, data = df, init.theta = 0.2977734703, \n    link = log)\n\nDeviance Residuals: \n   Min      1Q  Median      3Q     Max  \n-1.220  -1.066  -1.066   0.447   1.067  \n\nCoefficients:\n                 Estimate Std. Error z value Pr(>|z|)  \n(Intercept)         0.536      0.252    2.13    0.033 *\nconditionimpasse    0.666      0.348    1.92    0.055 .\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for Negative Binomial(0.298) family taken to be 1)\n\n    Null deviance: 114.32  on 125  degrees of freedom\nResidual deviance: 110.70  on 124  degrees of freedom\nAIC: 489.2\n\nNumber of Fisher Scoring iterations: 1\n\n              Theta:  0.2978 \n          Std. Err.:  0.0586 \n\n 2 x log-likelihood:  -483.2380 \n```\n:::\n\n```{.r .cell-code}\nreport(nb.1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWe fitted a negative-binomial model (estimated using ML) to predict test_score with condition (formula: test_score ~ condition). The model's explanatory power is weak (Nagelkerke's R2 = 0.05). The model's intercept, corresponding to condition = control, is at 0.54 (95% CI [0.07, 1.06], p = 0.033). Within this model:\n\n  - The effect of condition [impasse] is statistically non-significant and positive (beta = 0.67, 95% CI [-0.02, 1.35], p = 0.055; Std. beta = 0.67, 95% CI [-0.02, 1.35])\n\nStandardized parameters were obtained by fitting the model on a standardized version of the dataset. 95% Confidence Intervals (CIs) and p-values were computed using \n```\n:::\n\n```{.r .cell-code}\nplot_model(nb.1)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncheck_model(nb.1)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-21-2.png){width=672}\n:::\n:::\n\n*The variable condition has a coefficient of 0.67, (p \\< 0.005). This means that for the impasse condition, the expected log count \\# of questions increases by 0.67. By exponentiating the estimate we see that \\# question correct rate for the impasse condition is nearly 1.95x that of the control condition. However, model diagnostics suggest the residuals are not normally distributed.*\n\n::: {.cell}\n\n```{.r .cell-code}\n#COMPARE POISSON AND NEGATIVE BINOMIAL\ncompare_performance(p.1, nb.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Comparison of Model Performance Indices\n\nName |  Model |     AIC | AIC weights |     BIC | BIC weights | Nagelkerke's R2 |  RMSE | Sigma | Score_log | Score_spherical\n-----------------------------------------------------------------------------------------------------------------------------\np.1  |    glm | 764.945 |     < 0.001 | 770.618 |     < 0.001 |           0.234 | 3.208 | 2.145 |    -3.020 |           0.069\nnb.1 | negbin | 489.238 |        1.00 | 497.747 |        1.00 |           0.048 | 3.208 | 0.945 |    -2.213 |           0.074\n```\n:::\n\n```{.r .cell-code}\ntest_lrt(p.1, nb.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Likelihood-Ratio-Test (LRT) for Model Comparison (ML-estimator)\n\nName |  Model | df | df_diff |   Chi2 |      p\n----------------------------------------------\np.1  |    glm |  2 |         |        |       \nnb.1 | negbin |  3 |       1 | 277.71 | < .001\n```\n:::\n:::\n\n*AIC, Pseudo-R2 and a likelihood ratio test indicate that the negative binomial regression model are a better fit for the distribution of test-phase scores.*\n\n## MIXTURE MODELS\n\n### Zero Inflated Poisson\n\n<https://stats.oarc.ucla.edu/r/dae/zip/>\\\n*A Poisson count process with excess zeros*\n\n-   The Zero-Inflated model allows specification of two models (a mixture) where *some* of the zeros are included in the DGP for the Poisson model, while only the 'excess' zeros are included in the DGP for the Binomial model \\[the zero-inflated part\\]\n-   The model includes:\n    -   A logistic model to model which of the two processes the zero outcome is associated with\n    -   A poisson model to model the count process\n-   Can specify different predictors for each part of the model\n-   predictors after the \\| are for the binomial zero-inflated part of the model, while those infront are for the poisson process\n\n::: {.cell}\n\n```{.r .cell-code}\n#ZERO INFLATED POISSON\n\nzinfp.1 <- zeroinfl(test_score ~  condition| condition , data = df)\nsummary(zinfp.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nzeroinfl(formula = test_score ~ condition | condition, data = df)\n\nPearson residuals:\n   Min     1Q Median     3Q    Max \n-0.988 -0.575 -0.575  1.090  2.117 \n\nCount model coefficients (poisson with log link):\n                 Estimate Std. Error z value Pr(>|z|)    \n(Intercept)        1.7702     0.0979   18.07   <2e-16 ***\nconditionimpasse  -0.0231     0.1199   -0.19     0.85    \n\nZero-inflation model coefficients (binomial with logit link):\n                 Estimate Std. Error z value Pr(>|z|)   \n(Intercept)         0.890      0.280    3.18   0.0015 **\nconditionimpasse   -1.213      0.378   -3.21   0.0013 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n\nNumber of iterations in BFGS optimization: 7 \nLog-likelihood: -213 on 4 Df\n```\n:::\n\n```{.r .cell-code}\nreport(zinfp.1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWe fitted a zero-inflated poisson model to predict test_score with condition (formula: test_score ~ condition). The model's explanatory power is substantial (R2 = 0.39, adj. R2 = 0.38). The model's intercept, corresponding to condition = control, is at 1.77 (95% CI [1.58, 1.96], p < .001). Within this model:\n\n  - The effect of condition [impasse] is statistically non-significant and negative (beta = -0.02, 95% CI [-0.26, 0.21], p = 0.847; Std. beta = -0.02, 95% CI [-0.26, 0.21])\n  - The effect of condition [impasse] is statistically significant and negative (beta = -1.21, 95% CI [-1.95, -0.47], p = 0.001; Std. beta = -1.21, 95% CI [-1.95, -0.47])\n\nStandardized parameters were obtained by fitting the model on a standardized version of the dataset.\n```\n:::\n\n```{.r .cell-code}\nperformance(zinfp.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Indices of model performance\n\nAIC     |     BIC |    R2 | R2 (adj.) |  RMSE | Sigma | Score_log | Score_spherical\n-----------------------------------------------------------------------------------\n434.837 | 446.183 | 0.391 |     0.381 | 3.208 | 3.260 |    -1.694 |           0.069\n```\n:::\n\n```{.r .cell-code}\n#check_model(zinfp.1)\n```\n:::\n\n*In the count model, the coefficient for the condition is not significant.*\n\n*In the zero-inflation model, the coefficient for the condition variable is -1.23 and statistically significant. This suggests that the log odds of being an excessive zero decrease by 1.23 if you are in the impasse condition*\n\n### Zero Inflated Negative Binomial Regression\n\n<https://stats.oarc.ucla.edu/r/dae/zinb/>\\\n*count data that are overdispersed and have excess zeros*\n\nZero-inflated negative binomial regression is for modelling count variables with excessive zeros, and especially when the count data are overdispersed (mean is much larger than variance). It can help account for situations where theory suggests that excess zeros are generated by 2 separate processes, one that includes the other count values, and the other that is just the zeros, and thus that the *excess* zeros can be modelled independently.\n\nTotal Absolute Score (# items correct) may fit this situation, as the data are overdispersed (variance much greater than the mean) and there are are very large number of zeros. It is theoretically plausible that these excess zeros (no answers correct) are the result of a different 'process' ... (i.e) little understanding and/or resistance to restructuring understanding of the coordinate system. However, I am not certain if it is plausible to suggest that the zeros themselves are the result of two different processes: (ie. perhaps trying to understand, and not trying to understand?) \\<- this could maybe be disentangled by first question latency?\n\nThe model includes:\n\n-   A logistic model to model which of the two processes the zero outcome is associated with\n-   A negative binomial model to model the count process\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pscl) #  for zeroinfl negbinomial\n\n#ZERO INFLATED NEGATIVE BINOMIAL\nzinb.1 <- zeroinfl(test_score ~ condition | condition , \n                   data = df, dist = \"negbin\")\n#before the | is the count part, after the | is the logit model\npaste(\"Model\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Model\"\n```\n:::\n\n```{.r .cell-code}\nsummary(zinb.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nzeroinfl(formula = test_score ~ condition | condition, data = df, dist = \"negbin\")\n\nPearson residuals:\n   Min     1Q Median     3Q    Max \n-0.970 -0.568 -0.568  1.070  2.091 \n\nCount model coefficients (negbin with log link):\n                 Estimate Std. Error z value Pr(>|z|)    \n(Intercept)        1.7689     0.1048   16.88   <2e-16 ***\nconditionimpasse  -0.0232     0.1282   -0.18    0.856    \nLog(theta)         3.7504     2.1488    1.75    0.081 .  \n\nZero-inflation model coefficients (binomial with logit link):\n                 Estimate Std. Error z value Pr(>|z|)   \n(Intercept)         0.888      0.280    3.17   0.0015 **\nconditionimpasse   -1.214      0.379   -3.21   0.0013 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n\nTheta = 42.54 \nNumber of iterations in BFGS optimization: 7 \nLog-likelihood: -213 on 5 Df\n```\n:::\n\n```{.r .cell-code}\nreport(zinb.1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWe fitted a zero-inflated negative-binomial model to predict test_score with condition (formula: test_score ~ condition). The model's explanatory power is substantial (R2 = 0.40, adj. R2 = 0.39). The model's intercept, corresponding to condition = control, is at 1.77 (95% CI [1.56, 1.97], p < .001). Within this model:\n\n  - The effect of condition [impasse] is statistically non-significant and negative (beta = -0.02, 95% CI [-0.27, 0.23], p = 0.856; Std. beta = -0.02, 95% CI [-0.27, 0.23])\n  - The effect of condition [impasse] is statistically significant and negative (beta = -1.21, 95% CI [-1.96, -0.47], p = 0.001; Std. beta = -1.21, 95% CI [-1.96, -0.47])\n\nStandardized parameters were obtained by fitting the model on a standardized version of the dataset.\n```\n:::\n\n```{.r .cell-code}\nperformance(zinb.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Indices of model performance\n\nAIC     |     BIC |    R2 | R2 (adj.) |  RMSE | Sigma | Score_log | Score_spherical\n-----------------------------------------------------------------------------------\n436.585 | 450.766 | 0.398 |     0.388 | 3.208 | 3.274 |    -1.740 |           0.068\n```\n:::\n\n```{.r .cell-code}\n#   rootogram(zinb.1)\n\n\n\n# #EXPONENTIATE PARAMETER ESTIMATES\n# est <- cbind(Estimate = coef(zinb.1), confint(zinb.1))\n# #exponentiate parameter estimates\n# print(\"Exponentiated Estimates\")\n# exp(est)\n```\n:::\n\n*In the count model, the coefficient for the condition is very small, and not significant (suggesting it does not contribute to the count yielding process?).*\n\n*In the zero-inflation model, the coefficient for the condition variable is -1.056 and statistically significant. This suggests that the log odds of being an excessive zero decrease by 1.06 if you are in the impasse condition*\n\n::: {.cell}\n\n```{.r .cell-code}\ncompare_performance(zinfp.1, zinb.1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSome of the nested models seem to be identical\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# Comparison of Model Performance Indices\n\nName    |    Model |     AIC | AIC weights |     BIC | BIC weights |    R2 | R2 (adj.) |  RMSE | Sigma | Score_log | Score_spherical\n------------------------------------------------------------------------------------------------------------------------------------\nzinfp.1 | zeroinfl | 434.837 |       0.705 | 446.183 |       0.908 | 0.391 |     0.381 | 3.208 | 3.260 |    -1.694 |           0.069\nzinb.1  | zeroinfl | 436.585 |       0.295 | 450.766 |       0.092 | 0.398 |     0.388 | 3.208 | 3.274 |    -1.740 |           0.068\n```\n:::\n\n```{.r .cell-code}\ntest_likelihoodratio(zinfp.1, zinb.1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSome of the nested models seem to be identical\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# Likelihood-Ratio-Test (LRT) for Model Comparison (ML-estimator)\n\nName    |    Model | df | df_diff | Chi2 |     p\n------------------------------------------------\nzinfp.1 | zeroinfl |  4 |         |      |      \nzinb.1  | zeroinfl |  5 |       1 | 0.25 | 0.615\n```\n:::\n:::\n\n**TODO come back to this and discuss further**\\\n\n### Hurdle Model\n\n-   <https://data.library.virginia.edu/getting-started-with-hurdle-models/>\n-   <https://en.wikipedia.org/wiki/Hurdle_model#:~:text=A%20hurdle%20model%20is%20a,of%20the%20non%2Dzero%20values.>\n\nclass of models for count data with both overdispersion and excess zeros;\\\ndifferent from zero-inflated models where the excess zeros are theorized to arise from two *different* processes; in the hurdle model, there is a separate model for P(x=0) and a separate model for P(x!=0)\n\nThe model includes:\n\n-   A binary logit model to model whether the observation takes a positive count or not. (1) Does the student get *any* questions right?\n\n-   a truncated Poisson or Negative binomial model that only fits positive counts (2) How many questions does the student get right?\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pscl) #zero-inf and hurdle models \nlibrary(countreg) #rootogram\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 methods overwritten by 'countreg':\n  method                 from\n  print.zeroinfl         pscl\n  print.summary.zeroinfl pscl\n  summary.zeroinfl       pscl\n  coef.zeroinfl          pscl\n  vcov.zeroinfl          pscl\n  logLik.zeroinfl        pscl\n  predict.zeroinfl       pscl\n  residuals.zeroinfl     pscl\n  fitted.zeroinfl        pscl\n  terms.zeroinfl         pscl\n  model.matrix.zeroinfl  pscl\n  extractAIC.zeroinfl    pscl\n  print.hurdle           pscl\n  print.summary.hurdle   pscl\n  summary.hurdle         pscl\n  coef.hurdle            pscl\n  vcov.hurdle            pscl\n  logLik.hurdle          pscl\n  predict.hurdle         pscl\n  residuals.hurdle       pscl\n  fitted.hurdle          pscl\n  terms.hurdle           pscl\n  model.matrix.hurdle    pscl\n  extractAIC.hurdle      pscl\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'countreg'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:VGAM':\n\n    dzipois, pzipois, qzipois, rzipois\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:pscl':\n\n    hurdle, hurdle.control, hurdletest, zeroinfl, zeroinfl.control\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:vcd':\n\n    rootogram\n```\n:::\n\n```{.r .cell-code}\n#install.packages(\"countreg\", repos=\"http://R-Forge.R-project.org\")\n\n#SYNTAX OUTCOME ~ count model predictor | hurdle predictor\n\nh.1 <- pscl::hurdle(test_score ~ condition | condition , data = df,\n              zero.dist = \"binomial\", dist = \"poisson\", size = 8)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optim(fn = countDist, gr = countGrad, par = c(start$count, if (dist\n== : unknown names in control: size\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optim(fn = zeroDist, gr = zeroGrad, par = c(start$zero, if (zero.dist\n== : unknown names in control: size\n```\n:::\n\n```{.r .cell-code}\nh.2 <- pscl::hurdle(test_score ~ condition | condition , data = df,\n              zero.dist = \"binomial\", dist = \"negbin\", size = 8)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optim(fn = countDist, gr = countGrad, par = c(start$count, if (dist\n== : unknown names in control: size\n\nWarning in optim(fn = countDist, gr = countGrad, par = c(start$count, if (dist\n== : unknown names in control: size\n```\n:::\n\n```{.r .cell-code}\nsummary(h.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\npscl::hurdle(formula = test_score ~ condition | condition, data = df, \n    dist = \"poisson\", zero.dist = \"binomial\", size = 8)\n\nPearson residuals:\n   Min     1Q Median     3Q    Max \n-0.988 -0.575 -0.575  1.090  2.117 \n\nCount model coefficients (truncated poisson with log link):\n                 Estimate Std. Error z value Pr(>|z|)    \n(Intercept)        1.7702     0.0979   18.07   <2e-16 ***\nconditionimpasse  -0.0231     0.1199   -0.19     0.85    \nZero hurdle model coefficients (binomial with logit link):\n                 Estimate Std. Error z value Pr(>|z|)   \n(Intercept)        -0.894      0.280   -3.19   0.0014 **\nconditionimpasse    1.209      0.377    3.20   0.0014 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n\nNumber of iterations in BFGS optimization: 10 \nLog-likelihood: -213 on 4 Df\n```\n:::\n\n```{.r .cell-code}\nsummary(h.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\npscl::hurdle(formula = test_score ~ condition | condition, data = df, \n    dist = \"negbin\", zero.dist = \"binomial\", size = 8)\n\nPearson residuals:\n   Min     1Q Median     3Q    Max \n-0.970 -0.568 -0.568  1.070  2.091 \n\nCount model coefficients (truncated negbin with log link):\n                 Estimate Std. Error z value Pr(>|z|)    \n(Intercept)        1.7689     0.1048   16.88   <2e-16 ***\nconditionimpasse  -0.0232     0.1282   -0.18    0.856    \nLog(theta)         3.7506     2.1492    1.75    0.081 .  \nZero hurdle model coefficients (binomial with logit link):\n                 Estimate Std. Error z value Pr(>|z|)   \n(Intercept)        -0.894      0.280   -3.19   0.0014 **\nconditionimpasse    1.209      0.377    3.20   0.0014 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n\nTheta: count = 42.546\nNumber of iterations in BFGS optimization: 19 \nLog-likelihood: -213 on 5 Df\n```\n:::\n\n```{.r .cell-code}\nrootogram(h.1)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n\n```{.r .cell-code}\nrootogram(h.2)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-26-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(compare_performance(h.1,h.2))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSome of the nested models seem to be identical\n```\n:::\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-26-3.png){width=672}\n:::\n\n```{.r .cell-code}\ntest_lrt(h.1, h.2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSome of the nested models seem to be identical\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# Likelihood-Ratio-Test (LRT) for Model Comparison (ML-estimator)\n\nName |  Model | df | df_diff | Chi2 |     p\n-------------------------------------------\nh.1  | hurdle |  4 |         |      |      \nh.2  | hurdle |  5 |       1 | 0.25 | 0.615\n```\n:::\n:::\n\n## BETA REGRESSION\n\n### BETA Regression\n\nBeta regression on % correct (with standard transformation for including \\[0,1\\])\n\n<https://stats.stackexchange.com/questions/63350/how-to-interpret-the-coefficients-from-a-beta-regression>\n\n::: {.cell}\n\n```{.r .cell-code}\n# \nlibrary(betareg)\n\n#RESCLAE VARIABLE\n#beta reg can't handle 0s and 1s \nsub <- df_subjects %>% dplyr::select(condition, DV_percent_NABS)\nn = nrow(sub) %>% unlist()\nsub$dv_transformed = (sub$DV_percent_NABS * (n-1) + 0.5)/n\n \n#VISUALIZE VARIABLES\nhistogram(sub$dv_transformed)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngf_histogram(~dv_transformed, fill = ~condition, data = sub) %>% gf_facet_wrap(~condition)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-27-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#FIT MODEL\nmb <- betareg(dv_transformed ~ condition, data = sub)\nsummary(mb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nbetareg(formula = dv_transformed ~ condition, data = sub)\n\nStandardized weighted residuals 2:\n   Min     1Q Median     3Q    Max \n-1.057 -0.453 -0.216  0.541  1.690 \n\nCoefficients (mean model with logit link):\n                 Estimate Std. Error z value Pr(>|z|)    \n(Intercept)        -0.969      0.108   -8.97   <2e-16 ***\nconditionimpasse    0.556      0.143    3.89   0.0001 ***\n\nPhi coefficients (precision model with identity link):\n      Estimate Std. Error z value Pr(>|z|)    \n(phi)   0.6604     0.0425    15.5   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n\nType of estimator: ML (maximum likelihood)\nLog-likelihood:  506 on 3 Df\nPseudo R-squared: 0.0725\nNumber of iterations: 12 (BFGS) + 1 (Fisher scoring) \n```\n:::\n\n```{.r .cell-code}\nplot(mb)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-27-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-27-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-27-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-27-6.png){width=672}\n:::\n:::\n\n### BETA HURDLE Regression\n\n<https://github.com/markhwhiteii/beta_hurdle/blob/master/manuscript/beta_hurdle.pdf>\n\n-   MU tells if mean is different by condition\n-   SIGMA tells if variance is different by condition\n-   NU coefficient tells if condition yields different probability at floor\n-   TAU coefficient tells if condition yields different probability at ceiling\n\n::: {.cell}\n\n```{.r .cell-code}\n#BETA HURDLE REGRESSION EXAMPLE\nlibrary(gamlss)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: gamlss.data\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'gamlss.data'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:datasets':\n\n    sleep\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: gamlss.dist\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: nlme\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'nlme'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    collapse\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:ordinal':\n\n    ranef, VarCorr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:lme4':\n\n    lmList\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: parallel\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n **********   GAMLSS Version 5.4-3  ********** \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nFor more on GAMLSS look at https://www.gamlss.com/\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nType gamlssNews() to see new features/changes/bug fixes.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'gamlss'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:lme4':\n\n    refit\n```\n:::\n\n```{.r .cell-code}\n#CREATE SAMPLE DATA \nn <- 5000 \nmu <- 0.40 \nsigma <- 0.60 \np0 <- 0.13 \np1 <- 0.17 \np2 <- 1- p0- p1\na <- mu * (1- sigma ^ 2) / (sigma ^ 2) \nb <- a * (1- mu) / mu\n\n#CREATE DIST\nset.seed(1839) \ny <- rbeta(n, a, b) \ncat <- sample(1:3, n, prob = c(p0, p2, p1), replace = TRUE) \ny[cat == 1] <- 0 \ny[cat == 3] <- 1\n\n#VISUALIZE DISTRIBUTION\nx <- as.data.frame(y)\ngf_histogram(~x$y)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#this looks not unlike my distribution! \n\n#CREATE AN EMPTY MODEL\nfit <- gamlss( formula = y ~ 1, # formula for mu \n               formula.sigma = ~ 1, # formula for sigma \n               formula.nu = ~ 1, # formula for nu \n               formula.tau = ~ 1, # formula for tau \n               family = BEINF() )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGAMLSS-RS iteration 1: Global Deviance = 7799 \nGAMLSS-RS iteration 2: Global Deviance = 7778 \nGAMLSS-RS iteration 3: Global Deviance = 7778 \nGAMLSS-RS iteration 4: Global Deviance = 7778 \n```\n:::\n\n```{.r .cell-code}\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n******************************************************************\nFamily:  c(\"BEINF\", \"Beta Inflated\") \n\nCall:  gamlss(formula = y ~ 1, family = BEINF(), formula.sigma = ~1,  \n    formula.nu = ~1, formula.tau = ~1) \n\nFitting method: RS() \n\n------------------------------------------------------------------\nMu link function:  logit\nMu Coefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  -0.3796     0.0196   -19.4   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nSigma link function:  logit\nSigma Coefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   0.3951     0.0162    24.5   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nNu link function:  log \nNu Coefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   -1.632      0.042   -38.9   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nTau link function:  log \nTau Coefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  -1.4014     0.0382   -36.7   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nNo. of observations in the fit:  5000 \nDegrees of Freedom for the fit:  4\n      Residual Deg. of Freedom:  4996 \n                      at cycle:  4 \n \nGlobal Deviance:     7778 \n            AIC:     7786 \n            SBC:     7812 \n******************************************************************\n```\n:::\n\n```{.r .cell-code}\nplot(fit)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-28-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n******************************************************************\n\t Summary of the Randomised Quantile Residuals\n                           mean   =  0.000571 \n                       variance   =  1 \n               coef. of skewness  =  0.0294 \n               coef. of kurtosis  =  2.95 \nFilliben correlation coefficient  =  1 \n******************************************************************\n```\n:::\n\n```{.r .cell-code}\n#TRANSFORM PARAMETRS BACK \ninv_logit <- function(x) exp(x) / (1 + exp(x)) # inverse of link function\nfit_mu <- inv_logit(fit$mu.coefficients) \npaste(\"MU: \",fit_mu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MU:  0.406229902102452\"\n```\n:::\n\n```{.r .cell-code}\nfit_sigma <- inv_logit(fit$sigma.coefficients) \npaste(\"SIGMA: \",fit_sigma)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"SIGMA:  0.597499259410111\"\n```\n:::\n\n```{.r .cell-code}\nfit_nu <- exp(fit$nu.coefficients) \nfit_tau <- exp(fit$tau.coefficients) \nfit_p0 <- fit_nu / (1 + fit_nu + fit_tau) \npaste(\"P0: \",fit_p0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"P0:  0.135600165493784\"\n```\n:::\n\n```{.r .cell-code}\nfit_p1 <- fit_tau / (1 + fit_nu + fit_tau)\npaste(\"P1: \",fit_p1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"P1:  0.170800000002391\"\n```\n:::\n:::\n\n**BETA HURDLE INTERPRETATION** - beta component\\\n- MU \"location\" (mean)\\\n- SIGMA \"scale\" (positively related to variance; variance = sigma.squared *mean* (1-mean)\\\n- Rigby, Stasinopoulos, Heller, and De Bastiani (2017) \"reparameterized\" the beta distribution so that the two parameters determining the shape of the distribution would be more useful in a regression framework (see Ferrari & Cribari-Neto, 2004 for a different parameterization)\n\n**ZERO-ONE HURDLE COMPONENT**\\\n- The two additional parameters, ν NU and τTAU , are related to p0 and p1, respectively.\\\n- p0 is the probability that a case equals 0,\\\n- p1 is the probability that a case equals 1,\\\n- p2 (i.e., 1 −p0 −p1) is the probability that the case comes from the beta distribution\n\n::: {.cell}\n\n```{.r .cell-code}\n#MY DATA\n#SETUP DATA \n\nmin = 0 #min possible value of scale\nmax = 13 #max possible value of scale\n\nlibrary(mosaic) #for shuffling\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'mosaic'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    cross\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:VGAM':\n\n    chisq, logit\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:lmerTest':\n\n    rand\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:lme4':\n\n    factorize\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:Matrix':\n\n    mean\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:modelr':\n\n    resample\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:vcd':\n\n    mplot\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:scales':\n\n    rescale\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:cowplot':\n\n    theme_map\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:ggplot2':\n\n    stat\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n```\n:::\n\n```{.r .cell-code}\n#1. Rescale accuracy using \n# recommended adjustment \n#rescaled = value-min/(max-min)\ndf <- df_subjects %>% mutate(\n  accuracy = s_NABS,\n  R_acc = (accuracy-min)/(max-min), #as %\n  T_acc = (accuracy * (nrow(df)-1) + 0.5)/nrow(df)/max, #transform for no 0 and 1\n  perm = shuffle(condition),\n  scaffold_rt = item_scaffold_rt\n) %>% dplyr::select(accuracy,R_acc, T_acc, condition, perm,scaffold_rt)\n\n#VISUALIZE DISTRIBUTION\ngf_histogram(~R_acc, fill = ~condition, data = df) %>% gf_facet_wrap(~condition) + labs(title = \"Histogram of accuracy\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#VISUALIZE DISTRIBUTION\ngf_histogram(~T_acc, fill = ~condition, data = df) %>% gf_facet_wrap(~condition) + labs(title = \"Histogram of [rescaled] accuracy\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-29-2.png){width=672}\n:::\n\n```{.r .cell-code}\ngf_histogram(~R_acc, fill = ~perm, data = df) %>% gf_facet_wrap(~perm) + labs(title = \"Histogram of shuffled accuracy\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-29-3.png){width=672}\n:::\n\n```{.r .cell-code}\n#SUMMARIZE SAMPLE\npaste(\"Grand mean\", mean(df$R_acc))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grand mean 0.288344988344988\"\n```\n:::\n\n```{.r .cell-code}\nlibrary(mosaic)\nstats = favstats(df$R_acc ~ df$condition)\nstats$mean <- mean(df$R_acc ~ df$condition)\nstats$var <- var(df$R_acc ~ df$condition)\nprint(\"Grand stats\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grand stats\"\n```\n:::\n\n```{.r .cell-code}\nstats \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  df$condition min Q1 median    Q3 max  mean    sd   n missing   var\n1      control   0  0  0.000 0.154   1 0.190 0.343 158       0 0.118\n2      impasse   0  0  0.154 0.788   1 0.379 0.395 172       0 0.156\n```\n:::\n\n```{.r .cell-code}\nprint(\"P0\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"P0\"\n```\n:::\n\n```{.r .cell-code}\nnrow(df %>% filter(R_acc ==0))/nrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.458\n```\n:::\n\n```{.r .cell-code}\nprint(\"P1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"P1\"\n```\n:::\n\n```{.r .cell-code}\nnrow(df %>% filter(R_acc ==1))/nrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.0939\n```\n:::\n\n```{.r .cell-code}\n#CREATE MODEL\n\n#CREATE AN EMPTY MODEL\nm0 <- gamlss( formula = R_acc ~ 1, # formula for mu \n              formula.sigma =  ~ 1, # formula for sigma \n              formula.nu =  ~ 1, # formula for nu \n              formula.tau =  ~ 1, # formula for tau \n              family = BEINF(), data = df )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGAMLSS-RS iteration 1: Global Deviance = 611 \nGAMLSS-RS iteration 2: Global Deviance = 610 \nGAMLSS-RS iteration 3: Global Deviance = 610 \nGAMLSS-RS iteration 4: Global Deviance = 610 \n```\n:::\n\n```{.r .cell-code}\nm0 <- gamlss(R_acc ~ 1, ~ 1, ~ 1, ~ 1, \n            data = df, family = BEINF())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGAMLSS-RS iteration 1: Global Deviance = 611 \nGAMLSS-RS iteration 2: Global Deviance = 610 \nGAMLSS-RS iteration 3: Global Deviance = 610 \nGAMLSS-RS iteration 4: Global Deviance = 610 \n```\n:::\n\n```{.r .cell-code}\npaste(\"THE EMPTY MODEL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"THE EMPTY MODEL\"\n```\n:::\n\n```{.r .cell-code}\nsummary(m0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n******************************************************************\nFamily:  c(\"BEINF\", \"Beta Inflated\") \n\nCall:  gamlss(formula = R_acc ~ 1, sigma.formula = ~1, nu.formula = ~1,  \n    tau.formula = ~1, family = BEINF(), data = df) \n\nFitting method: RS() \n\n------------------------------------------------------------------\nMu link function:  logit\nMu Coefficients:\n            Estimate Std. Error t value Pr(>|t|)  \n(Intercept)  -0.2304     0.0947   -2.43    0.015 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nSigma link function:  logit\nSigma Coefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   0.4262     0.0775     5.5  7.7e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nNu link function:  log \nNu Coefficients:\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)   0.0201     0.1157    0.17     0.86\n\n------------------------------------------------------------------\nTau link function:  log \nTau Coefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   -1.563      0.198   -7.91  3.9e-14 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nNo. of observations in the fit:  330 \nDegrees of Freedom for the fit:  4\n      Residual Deg. of Freedom:  326 \n                      at cycle:  4 \n \nGlobal Deviance:     610 \n            AIC:     618 \n            SBC:     634 \n******************************************************************\n```\n:::\n\n```{.r .cell-code}\nplot(m0)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-29-4.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n******************************************************************\n\t Summary of the Randomised Quantile Residuals\n                           mean   =  0.0111 \n                       variance   =  0.973 \n               coef. of skewness  =  0.0732 \n               coef. of kurtosis  =  2.69 \nFilliben correlation coefficient  =  0.996 \n******************************************************************\n```\n:::\n\n```{.r .cell-code}\n#TRANSFORM PARAMETRS BACK \ninv_logit <- function(x) exp(x) / (1 + exp(x)) # inverse of link function\nm0_mu <- inv_logit(m0$mu.coefficients) \npaste(\"MU: \",m0_mu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MU:  0.442655135079248\"\n```\n:::\n\n```{.r .cell-code}\nm0_sigma <- inv_logit(m0$sigma.coefficients) \npaste(\"SIGMA: \",m0_sigma)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"SIGMA:  0.604970105601303\"\n```\n:::\n\n```{.r .cell-code}\nm0_nu <- exp(m0$nu.coefficients) \npaste(\"NU: \",m0_nu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"NU:  1.02032203257766\"\n```\n:::\n\n```{.r .cell-code}\nm0_tau <- exp(m0$tau.coefficients) \npaste(\"TAU: \",m0_tau)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"TAU:  0.209464832192797\"\n```\n:::\n\n```{.r .cell-code}\nm0_p0 <- fit_nu / (1 + fit_nu + fit_tau) \npaste(\"P0: \",m0_p0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"P0:  0.135600165493784\"\n```\n:::\n\n```{.r .cell-code}\nm0_p1 <- fit_tau / (1 + fit_nu + fit_tau)\npaste(\"P1: \",m0_p1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"P1:  0.170800000002391\"\n```\n:::\n\n```{.r .cell-code}\n#CREATE PREDICTOR MODEL\nm1 <- gamlss(R_acc ~ condition, ~ condition, ~ condition, ~ condition, \n            data = df, family = BEINF())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGAMLSS-RS iteration 1: Global Deviance = 573 \nGAMLSS-RS iteration 2: Global Deviance = 572 \nGAMLSS-RS iteration 3: Global Deviance = 572 \nGAMLSS-RS iteration 4: Global Deviance = 572 \n```\n:::\n\n```{.r .cell-code}\npaste(\"THE PREDICTOR MODEL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"THE PREDICTOR MODEL\"\n```\n:::\n\n```{.r .cell-code}\nsummary(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n******************************************************************\nFamily:  c(\"BEINF\", \"Beta Inflated\") \n\nCall:  gamlss(formula = R_acc ~ condition, sigma.formula = ~condition,  \n    nu.formula = ~condition, tau.formula = ~condition,  \n    family = BEINF(), data = df) \n\nFitting method: RS() \n\n------------------------------------------------------------------\nMu link function:  logit\nMu Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)  \n(Intercept)        -0.421      0.171   -2.46    0.014 *\nconditionimpasse    0.274      0.205    1.33    0.183  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nSigma link function:  logit\nSigma Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)   \n(Intercept)        0.3949     0.1407    2.81   0.0053 **\nconditionimpasse   0.0309     0.1687    0.18   0.8549   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nNu link function:  log \nNu Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)         0.767      0.178    4.30  2.3e-05 ***\nconditionimpasse   -1.440      0.247   -5.84  1.3e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nTau link function:  log \nTau Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)        -1.264      0.314   -4.02 0.000072 ***\nconditionimpasse   -0.471      0.405   -1.16     0.25    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nNo. of observations in the fit:  330 \nDegrees of Freedom for the fit:  8\n      Residual Deg. of Freedom:  322 \n                      at cycle:  4 \n \nGlobal Deviance:     572 \n            AIC:     588 \n            SBC:     618 \n******************************************************************\n```\n:::\n\n```{.r .cell-code}\n#LOOKING PREDICTOR MODEL\nm <- gamlss(R_acc ~ condition , \n            ~ condition , \n            ~ condition , \n            ~ condition , \n            data = df, family = BEINF())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGAMLSS-RS iteration 1: Global Deviance = 573 \nGAMLSS-RS iteration 2: Global Deviance = 572 \nGAMLSS-RS iteration 3: Global Deviance = 572 \nGAMLSS-RS iteration 4: Global Deviance = 572 \n```\n:::\n\n```{.r .cell-code}\npaste(\"THE PREDICTOR MODEL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"THE PREDICTOR MODEL\"\n```\n:::\n\n```{.r .cell-code}\nsummary(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n******************************************************************\nFamily:  c(\"BEINF\", \"Beta Inflated\") \n\nCall:  gamlss(formula = R_acc ~ condition, sigma.formula = ~condition,  \n    nu.formula = ~condition, tau.formula = ~condition,  \n    family = BEINF(), data = df) \n\nFitting method: RS() \n\n------------------------------------------------------------------\nMu link function:  logit\nMu Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)  \n(Intercept)        -0.421      0.171   -2.46    0.014 *\nconditionimpasse    0.274      0.205    1.33    0.183  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nSigma link function:  logit\nSigma Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)   \n(Intercept)        0.3949     0.1407    2.81   0.0053 **\nconditionimpasse   0.0309     0.1687    0.18   0.8549   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nNu link function:  log \nNu Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)         0.767      0.178    4.30  2.3e-05 ***\nconditionimpasse   -1.440      0.247   -5.84  1.3e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nTau link function:  log \nTau Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)        -1.264      0.314   -4.02 0.000072 ***\nconditionimpasse   -0.471      0.405   -1.16     0.25    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nNo. of observations in the fit:  330 \nDegrees of Freedom for the fit:  8\n      Residual Deg. of Freedom:  322 \n                      at cycle:  4 \n \nGlobal Deviance:     572 \n            AIC:     588 \n            SBC:     618 \n******************************************************************\n```\n:::\n\n```{.r .cell-code}\n#CREATE PREDICTOR MODEL ON SHUFFLED [PERMUTATION TEST]\nmperm <- gamlss(R_acc ~ perm, ~ perm, ~ perm, ~ perm, \n            data = df, family = BEINF())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGAMLSS-RS iteration 1: Global Deviance = 611 \nGAMLSS-RS iteration 2: Global Deviance = 610 \nGAMLSS-RS iteration 3: Global Deviance = 610 \nGAMLSS-RS iteration 4: Global Deviance = 610 \n```\n:::\n\n```{.r .cell-code}\nsummary(mperm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n******************************************************************\nFamily:  c(\"BEINF\", \"Beta Inflated\") \n\nCall:  gamlss(formula = R_acc ~ perm, sigma.formula = ~perm,  \n    nu.formula = ~perm, tau.formula = ~perm, family = BEINF(),      data = df) \n\n\nFitting method: RS() \n\n------------------------------------------------------------------\nMu link function:  logit\nMu Coefficients:\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)  -0.2029     0.1397   -1.45     0.15\npermimpasse  -0.0524     0.1899   -0.28     0.78\n\n------------------------------------------------------------------\nSigma link function:  logit\nSigma Coefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   0.4570     0.1134    4.03    7e-05 ***\npermimpasse  -0.0594     0.1553   -0.38      0.7    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nNu link function:  log \nNu Coefficients:\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)   0.0564     0.1679    0.34     0.74\npermimpasse  -0.0691     0.2317   -0.30     0.77\n\n------------------------------------------------------------------\nTau link function:  log \nTau Coefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   -1.461      0.277   -5.27  2.5e-07 ***\npermimpasse   -0.200      0.395   -0.51     0.61    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nNo. of observations in the fit:  330 \nDegrees of Freedom for the fit:  8\n      Residual Deg. of Freedom:  322 \n                      at cycle:  4 \n \nGlobal Deviance:     610 \n            AIC:     626 \n            SBC:     656 \n******************************************************************\n```\n:::\n\n```{.r .cell-code}\n#sanity check with scaled outcome, no zeros ones\nm3 <- gamlss(T_acc ~ condition, ~ condition, ~ condition, ~ condition, \n            data = df, family = BEINF())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGAMLSS-RS iteration 1: Global Deviance = -1207 \nGAMLSS-RS iteration 2: Global Deviance = -1335 \nGAMLSS-RS iteration 3: Global Deviance = -1345 \nGAMLSS-RS iteration 4: Global Deviance = -1346 \nGAMLSS-RS iteration 5: Global Deviance = -1346 \nGAMLSS-RS iteration 6: Global Deviance = -1346 \nGAMLSS-RS iteration 7: Global Deviance = -1346 \nGAMLSS-RS iteration 8: Global Deviance = -1346 \nGAMLSS-RS iteration 9: Global Deviance = -1346 \n```\n:::\n\n```{.r .cell-code}\nsummary(m3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in summary.gamlss(m3): summary: vcov has failed, option qr is used instead\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n******************************************************************\nFamily:  c(\"BEINF\", \"Beta Inflated\") \n\nCall:  gamlss(formula = T_acc ~ condition, sigma.formula = ~condition,  \n    nu.formula = ~condition, tau.formula = ~condition, family = BEINF(),  \n    data = df) \n\nFitting method: RS() \n\n------------------------------------------------------------------\nMu link function:  logit\nMu Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)       -1.1773     0.0971  -12.13  < 2e-16 ***\nconditionimpasse   0.5857     0.1387    4.22 0.000031 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nSigma link function:  logit\nSigma Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)        1.2553     0.0740   16.97   <2e-16 ***\nconditionimpasse  -0.0122     0.1030   -0.12     0.91    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nNu link function:  log \nNu Coefficients:\n                  Estimate Std. Error t value Pr(>|t|)\n(Intercept)      -2.25e+01   3.78e+03   -0.01        1\nconditionimpasse -6.72e-15   5.24e+03    0.00        1\n\n------------------------------------------------------------------\nTau link function:  log \nTau Coefficients:\n                  Estimate Std. Error t value Pr(>|t|)\n(Intercept)      -2.26e+01   3.96e+03   -0.01        1\nconditionimpasse  9.20e-15   5.48e+03    0.00        1\n\n------------------------------------------------------------------\nNo. of observations in the fit:  330 \nDegrees of Freedom for the fit:  8\n      Residual Deg. of Freedom:  322 \n                      at cycle:  9 \n \nGlobal Deviance:     -1346 \n            AIC:     -1330 \n            SBC:     -1300 \n******************************************************************\n```\n:::\n\n```{.r .cell-code}\n#m3 shouldn't show condition as significant for nu and tau, because T_acc was scaled to not include any 0s and 1s\n\n#investigate beta negative binomial distribution\n#https://en.wikipedia.org/wiki/Beta_negative_binomial_distribution\n\n#TRANSFORM PARAMETRS BACK \ninv_logit <- function(x) exp(x) / (1 + exp(x)) # inverse of link function\nm1_mu <- inv_logit(m1$mu.coefficients) \npaste(\"MU: \",m1_mu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MU:  0.396369901111619\" \"MU:  0.568036956954873\"\n```\n:::\n\n```{.r .cell-code}\nm1_sigma <- inv_logit(m0$sigma.coefficients) \npaste(\"SIGMA: \",m1_sigma)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"SIGMA:  0.604970105601303\"\n```\n:::\n\n```{.r .cell-code}\nm1_nu <- exp(m1$nu.coefficients) \npaste(\"NU: \",m1_nu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"NU:  2.15227350452983\"  \"NU:  0.236870904856183\"\n```\n:::\n\n```{.r .cell-code}\nm1_tau <- exp(m1$tau.coefficients) \npaste(\"TAU: \",m1_tau)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"TAU:  0.282617628302748\" \"TAU:  0.624417570712948\"\n```\n:::\n\n```{.r .cell-code}\nsummary(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n******************************************************************\nFamily:  c(\"BEINF\", \"Beta Inflated\") \n\nCall:  gamlss(formula = R_acc ~ condition, sigma.formula = ~condition,  \n    nu.formula = ~condition, tau.formula = ~condition,  \n    family = BEINF(), data = df) \n\nFitting method: RS() \n\n------------------------------------------------------------------\nMu link function:  logit\nMu Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)  \n(Intercept)        -0.421      0.171   -2.46    0.014 *\nconditionimpasse    0.274      0.205    1.33    0.183  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nSigma link function:  logit\nSigma Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)   \n(Intercept)        0.3949     0.1407    2.81   0.0053 **\nconditionimpasse   0.0309     0.1687    0.18   0.8549   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nNu link function:  log \nNu Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)         0.767      0.178    4.30  2.3e-05 ***\nconditionimpasse   -1.440      0.247   -5.84  1.3e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nTau link function:  log \nTau Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)        -1.264      0.314   -4.02 0.000072 ***\nconditionimpasse   -0.471      0.405   -1.16     0.25    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n------------------------------------------------------------------\nNo. of observations in the fit:  330 \nDegrees of Freedom for the fit:  8\n      Residual Deg. of Freedom:  322 \n                      at cycle:  4 \n \nGlobal Deviance:     572 \n            AIC:     588 \n            SBC:     618 \n******************************************************************\n```\n:::\n\n```{.r .cell-code}\nplot(m)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-29-5.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n******************************************************************\n\t Summary of the Randomised Quantile Residuals\n                           mean   =  -0.0141 \n                       variance   =  1.03 \n               coef. of skewness  =  0.0142 \n               coef. of kurtosis  =  3.05 \nFilliben correlation coefficient  =  0.998 \n******************************************************************\n```\n:::\n:::\n\n-   MU tells if mean is different by condition\n-   SIGMA tells if variance is different by condition\n-   NU coefficient tells if condition yields different probability at floor\n-   TAU coefficient tells if condition yields different probability at ceiling\n\n## BINOMIAL OUTCOME\n\n::: {.cell}\n\n```{.r .cell-code}\n#PREPARE DATA \ndf <- df_items %>% filter(q ==1) %>% filter(mode == \"lab-synch\")\n# %>% mutate(\n#   accuracy = recode_factor(score_niceABS, \"0\" =\"incorrect\",\"1\"=\"correct\"),\n#   scaled = as.ordered(score_SCALED),\n#   q = as.factor(q),\n#   high_interpretation = as.factor(high_interpretation)\n# )\n\n#GROUPED PROPORTIONAL BAR CHART\ngf_props(~accuracy, fill = ~pretty_condition, x =~pretty_condition,\n       position = position_dodge(), data = df) %>%\n  gf_facet_grid(~pretty_mode) +\n   labs(x = \"Question 1 Accuracy\",\n       title = \"Accuracy on Q1\",\n       subtitle=\"\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/SETUP-Q1-ACCURACY-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#STACKED PROPORTIONAL BAR CHART\ndf %>% \n  ggplot(data = .,\n         mapping = aes(x = pretty_condition,\n                       fill = accuracy)) +\n  geom_bar(position = \"fill\" ) + #,color = \"black\") +\n  scale_fill_brewer(palette = \"Set1\")  +\n   labs(#y = \"\",\n       title = \"Accuracy on Test Phase\",\n       x = \"Condition\",\n       fill = \"\",\n       subtitle=\"Impasse Condition yields a greater proportion of correct responses\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/SETUP-Q1-ACCURACY-2.png){width=672}\n:::\n:::\n\n#### CHI SQUARE\n\n::: {.cell}\n\n```{.r .cell-code}\n#::::::::::::CROSSTABLE\n# CrossTable( x = df$condition, y = df$accuracy, \n#              fisher = TRUE, chisq=TRUE, expected = TRUE, sresid = TRUE)\n\n#::::::::::::MOSAIC PLOT\n# note: blue indicates cell count higher than expected, \n# red indicates cell count less than expected; under null hypothesis\n# mosaicplot(main=\"Accuracy on First Question by Condition\",\n#             data = df, pretty_condition ~ accuracy, \n#             shade = T)\n\n#::::::::::::TABLE\ndf %>% sjtab( fun = \"xtab\", var.labels=c(\"accuracy\", \"pretty_condition\"),\n        show.row.prc=F, show.col.prc=T, show.summary=T, show.exp=T, show.legend=T,\n        statistics = c(\"auto\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table style=\"border-collapse:collapse; border:none;\">\n <tr>\n <th style=\"border-top:double; text-align:center; font-style:italic; font-weight:normal; border-bottom:1px solid;\" rowspan=\"2\">accuracy</th>\n <th style=\"border-top:double; text-align:center; font-style:italic; font-weight:normal;\" colspan=\"2\">pretty_condition</th>\n <th style=\"border-top:double; text-align:center; font-style:italic; font-weight:normal; font-weight:bolder; font-style:italic; border-bottom:1px solid; \" rowspan=\"2\">Total</th>\n </tr>\n \n<tr>\n <td style=\"border-bottom:1px solid; text-align:center; padding:0.2cm;\">control</td>\n <td style=\"border-bottom:1px solid; text-align:center; padding:0.2cm;\">impasse</td>\n </tr>\n \n<tr> \n<td style=\"padding:0.2cm;  text-align:left; vertical-align:middle;\">0</td>\n<td style=\"padding:0.2cm; text-align:center; \"><span style=\"color:black;\">52</span><br><span style=\"color:#339999;\">48</span><br><span style=\"color:#339933;\">83.9&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center; \"><span style=\"color:black;\">45</span><br><span style=\"color:#339999;\">49</span><br><span style=\"color:#339933;\">70.3&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center;  \"><span style=\"color:black;\">97</span><br><span style=\"color:#339999;\">97</span><br><span style=\"color:#339933;\">77&nbsp;&#37;</span></td> \n</tr>\n \n<tr> \n<td style=\"padding:0.2cm;  text-align:left; vertical-align:middle;\">1</td>\n<td style=\"padding:0.2cm; text-align:center; \"><span style=\"color:black;\">10</span><br><span style=\"color:#339999;\">14</span><br><span style=\"color:#339933;\">16.1&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center; \"><span style=\"color:black;\">19</span><br><span style=\"color:#339999;\">15</span><br><span style=\"color:#339933;\">29.7&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center;  \"><span style=\"color:black;\">29</span><br><span style=\"color:#339999;\">29</span><br><span style=\"color:#339933;\">23&nbsp;&#37;</span></td> \n</tr>\n \n<tr> \n<td style=\"padding:0.2cm;  border-bottom:double; font-weight:bolder; font-style:italic; text-align:left; vertical-align:middle;\">Total</td>\n<td style=\"padding:0.2cm; text-align:center;   border-bottom:double;\"><span style=\"color:black;\">62</span><br><span style=\"color:#339999;\">62</span><br><span style=\"color:#339933;\">100&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center;   border-bottom:double;\"><span style=\"color:black;\">64</span><br><span style=\"color:#339999;\">64</span><br><span style=\"color:#339933;\">100&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center;   border-bottom:double;\"><span style=\"color:black;\">126</span><br><span style=\"color:#339999;\">126</span><br><span style=\"color:#339933;\">100&nbsp;&#37;</span></td> \n</tr>\n<td style=\"text-align:right; font-size:0.9em; font-style:italic; padding:0.2cm;\" colspan=\"4\">&chi;<sup>2</sup>=2.547 &middot; df=1 &middot; &phi;=0.161 &middot; p=0.111</td> \n</tr>\n \n</table> <p>\n <span style=\"color:black;\">observed values</span><br>\n <span style=\"color:#339999;\">expected values</span><br>\n <span style=\"color:#339933;\">&#37; within pretty_condition</span><br>\n </p>\n\n`````\n:::\n\n```{.r .cell-code}\n#::::::::::::BAR PLOT\nggbarstats(data = df, x = accuracy, y = condition,\n           type = \"nonparametric\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/label - CHISQR-Q1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#::::::::::::CHISQR TEST\n(x <- stats::chisq.test(x = df$accuracy, y = df$condition, simulate.p.value = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPearson's Chi-squared test with simulated p-value (based on 2000\n\treplicates)\n\ndata:  df$accuracy and df$condition\nX-squared = 3, df = NA, p-value = 0.09\n```\n:::\n\n```{.r .cell-code}\n#::::::::::::POWER ANALYSIS\n(po <- pwr.chisq.test( w = 0.1, df=(2-1), N = nrow(df), sig.level = 0.05))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n     Chi squared power calculation \n\n              w = 0.1\n              N = 126\n             df = 1\n      sig.level = 0.05\n          power = 0.202\n\nNOTE: N is the number of observations\n```\n:::\n:::\n\n**A Chi-Square test of independence of Q1 accuracy \\[correct,incorrect\\] by condition indicates the question accuracy is not dependent on condition. *However, this test may be underpowered, as with the given sample size it has only 20% power to detect a small effect (w = 0.1)***\n\n### LOGISTIC REGRESSION\n\n*Fit a logistic regression (at the subject-item level), predicting Q1 accuracy (absolute score) by condition.*\\\n*note: this example uses the combined dataset rather than lab-only, as learning notes were done with the combined and I don't want to recalcualte all the marginal probabilities by hand for learning purposes.*\n\n-   Fit a logistic regression predicting accuracy (absolute score) (n = r nrow(df)) by condition. (k = 2).\n-   Parameter estimate: $\\beta_{0}$ = Log Odds of (correct) responses in CONTROL condition\n    -   $e^{\\beta_{0}}$ = ODDS of correct response in CONTROL condition\n-   Parameter estimate: $\\beta_{1}$ = $\\beta_{1impasse}$ Log Odds (Log OR; change in odds for correct response in impasse (vs) control \\[log scale\\])\n    -   $e^{\\beta_{1}}$ = ODDS RATIO of correct response in IMPASSE (vs) CONTROL\n-   Null hypothesis:$\\beta_{impasse} \\le 0$ the odds for a correct response does not change, or decreases\n-   Alternative hypothesis: $\\beta_{impasse} \\gt 0$ the odds of a correct response increases\n\n#### Fit Model\n\n*First, we fit a logistic regression with condition as predictor, and compare its fit to an empty (intercept-only) model.*\n\n::: {.cell}\n\n```{.r .cell-code}\n#combined dataset, not lab only\ndf <- df_items %>% filter(q==1) %>% mutate(\n  accuracy = as.factor(score_niceABS)\n)\n\n# FREQUENCY TABLE\n# my.table <- table(df$accuracy, df$pretty_condition)\n# addmargins(my.table) #counts\n# addmargins(prop.table(my.table)) #props\n\n# MODEL FITTING:::::::::::::::::::::::::::::::::::::\n\n#: 1 EMPTY MODEL baseline glm model intercept only\nm0 = glm(accuracy ~ 1, data = df, family = \"binomial\")\nprint(\"EMPTY MODEL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"EMPTY MODEL\"\n```\n:::\n\n```{.r .cell-code}\nsummary(m0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nglm(formula = accuracy ~ 1, family = \"binomial\", data = df)\n\nDeviance Residuals: \n   Min      1Q  Median      3Q     Max  \n-0.696  -0.696  -0.696  -0.696   1.753  \n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)   -1.294      0.134   -9.66   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 343.66  on 329  degrees of freedom\nResidual deviance: 343.66  on 329  degrees of freedom\nAIC: 345.7\n\nNumber of Fisher Scoring iterations: 4\n```\n:::\n\n```{.r .cell-code}\n#: 2 CONDITION model\nm1 <- glm( accuracy ~ pretty_condition, data = df, family = \"binomial\")\nprint(\"PREDICTOR MODEL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PREDICTOR MODEL\"\n```\n:::\n\n```{.r .cell-code}\nsummary(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nglm(formula = accuracy ~ pretty_condition, family = \"binomial\", \n    data = df)\n\nDeviance Residuals: \n   Min      1Q  Median      3Q     Max  \n-0.819  -0.819  -0.548  -0.548   1.986  \n\nCoefficients:\n                        Estimate Std. Error z value Pr(>|z|)    \n(Intercept)               -1.822      0.230   -7.93  2.2e-15 ***\npretty_conditionimpasse    0.901      0.285    3.16   0.0016 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 343.66  on 329  degrees of freedom\nResidual deviance: 333.07  on 328  degrees of freedom\nAIC: 337.1\n\nNumber of Fisher Scoring iterations: 4\n```\n:::\n\n```{.r .cell-code}\n#: 3 TEST SUPERIOR FIT\npaste(\"AIC wth predictor is lower than empty model?\", m0$aic > m1$aic)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"AIC wth predictor is lower than empty model? TRUE\"\n```\n:::\n\n```{.r .cell-code}\ntest_lrt(m0,m1) #same as anova(m0, m1, test = \"Chi\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Likelihood-Ratio-Test (LRT) for Model Comparison (ML-estimator)\n\nName | Model | df | df_diff |  Chi2 |     p\n-------------------------------------------\nm0   |   glm |  1 |         |       |      \nm1   |   glm |  2 |       1 | 10.59 | 0.001\n```\n:::\n\n```{.r .cell-code}\npaste(\"Likelihood Ratio test is significant? p = \",(test_lrt(m0,m1))$p[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Likelihood Ratio test is significant? p =  0.00113745235691825\"\n```\n:::\n:::\n\n*The Condition predictor significantly improves model fit.*\n\n#### Learning Notes\n\n::: {.cell}\n\n```{.r .cell-code}\n# DESCRIBE MODEL ::::::::::::::::::::::::::::::::::::: \n\nprint(\"PREDICTOR MODEL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PREDICTOR MODEL\"\n```\n:::\n\n```{.r .cell-code}\nsummary(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nglm(formula = accuracy ~ pretty_condition, family = \"binomial\", \n    data = df)\n\nDeviance Residuals: \n   Min      1Q  Median      3Q     Max  \n-0.819  -0.819  -0.548  -0.548   1.986  \n\nCoefficients:\n                        Estimate Std. Error z value Pr(>|z|)    \n(Intercept)               -1.822      0.230   -7.93  2.2e-15 ***\npretty_conditionimpasse    0.901      0.285    3.16   0.0016 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 343.66  on 329  degrees of freedom\nResidual deviance: 333.07  on 328  degrees of freedom\nAIC: 337.1\n\nNumber of Fisher Scoring iterations: 4\n```\n:::\n\n```{.r .cell-code}\n#: INTERPRET COEFFICIENTS\n\nprint(\"Coefficients —- LOG ODDS\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Coefficients —- LOG ODDS\"\n```\n:::\n\n```{.r .cell-code}\nconfint(m1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWaiting for profiling to be done...\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                         2.5 % 97.5 %\n(Intercept)             -2.299  -1.39\npretty_conditionimpasse  0.353   1.48\n```\n:::\n\n```{.r .cell-code}\nprint(\"Coefficients —- ODDS RATIOS\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Coefficients —- ODDS RATIOS\"\n```\n:::\n\n```{.r .cell-code}\ne <- cbind( exp(coef(m1)), exp(confint(m1))) #exponentiate\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWaiting for profiling to be done...\n```\n:::\n\n```{.r .cell-code}\ne\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                              2.5 % 97.5 %\n(Intercept)             0.162  0.10  0.248\npretty_conditionimpasse 2.463  1.42  4.374\n```\n:::\n\n```{.r .cell-code}\n# MANUAL ONE-SIDED SIGTEST ::::::::::::::::::::::::::: \n\n# one-sided (right tail) z test for B COEFFICIENT\n#https://stats.stackexchange.com/questions/330655/strategy-for-a-one-sided-test-of-glms-coefficients\n\n#SANITY CHECK 2-tailed test should match the model output\ntt <- 2*pnorm(summary(m1)$coefficients[2,3], lower.tail = F)\npaste(\"p value for two-tailed test, null B = 0 : \",round(tt,3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"p value for two-tailed test, null B = 0 :  0.002\"\n```\n:::\n\n```{.r .cell-code}\not <- pnorm(summary(m1)$coefficients[2,3], lower.tail = F)\npaste(\"BUT we want a one tailed directional, null: B <= 0: \",round(ot,3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"BUT we want a one tailed directional, null: B <= 0:  0.001\"\n```\n:::\n\n```{.r .cell-code}\npaste(\"adjusted confint for directional hypothesis\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"adjusted confint for directional hypothesis\"\n```\n:::\n\n```{.r .cell-code}\n(dcint <- confint(m1, level = 0.90)) # get 90% for right side))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWaiting for profiling to be done...\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                          5 %  95 %\n(Intercept)             -2.22 -1.46\npretty_conditionimpasse  0.44  1.38\n```\n:::\n\n```{.r .cell-code}\n# https://stats.stackexchange.com/questions/20734/is-a-1-sided-90-prediction-interval-equivalent-to-a-2-sided-95-prediction-inte\n\n\n#:::::::: INTERPRET COEFFICIENTS [directional]\n\n# print(\"Confidence Interval —- LOG ODDS\")\n# confint(m1) #not adjusted for 1-tailed\n# print(\"Coefficients —- ODDS RATIOS\")\n# (e <- cbind( exp(coef(m1)), exp(confint(m1)))) #exponentiated, not adjusted\n# (e <- cbind( exp(coef(m1)), exp(dcint))) #exponentiated, adjusted\n```\n:::\n\n**Understanding the logistic regression model**\n\n::: {.cell}\n\n```{.r .cell-code}\n#::::::::::::DESCRIPTIVES\n\ntable(df$accuracy, df$condition) %>% addmargins(2) %>% #display sum for row\n      prop.table(margin=2) %>%  #return proportion (of column)\n      addmargins(1) #sanity check sum of columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     \n      control impasse   Sum\n  0     0.861   0.715 0.785\n  1     0.139   0.285 0.215\n  Sum   1.000   1.000 1.000\n```\n:::\n\n```{.r .cell-code}\ntable(df$accuracy, df$condition) %>% addmargins(2) %>% #display sum for row\n      addmargins(1) #sanity check sum of columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     \n      control impasse Sum\n  0       136     123 259\n  1        22      49  71\n  Sum     158     172 330\n```\n:::\n:::\n\n*The logistic regression intercept gives the log odds of the outcome for the reference level of the predictor variable*\n\n*The logistic regression coefficients give the change in the log odds of the outcome for a one unit increase in the predictor variable.*\n\n**\\[the empty model**\n\n-   The intercept of an empty model (glm(accuracy \\~ 1) is equal to log(p/(1-p)), where p = the overall probability of a correct response (df\\$accuracy ==1 ).\n-   In SGC3A Q1 accuracy this = 71 correct / 330 = 0.215 -\\> log(0.215 / (1-0.215)) = -1.29.\n-   In other words, the intercept from the model with no predictor variables is the estimated log odds of a correct response for the whole sample.\n-   We can also transform the log of the odds back to a probability: p = ODDS/ (1+ODDS) = exp(-1.29)/(1+exp(-1.29)) = 0.215. This should matched the prediction of the empty model\n\n**\\[a dichotomous predictor\\]**\n\nnatural log (odds of +) = -1.822 + 0.901(x1) ; x1 = 0 for control, 1 for impasse - b0 intercept is ODDS OF CORRECT RESPONSE IN REFERENCE (control) - b1 intercept is ODDS RATIO (difference in odds) FOR CORRECT RESPONSE IN IMPASSE\n\n-   INTERCEPT: log odds of (+ response) in control condition\n    -   log odds of (+) in control : -1.822 + 0.9(0) = -1.822\n    -   convert to odds by exponentiating the coefficients\\\n        log odds of (+) in control = exp(-1.822) = 0.162 odds\n    -   convert to probability by formula =\\>\\\n        p(+) = odds / (1+odds) = 0.162 / (1 + 0.162) = 0.139\\\n        probability of (+) in control = \\~14%\n-   B1 COEFFICIENT: DIFFERENCE in log odds of (+) in impasse vs. control\n    -   log odds of (+) in impasse: -1.822 + 0.901 = -0.921\n    -   convert to odds by exponentiating log odds\\\n        log odds (+) in impasse = exp(-0.921) = 0.398\n    -   convert to probability by formula =\\>\\\n        p(+) = odds / (1 + odds) = 0.398 / (1+0.398) = 0.285\\\n        probaility of (+) in impasse = \\~ 29%\n-   ODDS RATIO : exponentiated B1 COEFFICIENT\n    -   B1 = (slope of logit model = difference in log odds = log odds ratio\n    -   B1 = 0.901 is log odds ratio of (+) in impasse vs control\n    -   exp(b1) = exp(0.901) = 2.46\n    -   Ratio of odds in impasse are 2.46 times higher than in control. Bein in the impasse condition yields odds athat are 2.46 X higher than in control.\n\n+:----------------------------------------------------------------------+\n| MARGINAL\\                                                             |\n| total = 330 success : 71, failure : 259\\                              |\n| p(+) = 71 / 330 = 0.215 = 22%\\                                        |\n| odds(+) = 71 / 259 = 0.274                                            |\n+-----------------------------------------------------------------------+\n| CONTROL total = 158 success = 22; failure = 136\\                      |\n| p(+) = 22/158 = 0.139 = 14%\\                                          |\n| odds(+) = 22/136 = 0.162                                              |\n+-----------------------------------------------------------------------+\n| IMPASSE total = 172 success = 49; failure = 123\\                      |\n| p(+) = 49/172 = 0.285 = 29%\\                                          |\n| odds(+) = 49/123 = 0.398                                              |\n+-----------------------------------------------------------------------+\n\n#### Visualize\n\n::: {.cell}\n\n```{.r .cell-code}\n#:::::::: PLOT\n\n#GGSTATS | MODEL | LOG ODDS \nggcoefstats(m1, output = \"plot\", \n              conf.level = 0.90) + \n  labs(x = \"Log Odds Estimate\", \n       subtitle = \"p is for two tailed test\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#SJPLOT | MODEL | ODDS RATIO\n#library(sjPlot)\nplot_model(m1, vline.color = \"red\", \n           show.intercept = TRUE, \n           show.values = TRUE,\n           p.threshold = 0.1, #manually adjust to account for directional test\n           ci.lvl = 0.90 ) + #manually adjusted for directional test   \n  labs(title = \"Model Predicted Odds Ratio\",\n       subtitle = \"\",\n       x = \"Condition\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-35-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#SJPLOT | MODEL | PROBABILITIES\nplot_model(m1, type=\"eff\",\n           show.intercept = TRUE,\n           show.values = TRUE,\n           title = \"Model Predicted Probability of Accuracy\",\n           axis.title = c(\"Condition\",\"Probability of Accurate Response\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$pretty_condition\n```\n:::\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-35-3.png){width=672}\n:::\n\n```{.r .cell-code}\n#SJPLOT | MODEL | TABLE\n# tab_model(m1)\n```\n:::\n\n#### Diagnostics\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"SANITY CHECK REPORTING\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"SANITY CHECK REPORTING\"\n```\n:::\n\n```{.r .cell-code}\nreport(m1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWe fitted a logistic model (estimated using ML) to predict accuracy with pretty_condition (formula: accuracy ~ pretty_condition). The model's explanatory power is weak (Tjur's R2 = 0.03). The model's intercept, corresponding to pretty_condition = control, is at -1.82 (95% CI [-2.30, -1.39], p < .001). Within this model:\n\n  - The effect of pretty condition [impasse] is statistically significant and positive (beta = 0.90, 95% CI [0.35, 1.48], p = 0.002; Std. beta = 0.90, 95% CI [0.35, 1.48])\n\nStandardized parameters were obtained by fitting the model on a standardized version of the dataset. 95% Confidence Intervals (CIs) and p-values were computed using \n```\n:::\n\n```{.r .cell-code}\nprint(\"MODEL PERFORMANCE\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MODEL PERFORMANCE\"\n```\n:::\n\n```{.r .cell-code}\nperformance(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Indices of model performance\n\nAIC     |     BIC | Tjur's R2 |  RMSE | Sigma | Log_loss | Score_log | Score_spherical |   PCP\n----------------------------------------------------------------------------------------------\n337.074 | 344.673 |     0.031 | 0.404 | 1.008 |    0.505 |   -16.847 |           0.021 | 0.673\n```\n:::\n\n```{.r .cell-code}\nprint(\"MODEL DIAGNOSTICS\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MODEL DIAGNOSTICS\"\n```\n:::\n\n```{.r .cell-code}\ncheck_model(m1)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbinned_residuals(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOk: About 100% of the residuals are inside the error bounds.\n```\n:::\n\n```{.r .cell-code}\n# logitgof(df$accuracy, m1$fitted.values, ord=FALSE)\n# hoslem.test(x = df$accuracy, y = fitted(m1), g =  2)\n# p should be non significant\n```\n:::\n\n#### Inference\n\nWe fit a logistic regression model to analyze the effect of experimental condition on probability of a correct answer on the first question. In this model, the effect of condition is statistically significant (z = 3.16, p = 0.0016). The model predicts that the odds of a correct response on the first question in the *impasse condition* increase by 146% ($e^{beta_1}$ = 2.46, 95% CI \\[1.42, 4.37\\]) over the *control condition*.\n\n*Equivalent statements:*\n\n-   being in impasse condition increases log odds of correct response by 0.901 (over control)\n-   being in impasse increases odds of correct response in impasse over control increases by factor of 2.46\n-   probability of correct response in control predicted as 28.5%, vs only 14% in control condition\n\n::: {.cell}\n\n```{.r .cell-code}\n#PRETTY TABLE SJPLOT\ntab_model(m1)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table style=\"border-collapse:collapse; border:none;\">\n<tr>\n<th style=\"border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm;  text-align:left; \">&nbsp;</th>\n<th colspan=\"3\" style=\"border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm; \">accuracy</th>\n</tr>\n<tr>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  text-align:left; \">Predictors</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">Odds Ratios</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">CI</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">p</td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; \">(Intercept)</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">0.16</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">0.10&nbsp;&ndash;&nbsp;0.25</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \"><strong>&lt;0.001</strong></td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; \">pretty condition<br>[impasse]</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">2.46</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">1.42&nbsp;&ndash;&nbsp;4.37</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \"><strong>0.002</strong></td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm; border-top:1px solid;\">Observations</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left; border-top:1px solid;\" colspan=\"3\">330</td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm;\">R<sup>2</sup> Tjur</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left;\" colspan=\"3\">0.031</td>\n</tr>\n\n</table>\n\n`````\n:::\n:::\n\n## ORDINAL OUTCOME\n\n**Does CONDITION affect the Q1 \\[ordered\\] type of response given?**\n\n::: {.cell}\n\n```{.r .cell-code}\n#SETUP DATA\ndf <- df_items %>% filter(q==1)  %>% filter(mode == \"lab-synch\") \n#scaled has already been set as an ordered factor of score_SCALED\n\n#::::::::::::DESCRIPTIVES\nprop.table(table(df$scaled, df$condition))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           \n            control impasse\n  orth      0.39683 0.15873\n  unknown   0.00794 0.00000\n  uncertain 0.00000 0.14286\n  lines     0.00794 0.05556\n  tri       0.07937 0.15079\n```\n:::\n\n```{.r .cell-code}\n#::::::::::::VISUALIZE DISTRIBUTIONS\ngf_props(~scaled, fill= ~condition, data = df) %>% \n  gf_facet_grid(condition ~ .) + easy_remove_legend()\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/label - SETUP-INDEPENDENT-ORDINAL-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#STACKED PROPORTIONAL BAR CHART\ndf %>% \n  ggplot(data = .,\n         mapping = aes(x = condition,\n                       fill = scaled)) +\n  geom_bar(position = \"fill\" ) + #,color = \"black\") +\n  scale_fill_brewer(palette = \"Set1\")  +\n  facet_wrap(~pretty_mode) + \n   labs(#y = \"\",\n       title = \"Q1 Interpretation\",\n       x = \"Condition\",\n       fill = \"\",\n       subtitle=\"\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/label - SETUP-INDEPENDENT-ORDINAL-2.png){width=672}\n:::\n:::\n\n**Does CONDITION affect the Q1 \\[ordered\\] state of understanding?**\n\n::: {.cell}\n\n```{.r .cell-code}\n#SETUP DATA\ndf <- df_items %>% filter(q==1)  %>% filter(mode == \"lab-synch\") \n#scaled has already been set as an ordered factor of score_SCALED\n\n#::::::::::::DESCRIPTIVES\nprop.table(table(df$state, df$condition))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           \n            control impasse\n  orth-like 0.39683 0.15873\n  unknown   0.00794 0.14286\n  tri-like  0.08730 0.20635\n```\n:::\n\n```{.r .cell-code}\n#::::::::::::VISUALIZE DISTRIBUTIONS\ngf_props(~state, fill= ~condition, data = df) %>% \n  gf_facet_grid(condition ~ .) + easy_remove_legend()\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/label - SETUP-INDEPENDENT-ORDINAL-STATE-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#STACKED PROPORTIONAL BAR CHART\ndf %>% \n  ggplot(data = .,\n         mapping = aes(x = condition,\n                       fill = state)) +\n  geom_bar(position = \"fill\" ) + #,color = \"black\") +\n  scale_fill_brewer(palette = \"Set1\")  +\n  facet_wrap(~pretty_mode) + \n   labs(#y = \"\",\n       title = \"Q1 State\",\n       x = \"Condition\",\n       fill = \"\",\n       subtitle=\"\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/label - SETUP-INDEPENDENT-ORDINAL-STATE-2.png){width=672}\n:::\n:::\n\n### ORDINAL REGRESSION --- Cumulative Link; Proportional Odds\n\n*Fit an ordinal logistic regression (at the subject level), predicting Q1 interpretation by condition.*\n\n-   <https://stats.oarc.ucla.edu/r/faq/ologit-coefficients/>\n-   <https://journals.sagepub.com/doi/full/10.1177/2515245918823199>\n-   todo see ordinal regression video: <https://www.youtube.com/watch?v=rPcMcW25PPA&ab_channel=NCRMUK>\n-   <https://peopleanalytics-regression-book.org/ord-reg.html>\n-   <https://medium.com/evangelinelee/brant-test-for-proportional-odds-in-r-b0b373a93aa2>\n-   <https://github.com/runehaubo/ordinal/blob/master/old_vignettes/clm_tutorial.pdf>\n\n**Learning Notes**\n\n-   proportional odds regression models effectively act as a series of stratified binomial models under the assumption that the 'slope' of the logistic function of each stratified model is the same.\n-   thus need to verify proportional odds assumption - ordinal regression requires an **proportional odds assumption** (the same slope holds for each equation)\n-   this is required because the model simultaneously estimates k-1 equations, but each equation has the same *slope*, with different intercepts.\n-   conversely, a multinomial (categorical) model will have different slopes as well as intercepts - the intercepts are always ordered in size alpha 1 \\< alpha 2 \\< alpha k-1...\n-   **TODO** - see difference between the three types of ordinal models (adjacent category (vs) cumulative proportions; check Agresti book\n\n#### Fit Model\n\n::: {.cell}\n\n```{.r .cell-code}\n#::::::::::::ORDINAL REGRESSION MODELS\n\n#EMPTY MODEL\npaste(\"EMPTY Ordinal regression of q1 SCALED score (ordered interpretation)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"EMPTY Ordinal regression of q1 SCALED score (ordered interpretation)\"\n```\n:::\n\n```{.r .cell-code}\nom.0 <- clm(state ~ 1 , data = df)\n# summary(om.0)\n\n#PREDICTOR MODEL\npaste(\"Ordinal regression of q1 SCALED score (ordered interpretation)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Ordinal regression of q1 SCALED score (ordered interpretation)\"\n```\n:::\n\n```{.r .cell-code}\nom <- clm(state ~ condition, data = df)\n# summary(om)\n\n#COMPARE EMPTY AND PREDICTOR\ntest_lrt(om.0, om)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Likelihood-Ratio-Test (LRT) for Model Comparison (ML-estimator)\n\nName | Model | df | df_diff |  Chi2 |      p\n--------------------------------------------\nom.0 |   clm |  2 |         |       |       \nom   |   clm |  3 |       1 | 25.77 | < .001\n```\n:::\n\n```{.r .cell-code}\n#::::::::: EQUIVALENT APPROACH USING POLYR \n\n# #MODEL\nm <- polr(state ~ condition , data = df, Hess=TRUE)\n# summary(m)\n\n#exponentiate coefficients and CIs\n# (ctable <- coef(summary(m)))\n# (p <- pnorm(abs(ctable[, \"t value\"]), lower.tail = FALSE) * 2)\n# (ctable <- cbind(ctable, \"p value\" = p))\n# (ci <- confint(m))\n# (e <- coef(m))\n```\n:::\n\n*Likelihood ratio test suggests the predictor model is a better fit than the empty (intercept only) model.*\n\n#### Inference\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(\"SUMMARY\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"SUMMARY\"\n```\n:::\n\n```{.r .cell-code}\nsummary(om)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nformula: state ~ condition\ndata:    df\n\n link  threshold nobs logLik  AIC    niter max.grad cond.H \n logit flexible  126  -109.55 225.09 6(0)  2.18e-10 2.5e+01\n\nCoefficients:\n                 Estimate Std. Error z value Pr(>|z|)    \nconditionimpasse      1.9        0.4    4.74  2.1e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nThreshold coefficients:\n                  Estimate Std. Error z value\north-like|unknown    1.326      0.323    4.10\nunknown|tri-like     2.109      0.355    5.94\n```\n:::\n\n```{.r .cell-code}\n#LOG ODDS\npaste(\"IN LOG ODDS\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"IN LOG ODDS\"\n```\n:::\n\n```{.r .cell-code}\n(ctable <- coef(summary(om)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  Estimate Std. Error z value Pr(>|z|)\north-like|unknown     1.33      0.323    4.10 4.07e-05\nunknown|tri-like      2.11      0.355    5.94 2.80e-09\nconditionimpasse      1.90      0.400    4.74 2.10e-06\n```\n:::\n\n```{.r .cell-code}\n(ci <- confint(om)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 2.5 % 97.5 %\nconditionimpasse  1.14   2.72\n```\n:::\n\n```{.r .cell-code}\npaste(\"IN ODDS RATIOS\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"IN ODDS RATIOS\"\n```\n:::\n\n```{.r .cell-code}\n#ODDS RATIOS\nexp(coef(om))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\north-like|unknown  unknown|tri-like  conditionimpasse \n             3.77              8.24              6.68 \n```\n:::\n\n```{.r .cell-code}\nexp(ci)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 2.5 % 97.5 %\nconditionimpasse  3.12   15.1\n```\n:::\n:::\n\n**Overall, participants in the impasse condition had higher odds (6.68 X as likely) to offer *more correct* interpretations than those in the control condition (z = 4.74, p \\< 0.001).**\n\n-   we see the estimates for the 2 intercepts, which are sometimes called cutpoints.\n-   The intercepts indicate where the latent variable is cut to make the three groups that we observe in our data.\n-   Note that this latent variable is continuous. In general, these are not used in the interpretation of the results.\n-   The cutpoints are closely related to thresholds, which are reported by other statistical packages.\n-   for k groups there will be k-1 intercepts (cutpoints)\n-   confirm that the CI does not include 0 (the units are ordered logits \\[ordered log odds\\])\n-   as with logistic regression we exponentiate the coefficients and confints to get odds ratio\n\n#### Visualize Model\n\n::: {.cell}\n\n```{.r .cell-code}\n# sjPlot::tab_model(om)\nsjPlot::plot_model(om)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsjPlot::plot_model(om, type = \"eff\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$condition\n```\n:::\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-42-2.png){width=672}\n:::\n\n```{.r .cell-code}\n                   # show.data = TRUE, jitter = TRUE)\n```\n:::\n\n#### Diagnostics\n\n::: {.cell}\n\n```{.r .cell-code}\n#:: ASSESS FIT\nperformance(om)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCan't calculate log-loss.\nCan't calculate proper scoring rules for ordinal, multinomial or cumulative link models.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# Indices of model performance\n\nAIC     |     BIC | Nagelkerke's R2 |  RMSE | Sigma\n---------------------------------------------------\n225.090 | 233.599 |           0.216 | 1.629 | 1.648\n```\n:::\n\n```{.r .cell-code}\n# #test proporitional odds assumption \nbrant(m) #only works for polyr type model not clm type model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n---------------------------------------------------- \nTest for\t\tX2\tdf\tprobability \n---------------------------------------------------- \nOmnibus\t\t\t15.6\t1\t0\nconditionimpasse\t15.6\t1\t0\n---------------------------------------------------- \n\nH0: Parallel Regression Assumption holds\n```\n:::\n\n```{.r .cell-code}\n# # A p-value of less than 0.05 on this test—particularly on the Omnibus plus at least one of the variables—should be interpreted as a failure of the proportional odds assumption.\n\n#test proportional odds assumption\nlibrary(pomcheckr)\n# https://cran.r-project.org/web/packages/pomcheckr/pomcheckr.pdf\n(p <- pomcheck( scaled ~ condition , data = df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 2 × 6\n# Groups:   condition [2]\n  condition `scaled_>=1` `scaled_>=2` `scaled_>=4` `scaled_>=5` `scaled_>=3`\n  <fct>            <dbl>        <dbl>        <dbl>        <dbl>        <dbl>\n1 control            Inf        -1.43       -1.53        -1.65        NA    \n2 impasse            Inf        NA          -0.379       -0.862        0.788\n\nattr(,\"class\")\n[1] \"pomcheck\" \"list\"    \n```\n:::\n\n```{.r .cell-code}\nplot(p)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n**The output of the graphical test for proportional odds assumption suggests that the proportional odds assumption may be unreasonable for this dataset. Also, inspecting the output table, we see the coefficients for each level of the scaled variable are quite different.**\n\nThus, an alternative approach may be more appropriate:\n\n-   Baseline logistic model. This model is the same as the multinomial regression model covered in the previous chapter, using the lowest ordinal value as the reference.\n\n-   Adjacent-category logistic model. This model compares each level of the ordinal variable to the next highest level, and it is a constrained version of the baseline logistic model. The brglm2 package in R offers a function bracl() for calculating an adjacent category logistic model.\n\n-   Continuation-ratio logistic model. This model compares each level of the ordinal variable to all lower levels. This can be modeled using binary logistic regression techniques, but new variables need to be constructed from the data set to allow this. The R package rms has a function cr.setup() which is a utility for preparing an outcome variable for a continuation ratio model.\n\n\\*Note: for multiple regression, the ordinal package offers a parameter (nominal = \\~predictors) that allow you to designate some predictors as nominal rather than ordinal. But this is not appropriate for this use case.\\_\n\n## CATEGORICAL OUTCOME\n\n**Does CONDITION affect the Q1 \\[ordered\\] type of response given?**\n\n::: {.cell}\n\n```{.r .cell-code}\n#SETUP DATA\ndf <- df_items %>% filter(q==1)  %>% filter(mode == \"lab-synch\") \n#scaled has already been set as an ordered factor of score_SCALED\n\n#::::::::::::DESCRIPTIVES\nprop.table(table(df$scaled, df$condition))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           \n            control impasse\n  orth      0.39683 0.15873\n  unknown   0.00794 0.00000\n  uncertain 0.00000 0.14286\n  lines     0.00794 0.05556\n  tri       0.07937 0.15079\n```\n:::\n\n```{.r .cell-code}\n#::::::::::::VISUALIZE DISTRIBUTIONS\ngf_props(~scaled, fill= ~condition, data = df) %>% \n  gf_facet_grid(condition ~ .) + easy_remove_legend()\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#STACKED PROPORTIONAL BAR CHART\ndf %>% \n  ggplot(data = .,\n         mapping = aes(x = condition,\n                       fill = scaled)) +\n  geom_bar(position = \"fill\" ) + #,color = \"black\") +\n  scale_fill_brewer(palette = \"Set1\")  +\n  facet_wrap(~pretty_mode) + \n   labs(#y = \"\",\n       title = \"Q1 Interpretation\",\n       x = \"Condition\",\n       fill = \"\",\n       subtitle=\"\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-44-2.png){width=672}\n:::\n:::\n\n**Does CONDITION affect the Q1 \\[ordered\\] state of understanding?**\n\n::: {.cell}\n\n```{.r .cell-code}\n#SETUP DATA\ndf <- df_items %>% filter(q==1)  %>% filter(mode == \"lab-synch\") \n#scaled has already been set as an ordered factor of score_SCALED\n\n#::::::::::::DESCRIPTIVES\ntable(df$state, df$condition) %>% addmargins(2) %>% #display sum for row\n      prop.table(margin=2) %>%  #return proportion (of column)\n      addmargins(1) #sanity check sum of columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           \n            control impasse    Sum\n  orth-like  0.8065  0.3125 0.5556\n  unknown    0.0161  0.2812 0.1508\n  tri-like   0.1774  0.4062 0.2937\n  Sum        1.0000  1.0000 1.0000\n```\n:::\n\n```{.r .cell-code}\n#::::::::::::VISUALIZE DISTRIBUTIONS\ngf_props(~state, fill= ~condition, data = df) %>% \n  gf_facet_grid(condition ~ .) + easy_remove_legend()\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#STACKED PROPORTIONAL BAR CHART\ndf %>% \n  ggplot(data = .,\n         mapping = aes(x = condition,\n                       fill = state)) +\n  geom_bar(position = \"fill\" ) + #,color = \"black\") +\n  scale_fill_brewer(palette = \"Set1\")  +\n  facet_wrap(~pretty_mode) + \n   labs(#y = \"\",\n       title = \"Q1 State\",\n       x = \"Condition\",\n       fill = \"\",\n       subtitle=\"\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-45-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#GGSTATSPLOT\nggbarstats(df, state, condition)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-45-3.png){width=672}\n:::\n:::\n\n### CHI SQUARE\n\n**Does CONDITION affect the Q1 \\[categorical\\] type of response given?**\n\n::: {.cell}\n\n```{.r .cell-code}\nCrossTable( x = df$condition, y = df$scaled, \n             fisher = TRUE, chisq=TRUE, expected = TRUE, sresid = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in chisq.test(t, correct = FALSE, ...): Chi-squared approximation may be\nincorrect\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n \n   Cell Contents\n|-------------------------|\n|                       N |\n|              Expected N |\n| Chi-square contribution |\n|           N / Row Total |\n|           N / Col Total |\n|         N / Table Total |\n|-------------------------|\n\n \nTotal Observations in Table:  126 \n\n \n             | df$scaled \ndf$condition |      orth |   unknown | uncertain |     lines |       tri | Row Total | \n-------------|-----------|-----------|-----------|-----------|-----------|-----------|\n     control |        50 |         1 |         0 |         1 |        10 |        62 | \n             |    34.444 |     0.492 |     8.857 |     3.937 |    14.270 |           | \n             |     7.025 |     0.524 |     8.857 |     2.191 |     1.278 |           | \n             |     0.806 |     0.016 |     0.000 |     0.016 |     0.161 |     0.492 | \n             |     0.714 |     1.000 |     0.000 |     0.125 |     0.345 |           | \n             |     0.397 |     0.008 |     0.000 |     0.008 |     0.079 |           | \n-------------|-----------|-----------|-----------|-----------|-----------|-----------|\n     impasse |        20 |         0 |        18 |         7 |        19 |        64 | \n             |    35.556 |     0.508 |     9.143 |     4.063 |    14.730 |           | \n             |     6.806 |     0.508 |     8.580 |     2.122 |     1.238 |           | \n             |     0.312 |     0.000 |     0.281 |     0.109 |     0.297 |     0.508 | \n             |     0.286 |     0.000 |     1.000 |     0.875 |     0.655 |           | \n             |     0.159 |     0.000 |     0.143 |     0.056 |     0.151 |           | \n-------------|-----------|-----------|-----------|-----------|-----------|-----------|\nColumn Total |        70 |         1 |        18 |         8 |        29 |       126 | \n             |     0.556 |     0.008 |     0.143 |     0.063 |     0.230 |           | \n-------------|-----------|-----------|-----------|-----------|-----------|-----------|\n\n \nStatistics for All Table Factors\n\n\nPearson's Chi-squared test \n------------------------------------------------------------\nChi^2 =  39.1     d.f. =  4     p =  6.55e-08 \n\n\n \nFisher's Exact Test for Count Data\n------------------------------------------------------------\nAlternative hypothesis: two.sided\np =  1.01e-09 \n\n \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#MOSAIC PLOT\n#note: blue indicates cell count higher than expected, red indicates cell count less than expected; under null hypothesis\nmosaicplot(main=\"Interpretation on First Question by Condition\",\n            data = df, condition ~ scaled, \n            shade = T)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#::::::::::::WITH STATISTICS\nggbarstats(data = df, x = condition, y = scaled,\n           type = \"nonparametric\") \n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-47-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#MOSAIC PLOT\n#note: blue indicates cell count higher than expected, red indicates cell count less than expected; under null hypothesis\nmosaicplot(main=\"Response Type on First Question by Condition\",\n            data = df, condition ~ scaled, \n            shade = T)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/label - CHISQR-interpreation-1.png){width=672}\n:::\n\n```{.r .cell-code}\nCrossTable( x = df$condition, y = df$scaled, \n            fisher = TRUE, chisq=TRUE, expected = TRUE, sresid = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in chisq.test(t, correct = FALSE, ...): Chi-squared approximation may be\nincorrect\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n \n   Cell Contents\n|-------------------------|\n|                       N |\n|              Expected N |\n| Chi-square contribution |\n|           N / Row Total |\n|           N / Col Total |\n|         N / Table Total |\n|-------------------------|\n\n \nTotal Observations in Table:  126 \n\n \n             | df$scaled \ndf$condition |      orth |   unknown | uncertain |     lines |       tri | Row Total | \n-------------|-----------|-----------|-----------|-----------|-----------|-----------|\n     control |        50 |         1 |         0 |         1 |        10 |        62 | \n             |    34.444 |     0.492 |     8.857 |     3.937 |    14.270 |           | \n             |     7.025 |     0.524 |     8.857 |     2.191 |     1.278 |           | \n             |     0.806 |     0.016 |     0.000 |     0.016 |     0.161 |     0.492 | \n             |     0.714 |     1.000 |     0.000 |     0.125 |     0.345 |           | \n             |     0.397 |     0.008 |     0.000 |     0.008 |     0.079 |           | \n-------------|-----------|-----------|-----------|-----------|-----------|-----------|\n     impasse |        20 |         0 |        18 |         7 |        19 |        64 | \n             |    35.556 |     0.508 |     9.143 |     4.063 |    14.730 |           | \n             |     6.806 |     0.508 |     8.580 |     2.122 |     1.238 |           | \n             |     0.312 |     0.000 |     0.281 |     0.109 |     0.297 |     0.508 | \n             |     0.286 |     0.000 |     1.000 |     0.875 |     0.655 |           | \n             |     0.159 |     0.000 |     0.143 |     0.056 |     0.151 |           | \n-------------|-----------|-----------|-----------|-----------|-----------|-----------|\nColumn Total |        70 |         1 |        18 |         8 |        29 |       126 | \n             |     0.556 |     0.008 |     0.143 |     0.063 |     0.230 |           | \n-------------|-----------|-----------|-----------|-----------|-----------|-----------|\n\n \nStatistics for All Table Factors\n\n\nPearson's Chi-squared test \n------------------------------------------------------------\nChi^2 =  39.1     d.f. =  4     p =  6.55e-08 \n\n\n \nFisher's Exact Test for Count Data\n------------------------------------------------------------\nAlternative hypothesis: two.sided\np =  1.01e-09 \n\n \n```\n:::\n\n```{.r .cell-code}\ndf %>%\n  sjtab(fun = \"xtab\", var.labels=c(\"scaled\", \"pretty_condition\"),\n        show.row.prc=T, show.col.prc=T, show.summary=T, show.exp=T, show.legend=T,\n        statistics = \"fisher\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table style=\"border-collapse:collapse; border:none;\">\n <tr>\n <th style=\"border-top:double; text-align:center; font-style:italic; font-weight:normal; border-bottom:1px solid;\" rowspan=\"2\">scaled</th>\n <th style=\"border-top:double; text-align:center; font-style:italic; font-weight:normal;\" colspan=\"2\">pretty_condition</th>\n <th style=\"border-top:double; text-align:center; font-style:italic; font-weight:normal; font-weight:bolder; font-style:italic; border-bottom:1px solid; \" rowspan=\"2\">Total</th>\n </tr>\n \n<tr>\n <td style=\"border-bottom:1px solid; text-align:center; padding:0.2cm;\">control</td>\n <td style=\"border-bottom:1px solid; text-align:center; padding:0.2cm;\">impasse</td>\n </tr>\n \n<tr> \n<td style=\"padding:0.2cm;  text-align:left; vertical-align:middle;\">orth</td>\n<td style=\"padding:0.2cm; text-align:center; \"><span style=\"color:black;\">50</span><br><span style=\"color:#339999;\">34</span><br><span style=\"color:#333399;\">71.4&nbsp;&#37;</span><br><span style=\"color:#339933;\">80.6&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center; \"><span style=\"color:black;\">20</span><br><span style=\"color:#339999;\">36</span><br><span style=\"color:#333399;\">28.6&nbsp;&#37;</span><br><span style=\"color:#339933;\">31.2&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center;  \"><span style=\"color:black;\">70</span><br><span style=\"color:#339999;\">70</span><br><span style=\"color:#333399;\">100&nbsp;&#37;</span><br><span style=\"color:#339933;\">55.6&nbsp;&#37;</span></td> \n</tr>\n \n<tr> \n<td style=\"padding:0.2cm;  text-align:left; vertical-align:middle;\">unknown</td>\n<td style=\"padding:0.2cm; text-align:center; \"><span style=\"color:black;\">1</span><br><span style=\"color:#339999;\">0</span><br><span style=\"color:#333399;\">100&nbsp;&#37;</span><br><span style=\"color:#339933;\">1.6&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center; \"><span style=\"color:black;\">0</span><br><span style=\"color:#339999;\">1</span><br><span style=\"color:#333399;\">0&nbsp;&#37;</span><br><span style=\"color:#339933;\">0&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center;  \"><span style=\"color:black;\">1</span><br><span style=\"color:#339999;\">1</span><br><span style=\"color:#333399;\">100&nbsp;&#37;</span><br><span style=\"color:#339933;\">0.8&nbsp;&#37;</span></td> \n</tr>\n \n<tr> \n<td style=\"padding:0.2cm;  text-align:left; vertical-align:middle;\">uncertain</td>\n<td style=\"padding:0.2cm; text-align:center; \"><span style=\"color:black;\">0</span><br><span style=\"color:#339999;\">9</span><br><span style=\"color:#333399;\">0&nbsp;&#37;</span><br><span style=\"color:#339933;\">0&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center; \"><span style=\"color:black;\">18</span><br><span style=\"color:#339999;\">9</span><br><span style=\"color:#333399;\">100&nbsp;&#37;</span><br><span style=\"color:#339933;\">28.1&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center;  \"><span style=\"color:black;\">18</span><br><span style=\"color:#339999;\">18</span><br><span style=\"color:#333399;\">100&nbsp;&#37;</span><br><span style=\"color:#339933;\">14.3&nbsp;&#37;</span></td> \n</tr>\n \n<tr> \n<td style=\"padding:0.2cm;  text-align:left; vertical-align:middle;\">lines</td>\n<td style=\"padding:0.2cm; text-align:center; \"><span style=\"color:black;\">1</span><br><span style=\"color:#339999;\">4</span><br><span style=\"color:#333399;\">12.5&nbsp;&#37;</span><br><span style=\"color:#339933;\">1.6&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center; \"><span style=\"color:black;\">7</span><br><span style=\"color:#339999;\">4</span><br><span style=\"color:#333399;\">87.5&nbsp;&#37;</span><br><span style=\"color:#339933;\">10.9&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center;  \"><span style=\"color:black;\">8</span><br><span style=\"color:#339999;\">8</span><br><span style=\"color:#333399;\">100&nbsp;&#37;</span><br><span style=\"color:#339933;\">6.3&nbsp;&#37;</span></td> \n</tr>\n \n<tr> \n<td style=\"padding:0.2cm;  text-align:left; vertical-align:middle;\">tri</td>\n<td style=\"padding:0.2cm; text-align:center; \"><span style=\"color:black;\">10</span><br><span style=\"color:#339999;\">14</span><br><span style=\"color:#333399;\">34.5&nbsp;&#37;</span><br><span style=\"color:#339933;\">16.1&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center; \"><span style=\"color:black;\">19</span><br><span style=\"color:#339999;\">15</span><br><span style=\"color:#333399;\">65.5&nbsp;&#37;</span><br><span style=\"color:#339933;\">29.7&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center;  \"><span style=\"color:black;\">29</span><br><span style=\"color:#339999;\">29</span><br><span style=\"color:#333399;\">100&nbsp;&#37;</span><br><span style=\"color:#339933;\">23&nbsp;&#37;</span></td> \n</tr>\n \n<tr> \n<td style=\"padding:0.2cm;  border-bottom:double; font-weight:bolder; font-style:italic; text-align:left; vertical-align:middle;\">Total</td>\n<td style=\"padding:0.2cm; text-align:center;   border-bottom:double;\"><span style=\"color:black;\">62</span><br><span style=\"color:#339999;\">62</span><br><span style=\"color:#333399;\">49.2&nbsp;&#37;</span><br><span style=\"color:#339933;\">100&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center;   border-bottom:double;\"><span style=\"color:black;\">64</span><br><span style=\"color:#339999;\">64</span><br><span style=\"color:#333399;\">50.8&nbsp;&#37;</span><br><span style=\"color:#339933;\">100&nbsp;&#37;</span></td>\n<td style=\"padding:0.2cm; text-align:center;   border-bottom:double;\"><span style=\"color:black;\">126</span><br><span style=\"color:#339999;\">126</span><br><span style=\"color:#333399;\">100&nbsp;&#37;</span><br><span style=\"color:#339933;\">100&nbsp;&#37;</span></td> \n</tr>\n<td style=\"text-align:right; font-size:0.9em; font-style:italic; padding:0.2cm;\" colspan=\"4\">&chi;<sup>2</sup>=39.128 &middot; df=4 &middot; Cramer's V=0.557 &middot; Fisher's p=0.000</td> \n</tr>\n \n</table> <p>\n <span style=\"color:black;\">observed values</span><br>\n <span style=\"color:#339999;\">expected values</span><br>\n <span style=\"color:#333399;\">&#37; within scaled</span><br>\n <span style=\"color:#339933;\">&#37; within pretty_condition</span><br>\n </p>\n\n`````\n:::\n:::\n\n**TODO INFERENCE**\n\n### MULTINOMIAL REGRESSION\n\n**TODO** RECONCILE actual predictions with coefficients and visualization of predictions\n\n*Does condition affect the response state of Q1?*\n\n-   <https://peopleanalytics-regression-book.org/multinomial-logistic-regression-for-nominal-category-outcomes.html#running-a-multinomial-regression-model>\n-   <https://bookdown.org/chua/ber642_advanced_regression/multinomial-logistic-regression.html>\n-   <https://www.youtube.com/watch?v=JcCBIPqcwFo&list=PLzv58M2GAfm50X_Twskr1aXaV5qMuIszx&ab_channel=NCRMUK>\n-   Can use nnet package multinom() or mclogit package mblogit() \\[\"baseline logit model\"\\] or brms with family = \"categorical\"\n\n*Fit a logistic regression predicting interpretation (k=#response categories) by condition. (k = 2).*\n\n-   2 equations will be estimated (# categories - 1); each representing the odds of answering in that particular interpretation (vs) the reference category (orthogonal answer)\n\n-   (from experience, seems) Each cell must have at least one observation (if one cell is blank, then it seems to be incorrectly estimated, see predicting high_interpretation vs. state. suggests nonsignificant OR for 'unknown' category, when infact that difference drives the effect\n\n-   For *each* equation:\n\n    -   $\\beta_{0}$ *= Log Odds of \\[this category type vs. reference category type) response in CONTROL condition*\n\n        -   $e^{\\beta_{0}}$ *= ODDS of \\[this category type vs. reference category type\\] response in CONTROL condition*\n\n    -   $\\beta_{1}$ *=* $\\beta_{1impasse}$ *Log Odds (Log OR; change in odds for \\[this category\\] type response in impasse (vs) control \\[log scale\\])*\n\n    -   $e^{\\beta_{1}}$ *= ODDS RATIO of \\[this. vs reference category type\\] response in IMPASSE (vs) CONTROL*\n\n    -   *Null hypothesis:* $\\beta_{impasse} \\le 0$ *the odds for \\[this category of response vs. reference\\] does not change, or decreases*\n\n    -   *Alternative hypothesis:* $\\beta_{impasse} \\gt 0$ *the odds of \\[this category of response vs. reference\\] increases*\n\n    -   \n\n::: {.cell}\n\n```{.r .cell-code}\n#::::::::::::DESCRIPTIVES RESPONSE STATE\n\ntable(df$state, df$condition) %>% addmargins(2) %>% #display sum for row\n      prop.table(margin=2) %>%  #return proportion (of column)\n      addmargins(1) #sanity check sum of columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           \n            control impasse    Sum\n  orth-like  0.8065  0.3125 0.5556\n  unknown    0.0161  0.2812 0.1508\n  tri-like   0.1774  0.4062 0.2937\n  Sum        1.0000  1.0000 1.0000\n```\n:::\n\n```{.r .cell-code}\n(t <- table(df$state, df$condition) %>% addmargins(2) %>% #display sum for row\n      addmargins(1)) #sanity check sum of columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           \n            control impasse Sum\n  orth-like      50      20  70\n  unknown         1      18  19\n  tri-like       11      26  37\n  Sum            62      64 126\n```\n:::\n:::\n\n#### Fit Model\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nnet)\n\n#check reference level \nlevels(df$state)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"orth-like\" \"unknown\"   \"tri-like\" \n```\n:::\n\n```{.r .cell-code}\n#FIT EMPTY MODEL\ncatm.0 <- multinom(state ~ 1, data = df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# weights:  6 (2 variable)\ninitial  value 138.425148 \nfinal  value 122.428550 \nconverged\n```\n:::\n\n```{.r .cell-code}\n# summary(catm.0)\n\n#FIT PREDICTOR MODEL\ncatm <- multinom(formula = state ~ condition, data = df, model = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# weights:  9 (4 variable)\ninitial  value 138.425148 \niter  10 value 103.421004\niter  10 value 103.421004\nfinal  value 103.421004 \nconverged\n```\n:::\n\n```{.r .cell-code}\n# summary(catm)\n\n#COMPARE MODEL FIT\ntest_lrt(catm.0, catm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Likelihood-Ratio-Test (LRT) for Model Comparison (ML-estimator)\n\nName   |    Model | df | df_diff |  Chi2 |      p\n-------------------------------------------------\ncatm.0 | multinom |  2 |         |       |       \ncatm   | multinom |  4 |       2 | 38.02 | < .001\n```\n:::\n\n```{.r .cell-code}\n##compare bayesian version\n#library(brms)\n# bm1 <- brm( state ~ pretty_condition, data = df, family = \"categorical\")\n# summary(bm1)\n# plot_model(bm1)\n# report(bm1)\n# coefficient estimates are very simliar to catm. super cool!\n\n##compare mclogit version\n#\"baseline-category logit model\n# https://www.elff.eu/software/mclogit/manual/mblogit/\n# blm1 <- mblogit(state ~ pretty_condition , data = df)\n# summary(blm1)\n#identical to catm. super cool!\n```\n:::\n\n*Likelihood ratio test indicates predictor model is significantly better fit to the sample data than the empty (intercept only) model.*\n\n#### Interpretation\n\n::: {.cell}\n\n```{.r .cell-code}\n#::::::::INTERPRETATION\npaste(\"MODEL SUMMARY\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MODEL SUMMARY\"\n```\n:::\n\n```{.r .cell-code}\nsummary(catm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\nmultinom(formula = state ~ condition, data = df, model = TRUE)\n\nCoefficients:\n         (Intercept) conditionimpasse\nunknown        -3.91             3.81\ntri-like       -1.51             1.78\n\nStd. Errors:\n         (Intercept) conditionimpasse\nunknown        1.010            1.061\ntri-like       0.333            0.447\n\nResidual Deviance: 207 \nAIC: 215 \n```\n:::\n\n```{.r .cell-code}\n# calculate z-statistics of coefficients\n(z_stats <- summary(catm)$coefficients/summary(catm)$standard.errors)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         (Intercept) conditionimpasse\nunknown        -3.87             3.59\ntri-like       -4.55             3.98\n```\n:::\n\n```{.r .cell-code}\n# convert to p-values\np_values <- (1 - pnorm(abs(z_stats)))*2\n# display p-values in transposed data frame\np_values <- data.frame(p = (p_values))\n# display odds ratios in transposed data frame\n\npaste(\"ODDS RATIOS\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ODDS RATIOS\"\n```\n:::\n\n```{.r .cell-code}\nodds_ratios <- data.frame(OR = exp(summary(catm)$coefficients))\n\n# options(scipen = 3)\n(results <- cbind(odds_ratios, p_values))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         OR..Intercept. OR.conditionimpasse p..Intercept. p.conditionimpasse\nunknown            0.02               44.99      1.07e-04          0.0003330\ntri-like           0.22                5.91      5.45e-06          0.0000692\n```\n:::\n:::\n\n**Learning Notes**\n\n-   Model estimates encompass two equations:\n-   effect of predictor on log odds of being in \\[unknown\\] instead of reference category \\[orth-like\\]\n-   effect of predictor on log odds of being in \\[tri-like\\] instead of reference category \\[orth-like\\]\n-   \\[need to to double check interpretation, but I *think* that the OR intercepts converted to probabilities equate to the marginal probability of being in each state in the \\[reference\\] control condition. which makes sense. I think\\]\n-   IF I change reference category for condition... then the intercepts should no longer be significant. The b1 coefficients should still be significant, but with changed sign (much less likely) \\[Yup! this works!\\]\n\n#### Inference\n\n-   Being in the IMPASSE condition increases the odds of giving 'unknown/uncertain' response rather than an orthogonal (or satisficing) response by a factor of 50 (z = 3.59, p \\< 0.001 ).\n-   Being in the IMPASSE condition increases the odds of giving an 'triangular or line-driven' response rather than an orthogonal (or satisficing) response by a factor of 6 (z = 3.98, p \\<0.001 )\n\n#### Visualize\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_model(catm, vline.color = 'red')\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot_model(catm, type = \"eff\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$condition\n```\n:::\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-52-2.png){width=672}\n:::\n:::\n\n#### Diagnostics\n\n::: {.cell}\n\n```{.r .cell-code}\n#EXAMINE PREDICTIONS\n#create sample data frame\ntest <- data.frame(condition = c(\"control\", \"impasse\"))\npred <- predict(catm, newdata = test, \"probs\")\npaste(\"Predicted Probability of Being in Each State\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Predicted Probability of Being in Each State\"\n```\n:::\n\n```{.r .cell-code}\n(cbind(test, pred))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  condition orth-like unknown tri-like\n1   control     0.806  0.0161    0.177\n2   impasse     0.312  0.2812    0.406\n```\n:::\n\n```{.r .cell-code}\n#performance\nperformance(catm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCan't calculate log-loss.\nCan't calculate proper scoring rules for ordinal, multinomial or cumulative link models.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# Indices of model performance\n\nAIC     |     BIC |    R2 | R2 (adj.) |  RMSE | Sigma\n-----------------------------------------------------\n214.842 | 226.187 | 0.155 |     0.147 | 0.404 | 1.302\n```\n:::\n\n```{.r .cell-code}\nDescTools::PseudoR2(catm, which = c(\"McFadden\", \"CoxSnell\", \"Nagelkerke\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'DescTools':\n  method         from \n  reorder.factor gdata\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n  McFadden   CoxSnell Nagelkerke \n     0.155      0.260      0.304 \n```\n:::\n\n```{.r .cell-code}\n#General Goodness of Fit\n# library(generalhoslem)\n# logitgof(df$state, catm$fitted.values, g = 3)\n# hoslem.test(x = df$state, y = catm$fitted.values, g =  10)\n#A non-significant p value indicates that there is no evidence that the observed and expected frequencies differ (i.e., evidence of good fit).\n#don't fret! this version of the hoslem-lem test is problematic with fewer than 10 input variables\n```\n:::\n\n# MIXED (Repeated Measures)\n\n::: {.cell}\n\n```{.r .cell-code}\n#PREPARE DATA \nn_items = 8 #number of items in test\n\n#item level\ndf = df_items %>% filter(q %nin% c(1,2,3,4,5,6,9)) %>% mutate(\n  accuracy = recode_factor(score_niceABS, \"0\" =\"incorrect\",\"1\"=\"correct\"),\n  q = as.factor(q)\n)\n\n#FACETED HISTOGRAM\nstats = df_subjects %>% group_by(pretty_condition) %>% dplyr::summarise(mean = mean(item_test_NABS))\ngf_props(~item_test_NABS, \n         fill = ~pretty_condition, data = df_subjects) %>% \n  gf_facet_grid(pretty_condition ~ pretty_mode) %>% \n  gf_vline(data = stats, xintercept = ~mean, color = \"red\") +\n  labs(x = \"# Correct\",\n       y = \"proportion of subjects\",\n       title = \"Test Phase Absolute Score (# Correct)\",\n       subtitle = \"\") + theme(legend.position = \"blank\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/SETUP-TEST-ACC-ITEM-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#GROUPED PROPORTIONAL BAR CHART\ngf_props(~accuracy, fill = ~pretty_condition, x =~pretty_condition,\n       position = position_dodge(), data = df) %>%\n  gf_facet_grid(~pretty_mode) +\n   labs(x = \"Correct Responses in Test Phase\",\n       title = \"Accuracy on Task by Condition\",\n       subtitle=\"Impasse Condition yields a greater proportion of correct responses\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/SETUP-TEST-ACC-ITEM-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#STACKED PROPORTIONAL BAR CHART\ndf %>% \n  ggplot(data = .,\n         mapping = aes(x = pretty_condition,\n                       fill = accuracy)) +\n  geom_bar(position = \"fill\" ) + #,color = \"black\") +\n  scale_fill_brewer(palette = \"Set1\")  +\n  facet_wrap(~pretty_mode) + \n   labs(#y = \"\",\n       title = \"Accuracy on Test Phase\",\n       x = \"Condition\",\n       fill = \"\",\n       subtitle=\"Impasse Condition yields a greater proportion of correct responses\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/SETUP-TEST-ACC-ITEM-3.png){width=672}\n:::\n:::\n\n## MIXED --- CONTINUOUS\n\n## MIXED --- BINOMIAL\n\n#### Mixed Logistic Regression\n\n*Fit a mixed logistic regression (at the item level), predicting accuracy (absolute score) on test phase questions by condition; accounting for random effects of subject.*\n\n##### Fit Model\n\n::: {.cell}\n\n```{.r .cell-code}\n#SETUP DATA \nn_items = 8 #number of items in test\n\n#item level\ndf = df_items %>% filter(q %nin% c(1,2,3,4,5,6,9)) %>% mutate(\n  accuracy = as.factor(score_niceABS),\n  q = as.factor(q)\n) %>% filter(mode ==\"lab-synch\")\n\nlibrary(lmerTest) #for CIs in glmer \n\n## 1 | SETUP RANDOM EFFECT\n\n#:: EMPTY MODEL (baseline, no random effect)\nm0 = glm(accuracy ~ 1, family = \"binomial\", data = df) \n\n#:: RANDOM INTERCEPT SUBJECT\nmm.rS <- glmer(accuracy ~ (1|subject), data = df,family = \"binomial\")\n\n# :: TEST random effect\npaste(\"AIC with random effect is lower than glm empty model?\", m0$aic > AIC(logLik(mm.rS)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"AIC with random effect is lower than glm empty model? TRUE\"\n```\n:::\n\n```{.r .cell-code}\ntest_lrt(m0,mm.rS) #same as anova(m0, m1, test = \"Chi\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Likelihood-Ratio-Test (LRT) for Model Comparison (ML-estimator)\n\nName  |    Model | df | df_diff |   Chi2 |      p\n-------------------------------------------------\nm0    |      glm |  1 |         |        |       \nmm.rS | glmerMod |  2 |       1 | 678.41 | < .001\n```\n:::\n\n```{.r .cell-code}\npaste(\"Likelihood Ratio test is significant? p = \",(test_lrt(m0,mm.rS))$p[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Likelihood Ratio test is significant? p =  1.4837179793132e-149\"\n```\n:::\n\n```{.r .cell-code}\n## 2 | ADD FIXED EFFECT\n\n# SUBJECT INTERCEPT | FIXED CONDITION \nmm.CrS <- glmer(accuracy ~ pretty_condition + (1|subject), \n                data = df,family = \"binomial\")\n\n# :: TEST fixed factor \npaste(\"AIC with fixed effect is lower than random intercept only model?\", AIC(logLik(mm.rS)) > AIC(logLik(mm.CrS)) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"AIC with fixed effect is lower than random intercept only model? TRUE\"\n```\n:::\n\n```{.r .cell-code}\ntest_lrt(mm.rS,mm.CrS) #same as anova(m0, m1, test = \"Chi\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Likelihood-Ratio-Test (LRT) for Model Comparison (ML-estimator)\n\nName   |    Model | df | df_diff | Chi2 |     p\n-----------------------------------------------\nmm.rS  | glmerMod |  2 |         |      |      \nmm.CrS | glmerMod |  3 |       1 | 3.91 | 0.048\n```\n:::\n\n```{.r .cell-code}\npaste(\"Likelihood Ratio test is significant? p = \",(test_lrt(mm.rS,mm.CrS))$p[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Likelihood Ratio test is significant? p =  0.047907883063779\"\n```\n:::\n:::\n\n##### Visualize\n\n::: {.cell}\n\n```{.r .cell-code}\n#: PRINT MODEL \nprint(\"PREDICTOR MODEL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PREDICTOR MODEL\"\n```\n:::\n\n```{.r .cell-code}\nsumm(mm.CrS)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed table-responsive\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Observations </td>\n   <td style=\"text-align:right;\"> 1008 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Dependent variable </td>\n   <td style=\"text-align:right;\"> accuracy </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Type </td>\n   <td style=\"text-align:right;\"> Mixed effects generalized linear model </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Family </td>\n   <td style=\"text-align:right;\"> binomial </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Link </td>\n   <td style=\"text-align:right;\"> logit </td>\n  </tr>\n</tbody>\n</table> <table class=\"table table-striped table-hover table-condensed table-responsive\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> AIC </td>\n   <td style=\"text-align:right;\"> 582.02 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> BIC </td>\n   <td style=\"text-align:right;\"> 596.77 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Pseudo-R² (fixed effects) </td>\n   <td style=\"text-align:right;\"> 0.07 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Pseudo-R² (total) </td>\n   <td style=\"text-align:right;\"> 0.95 </td>\n  </tr>\n</tbody>\n</table> <table class=\"table table-striped table-hover table-condensed table-responsive\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n<tr><th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"5\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">Fixed Effects</div></th></tr>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:right;\"> Est. </th>\n   <th style=\"text-align:right;\"> S.E. </th>\n   <th style=\"text-align:right;\"> z val. </th>\n   <th style=\"text-align:right;\"> p </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> (Intercept) </td>\n   <td style=\"text-align:right;\"> -7.46 </td>\n   <td style=\"text-align:right;\"> 1.20 </td>\n   <td style=\"text-align:right;\"> -6.21 </td>\n   <td style=\"text-align:right;\"> 0.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> pretty_conditionimpasse </td>\n   <td style=\"text-align:right;\"> 4.03 </td>\n   <td style=\"text-align:right;\"> 1.67 </td>\n   <td style=\"text-align:right;\"> 2.42 </td>\n   <td style=\"text-align:right;\"> 0.02 </td>\n  </tr>\n</tbody>\n</table> <table class=\"table table-striped table-hover table-condensed table-responsive\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n<tr><th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"3\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">Random Effects</div></th></tr>\n  <tr>\n   <th> Group </th>\n   <th> Parameter </th>\n   <th> Std. Dev. </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td> subject </td>\n   <td> (Intercept) </td>\n   <td> 7.36 </td>\n  </tr>\n</tbody>\n</table> <table class=\"table table-striped table-hover table-condensed table-responsive\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n<tr><th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"3\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">Grouping Variables</div></th></tr>\n  <tr>\n   <th> Group </th>\n   <th> # groups </th>\n   <th> ICC </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td> subject </td>\n   <td> 126 </td>\n   <td> 0.94 </td>\n  </tr>\n</tbody>\n</table>\n`````\n:::\n\n```{.r .cell-code}\n#: INTERPRET COEFFICIENTS\n\nprint(\"MODEL PERFORMANCE\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MODEL PERFORMANCE\"\n```\n:::\n\n```{.r .cell-code}\nperformance(mm.CrS)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Indices of model performance\n\nAIC     |    AICc |     BIC | R2 (cond.) | R2 (marg.) |   ICC |  RMSE | Sigma | Log_loss | Score_log | Score_spherical\n----------------------------------------------------------------------------------------------------------------------\n582.024 | 582.048 | 596.771 |      0.946 |      0.066 | 0.943 | 0.213 | 1.000 |    0.145 |      -Inf |           0.021\n```\n:::\n\n```{.r .cell-code}\nprint(\"SANITY CHECK REPORTING\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"SANITY CHECK REPORTING\"\n```\n:::\n\n```{.r .cell-code}\nreport(mm.CrS)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPackage 'merDeriv' needs to be installed to compute confidence intervals\n  for random effect parameters.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nPackage 'merDeriv' needs to be installed to compute confidence intervals\n  for random effect parameters.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWe fitted a logistic mixed model (estimated using ML and Nelder-Mead optimizer) to predict accuracy with pretty_condition (formula: accuracy ~ pretty_condition). The model included subject as random effect (formula: ~1 | subject). The model's total explanatory power is substantial (conditional R2 = 0.95) and the part related to the fixed effects alone (marginal R2) is of 0.07. The model's intercept, corresponding to pretty_condition = control, is at -7.46 (95% CI [-9.81, -5.11], p < .001). Within this model:\n\n  - The effect of pretty condition [impasse] is statistically significant and positive (beta = 4.03, 95% CI [0.76, 7.29], p = 0.016; Std. beta = 4.03, 95% CI [0.76, 7.29])\n\nStandardized parameters were obtained by fitting the model on a standardized version of the dataset. 95% Confidence Intervals (CIs) and p-values were computed using the Wald approximation.\n```\n:::\n\n```{.r .cell-code}\n# se <- sqrt(diag(stats::vcov(m1)))\n# # table of estimates with 95% CI\n# (tab <- cbind(Est = fixef(m1), LL = fixef(m1) - 1.96 * se, UL = fixef(m1) + 1.96 *\n#     se))\n# (e <- exp(tab))\n\n#: PLOT\n\n#SJPLOT | MODEL | ODDS RATIO\n#library(sjPlot)\nplot_model(mm.CrS, type=\"std2\", vline.color = \"red\", \n           show.intercept = TRUE, \n           show.values = TRUE) +  \n  labs(title = \"Model Predicted Odds Ratio\",\n       subtitle = \"\",\n       x = \"Condition\")\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#SJPLOT | MODEL | PROBABILITIES\nplot_model(mm.CrS, type=\"pred\",\n           show.intercept = TRUE,\n           show.values = TRUE,\n           title = \"Model Predicted Probability of Accuracy\",\n           axis.title = c(\"Condition\",\"Probability of Accurate Response\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$pretty_condition\n```\n:::\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-56-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#GGEFFECTS | MODEL | PROBABILITIES\n# library(ggeffects)\n# ggeffect(model = mm.CrS) %>% plot()\n\n#SANITY CHECK SJPLOT\n# library(effects)\n# plot(allEffects(mm.CrS))\n```\n:::\n\n##### Diagnostics\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(mm.CrS)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbinned_residuals(mm.CrS)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWarning: Probably bad model fit. Only about 64% of the residuals are inside the error bounds.\n```\n:::\n:::\n\n##### Inference\n\nWe fit a mixed-effect binomial logistic regression model with random intercepts for subjects to investigate the effect of condition on test phase item accuracy. The model including a fixed effect of condition performed significantly better than an intercept-only baseline model (χ2(3): 4.98, p \\< 0.05). Consistent with the pattern of results for the first question only, across all test-phase items, being in the impasse condition increases the odds of a correct response by a factor of 5 over the control condition $e^{\\beta_1}$ = 5.11, 95% CI \\[1.17,22,36\\], p \\< 0.05.\n\n::: {.cell}\n\n```{.r .cell-code}\n# PRETTY TABLE SJPLOT\ntab_model(mm.CrS)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table style=\"border-collapse:collapse; border:none;\">\n<tr>\n<th style=\"border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm;  text-align:left; \">&nbsp;</th>\n<th colspan=\"3\" style=\"border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm; \">accuracy</th>\n</tr>\n<tr>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  text-align:left; \">Predictors</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">Odds Ratios</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">CI</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">p</td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; \">(Intercept)</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">0.00</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">0.00&nbsp;&ndash;&nbsp;0.01</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \"><strong>&lt;0.001</strong></td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; \">pretty condition<br>[impasse]</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">56.09</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">2.14&nbsp;&ndash;&nbsp;1472.88</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \"><strong>0.016</strong></td>\n</tr>\n<tr>\n<td colspan=\"4\" style=\"font-weight:bold; text-align:left; padding-top:.8em;\">Random Effects</td>\n</tr>\n\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm;\">&sigma;<sup>2</sup></td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left;\" colspan=\"3\">3.29</td>\n</tr>\n\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm;\">&tau;<sub>00</sub> <sub>subject</sub></td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left;\" colspan=\"3\">54.11</td>\n\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm;\">ICC</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left;\" colspan=\"3\">0.94</td>\n\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm;\">N <sub>subject</sub></td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left;\" colspan=\"3\">126</td>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm; border-top:1px solid;\">Observations</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left; border-top:1px solid;\" colspan=\"3\">1008</td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm;\">Marginal R<sup>2</sup> / Conditional R<sup>2</sup></td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left;\" colspan=\"3\">0.066 / 0.946</td>\n</tr>\n\n</table>\n\n`````\n:::\n:::\n\n## MIXED --- ORDINAL\n\n## MIXED --- CATEGORICAL\n\n::: {.cell}\n\n```{.r .cell-code}\n#BAYESIAN MIXED VERSION\n#df <- df_items %>% filter(q %nin% c(1,2,3,4,5,6,9)) %>% filter(term==\"spring18\")\n# mm1 <- brm( state ~ condition + (1|subject), data = df, family = \"categorical\", \n# file = \"analysis/models/sgc3a_brms_mixedcat_teststate.rds\" # cache model (can be removed)))\n# summary(mm1)\n# performance(mm1)\n# plot(mm1)\n# #report(mm1)\n# #check_posterior_predictions(mm1, draws=100)\n# # library(bayesplot)\n# library(bayestestR)\n# plot(rope(mm1))\n```\n:::\n\n## WIP UNKNOWN\n\n### Cummulative Ordinal (Bayesian) --- Equal Variance\n\nhttps://journals.sagepub.com/doi/full/10.1177/2515245918823199\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(brms)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: Rcpp\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading 'brms' package (version 2.17.0). Useful instructions\ncan be found by typing help('brms'). A more detailed introduction\nto the package is available through vignette('brms_overview').\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'brms'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:mosaic':\n\n    mm\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:gamlss':\n\n    cs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:VGAM':\n\n    acat, cratio, cumulative, dfrechet, dirichlet, exponential,\n    frechet, geometric, lognormal, multinomial, negbinomial, pfrechet,\n    qfrechet, rfrechet, s, sratio\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:ordinal':\n\n    ranef, VarCorr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:lme4':\n\n    ngrps\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:ggdist':\n\n    dstudent_t, pstudent_t, qstudent_t, rstudent_t\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:survival':\n\n    kidney\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:stats':\n\n    ar\n```\n:::\n\n```{.r .cell-code}\n#DEFINE DATA \ndf <- df_items %>% filter(q==1) %>% filter(mode ==\"lab-synch\")\n  \n#TODO: why is this probit instead of logit?\ncumord <- brm( formula = state ~ condition,\n               data = df,\n               family = cumulative(\"probit\"),\n               file = \"analysis/models/sgc3a_brms_cumord_q1state.rds\" # cache model (can be removed)\n)\n\nsummary(cumord)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: cumulative \n  Links: mu = probit; disc = identity \nFormula: state ~ condition \n   Data: df (Number of observations: 126) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nPopulation-Level Effects: \n                 Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept[1]         0.75      0.18     0.41     1.11 1.00     3054     2790\nIntercept[2]         1.22      0.19     0.85     1.60 1.00     3305     2732\nconditionimpasse     1.11      0.23     0.66     1.55 1.00     3192     2953\n\nFamily Specific Parameters: \n     Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ndisc     1.00      0.00     1.00     1.00   NA       NA       NA\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n:::\n\n```{.r .cell-code}\nconditional_effects(cumord, \"condition\", categorical = TRUE)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#SJPLOT\nplot_model(cumord)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-60-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(cumord)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-60-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(rope(cumord))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPossible multicollinearity between b_conditionimpasse and b_Intercept[2] (r = 0.76). This might lead to inappropriate results. See 'Details' in '?rope'.\n```\n:::\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-60-4.png){width=672}\n:::\n\n```{.r .cell-code}\n#REPORT\nreport(cumord)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPossible multicollinearity between b_conditionimpasse and b_Intercept[2] (r = 0.76). This might lead to inappropriate results. See 'Details' in '?rope'.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Predictions are treated as continuous variables in 'bayes_R2' which is\nlikely invalid for ordinal families.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nPossible multicollinearity between b_conditionimpasse and b_Intercept[2] (r = 0.76). This might lead to inappropriate results. See 'Details' in '?rope'.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe desired updates require recompiling the model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCompiling Stan program...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTrying to compile a simple C file\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning /Library/Frameworks/R.framework/Resources/bin/R CMD SHLIB foo.c\nclang -mmacosx-version-min=10.13 -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG   -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/Rcpp/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/unsupported\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/BH/include\" -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/src/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppParallel/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/rstan/include\" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DBOOST_NO_AUTO_PTR  -include '/Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/stan/math/prim/mat/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1   -I/usr/local/include   -fPIC  -Wall -g -O2  -c foo.c -o foo.o\nIn file included from <built-in>:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/stan/math/prim/mat/fun/Eigen.hpp:13:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Dense:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Core:88:\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/src/Core/util/Macros.h:628:1: error: unknown type name 'namespace'\nnamespace Eigen {\n^\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/src/Core/util/Macros.h:628:16: error: expected ';' after top level declarator\nnamespace Eigen {\n               ^\n               ;\nIn file included from <built-in>:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/stan/math/prim/mat/fun/Eigen.hpp:13:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Dense:1:\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Core:96:10: fatal error: 'complex' file not found\n#include <complex>\n         ^~~~~~~~~\n3 errors generated.\nmake: *** [foo.o] Error 1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nStart sampling\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nSAMPLING FOR MODEL '3a68d5685b54180e73711b90f350310a' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 5.9e-05 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.59 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 1: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 0.10493 seconds (Warm-up)\nChain 1:                0.112528 seconds (Sampling)\nChain 1:                0.217458 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL '3a68d5685b54180e73711b90f350310a' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 2.3e-05 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.23 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 2: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 0.110388 seconds (Warm-up)\nChain 2:                0.108933 seconds (Sampling)\nChain 2:                0.219321 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL '3a68d5685b54180e73711b90f350310a' NOW (CHAIN 3).\nChain 3: Rejecting initial value:\nChain 3:   Log probability evaluates to log(0), i.e. negative infinity.\nChain 3:   Stan can't start sampling from this initial value.\nChain 3: \nChain 3: Gradient evaluation took 2.4e-05 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.24 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 3: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 0.104081 seconds (Warm-up)\nChain 3:                0.104063 seconds (Sampling)\nChain 3:                0.208144 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL '3a68d5685b54180e73711b90f350310a' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 2.2e-05 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.22 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 4: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 0.108595 seconds (Warm-up)\nChain 4:                0.093594 seconds (Sampling)\nChain 4:                0.202189 seconds (Total)\nChain 4: \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nPossible multicollinearity between b_conditionimpasse and b_Intercept[2] (r = 0.76). This might lead to inappropriate results. See 'Details' in '?rope'.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Predictions are treated as continuous variables in 'bayes_R2' which is likely invalid for ordinal families.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWe fitted a Bayesian probit model (estimated using MCMC sampling with 4 chains of 2000 iterations and a warmup of 1000) to predict state with condition (formula: state ~ condition). Priors over parameters were set as uniform (location = , scale = ), student_t (location = 0.00, scale = 2.50), student_t (location = 0.00, scale = 2.50), student_t (location = 0.00, scale = 2.50), uniform (location = , scale = ), student_t (location = 0.00, scale = 2.50), student_t (location = 0.00, scale = 2.50), student_t (location = 0.00, scale = 2.50) and uniform (location = , scale = ) distributions. The model's explanatory power is moderate (R2 = 0.18, 95% CI [0.08, 0.28]).  Within this model:\n\n  - The effect of b Intercept[1] (Median = 0.74, 95% CI [0.41, 1.11]) has a 100.00% probability of being positive (> 0), 100.00% of being significant (> 0.05), and 99.58% of being large (> 0.30). The estimation successfully converged (Rhat = 1.001) and the indices are reliable (ESS = 3139)\n  - The effect of b Intercept[2] (Median = 1.22, 95% CI [0.85, 1.60]) has a 100.00% probability of being positive (> 0), 100.00% of being significant (> 0.05), and 100.00% of being large (> 0.30). The estimation successfully converged (Rhat = 1.001) and the indices are reliable (ESS = 3040)\n  - The effect of b conditionimpasse (Median = 1.11, 95% CI [0.66, 1.55]) has a 100.00% probability of being positive (> 0), 100.00% of being significant (> 0.05), and 99.98% of being large (> 0.30). The estimation successfully converged (Rhat = 1.002) and the indices are reliable (ESS = 3314)\n\nFollowing the Sequential Effect eXistence and sIgnificance Testing (SEXIT) framework, we report the median of the posterior distribution and its 95% CI (Highest Density Interval), along the probability of direction (pd), the probability of significance and the probability of being large. The thresholds beyond which the effect is considered as significant (i.e., non-negligible) and large are |0.05| and |0.30|. Convergence and stability of the Bayesian sampling has been assessed using R-hat, which should be below 1.01 (Vehtari et al., 2019), and Effective Sample Size (ESS), which should be greater than 1000 (Burkner, 2017).\n```\n:::\n\n```{.r .cell-code}\n# ord_cum %>%\n#   spread_draws(b_Intercept, r_condition[condition,]) %>%\n#   mutate(condition_mean = b_Intercept + r_condition) %>%\n#   ggplot(aes(y = condition, x = condition_mean)) +\n#   stat_halfeye()\n\n# performance(cumord)\n# plot(cumord)\n```\n:::\n\n### Cummulative Ordinal (Bayesian) --- Unequal Variance\n\nhttps://journals.sagepub.com/doi/full/10.1177/2515245918823199\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(brms)\n\n\n#DEFINE DATA \ndf <- df_items %>% filter(q==1) %>% filter(mode ==\"lab-synch\")\n  \n#TODO: why is this probit instead of logit?\nu.cumord <- brm( \n  formula = bf(state ~ condition) +\n               lf(disc ~ 0 + condition, cmc = FALSE),\n               data = df,\n               family = cumulative(\"probit\"),\n               file = \"analysis/models/sgc3a_brms_ucumord_q1state.rds\" # cache model (can be removed)\n)\n\nsummary(u.cumord)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There were 97 divergent transitions after warmup. Increasing\nadapt_delta above 0.8 may help. See http://mc-stan.org/misc/\nwarnings.html#divergent-transitions-after-warmup\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: cumulative \n  Links: mu = probit; disc = log \nFormula: state ~ condition \n         disc ~ 0 + condition\n   Data: df (Number of observations: 126) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nPopulation-Level Effects: \n                      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS\nIntercept[1]              0.84      0.18     0.48     1.19 1.00      960\nIntercept[2]              1.01      0.19     0.64     1.39 1.01      908\nconditionimpasse          0.96      0.19     0.60     1.32 1.01      954\ndisc_conditionimpasse     1.52      0.61     0.43     2.68 1.02      313\n                      Tail_ESS\nIntercept[1]              1061\nIntercept[2]               764\nconditionimpasse           848\ndisc_conditionimpasse      227\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n:::\n\n```{.r .cell-code}\nconditional_effects(u.cumord, \"condition\", categorical = TRUE)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#SJPLOT\nplot_model(u.cumord)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-61-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(u.cumord)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-61-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(rope(u.cumord))\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-61-4.png){width=672}\n:::\n\n```{.r .cell-code}\n#REPORT\nreport(u.cumord)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Predictions are treated as continuous variables in 'bayes_R2' which is\nlikely invalid for ordinal families.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe desired updates require recompiling the model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCompiling Stan program...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTrying to compile a simple C file\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning /Library/Frameworks/R.framework/Resources/bin/R CMD SHLIB foo.c\nclang -mmacosx-version-min=10.13 -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG   -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/Rcpp/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/unsupported\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/BH/include\" -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/src/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppParallel/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/rstan/include\" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DBOOST_NO_AUTO_PTR  -include '/Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/stan/math/prim/mat/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1   -I/usr/local/include   -fPIC  -Wall -g -O2  -c foo.c -o foo.o\nIn file included from <built-in>:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/stan/math/prim/mat/fun/Eigen.hpp:13:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Dense:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Core:88:\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/src/Core/util/Macros.h:628:1: error: unknown type name 'namespace'\nnamespace Eigen {\n^\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/src/Core/util/Macros.h:628:16: error: expected ';' after top level declarator\nnamespace Eigen {\n               ^\n               ;\nIn file included from <built-in>:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/stan/math/prim/mat/fun/Eigen.hpp:13:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Dense:1:\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Core:96:10: fatal error: 'complex' file not found\n#include <complex>\n         ^~~~~~~~~\n3 errors generated.\nmake: *** [foo.o] Error 1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nStart sampling\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nSAMPLING FOR MODEL '8051b427c5dbb5a865c588f34a9e215a' NOW (CHAIN 1).\nChain 1: Rejecting initial value:\nChain 1:   Log probability evaluates to log(0), i.e. negative infinity.\nChain 1:   Stan can't start sampling from this initial value.\nChain 1: Rejecting initial value:\nChain 1:   Log probability evaluates to log(0), i.e. negative infinity.\nChain 1:   Stan can't start sampling from this initial value.\nChain 1: \nChain 1: Gradient evaluation took 6.8e-05 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.68 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 1: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 0.42362 seconds (Warm-up)\nChain 1:                0.151596 seconds (Sampling)\nChain 1:                0.575216 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL '8051b427c5dbb5a865c588f34a9e215a' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 2.6e-05 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.26 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 2: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 0.419343 seconds (Warm-up)\nChain 2:                0.37644 seconds (Sampling)\nChain 2:                0.795783 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL '8051b427c5dbb5a865c588f34a9e215a' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 2.6e-05 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.26 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 3: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 0.398055 seconds (Warm-up)\nChain 3:                0.388631 seconds (Sampling)\nChain 3:                0.786686 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL '8051b427c5dbb5a865c588f34a9e215a' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 3.1e-05 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.31 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 4: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 0.399437 seconds (Warm-up)\nChain 4:                0.464814 seconds (Sampling)\nChain 4:                0.864251 seconds (Total)\nChain 4: \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Predictions are treated as continuous variables in 'bayes_R2' which is likely invalid for ordinal families.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWe fitted a Bayesian probit model (estimated using MCMC sampling with 4 chains of 2000 iterations and a warmup of 1000) to predict state with condition (formula: state ~ condition). Priors over parameters were set as uniform (location = , scale = ), student_t (location = 0.00, scale = 2.50), student_t (location = 0.00, scale = 2.50), student_t (location = 0.00, scale = 2.50), uniform (location = , scale = ), student_t (location = 0.00, scale = 2.50), student_t (location = 0.00, scale = 2.50), student_t (location = 0.00, scale = 2.50), uniform (location = , scale = ) and uniform (location = , scale = ) distributions. The model's explanatory power is moderate (R2 = 0.17, 95% CI [0.07, 0.26]).  Within this model:\n\n  - The effect of b Intercept[1] (Median = 0.84, 95% CI [0.48, 1.19]) has a 100.00% probability of being positive (> 0), 100.00% of being significant (> 0.05), and 99.98% of being large (> 0.30). The estimation successfully converged (Rhat = 1.000) but the indices are unreliable (ESS = 953)\n  - The effect of b Intercept[2] (Median = 1.01, 95% CI [0.64, 1.39]) has a 100.00% probability of being positive (> 0), 100.00% of being significant (> 0.05), and 100.00% of being large (> 0.30). The estimation successfully converged (Rhat = 1.008) but the indices are unreliable (ESS = 298)\n  - The effect of b conditionimpasse (Median = 0.95, 95% CI [0.60, 1.32]) has a 100.00% probability of being positive (> 0), 100.00% of being significant (> 0.05), and 100.00% of being large (> 0.30). The estimation successfully converged (Rhat = 1.000) but the indices are unreliable (ESS = 952)\n  - The effect of b disc conditionimpasse (Median = 1.48, 95% CI [0.43, 2.68]) has a 99.80% probability of being positive (> 0), 99.72% of being significant (> 0.05), and 98.67% of being large (> 0.30). The estimation successfully converged (Rhat = 1.000) but the indices are unreliable (ESS = 905)\n\nFollowing the Sequential Effect eXistence and sIgnificance Testing (SEXIT) framework, we report the median of the posterior distribution and its 95% CI (Highest Density Interval), along the probability of direction (pd), the probability of significance and the probability of being large. The thresholds beyond which the effect is considered as significant (i.e., non-negligible) and large are |0.05| and |0.30|. Convergence and stability of the Bayesian sampling has been assessed using R-hat, which should be below 1.01 (Vehtari et al., 2019), and Effective Sample Size (ESS), which should be greater than 1000 (Burkner, 2017).\n```\n:::\n\n```{.r .cell-code}\n# ord_cum %>%\n#   spread_draws(b_Intercept, r_condition[condition,]) %>%\n#   mutate(condition_mean = b_Intercept + r_condition) %>%\n#   ggplot(aes(y = condition, x = condition_mean)) +\n#   stat_halfeye()\n\n# performance(cumord)\n# plot(cumord)\n```\n:::\n\nIn brms, the parameter related to latent variances is called disc (short for \"discrimination\"), following conventions in item response theory. Note that disc is not the variance itself, but the inverse of the standard deviation, s. That is, s = 1/disc. Further, because disc must be strictly positive, it is by default modeled on the log scale.\n\n### Adjacent-Category Ordinal (Bayesian)\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df_items %>% filter(q==1) %>% filter(mode ==\"lab-synch\")\n\n\n# # To specify an adjacent-category model, we use family = acat() instead of family = cumulative() as an argument to the brm() function. Then, to model condition with possible category-specific effects, we wrap this variable in cs() in the model’s formula:\n\nadjcat <- brm( formula = state ~ cs(condition),\n               data = df,\n               family = acat(\"probit\"),\n               file = \"analysis/models/sgc3a_brms_adjcat_q1state.rds\" # cache model (can be removed)\n)\n \nsummary(adjcat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: acat \n  Links: mu = probit; disc = identity \nFormula: state ~ cs(condition) \n   Data: df (Number of observations: 126) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nPopulation-Level Effects: \n                    Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept[1]            1.99      0.37     1.38     2.80 1.00      637      822\nIntercept[2]           -1.26      0.47    -2.29    -0.41 1.00      644      812\nconditionimpasse[1]     1.92      0.42     1.18     2.79 1.00      656      827\nconditionimpasse[2]    -1.02      0.50    -2.08    -0.14 1.00      652      732\n\nFamily Specific Parameters: \n     Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ndisc     1.00      0.00     1.00     1.00   NA       NA       NA\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n:::\n\n```{.r .cell-code}\nconditional_effects(cumord, \"condition\", categorical = TRUE)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n\n```{.r .cell-code}\nconditional_effects(adjcat, \"condition\", categorical = TRUE)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-62-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#WHICH IS BETTER? cumulative or adjacent?\nplot(compare_performance(cumord, adjcat))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Predictions are treated as continuous variables in 'bayes_R2' which is\nlikely invalid for ordinal families.\n\nWarning: Predictions are treated as continuous variables in 'bayes_R2' which is\nlikely invalid for ordinal families.\n```\n:::\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-62-3.png){width=672}\n:::\n\n```{.r .cell-code}\ncompare_performance(cumord, adjcat)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Predictions are treated as continuous variables in 'bayes_R2' which is\nlikely invalid for ordinal families.\n\nWarning: Predictions are treated as continuous variables in 'bayes_R2' which is\nlikely invalid for ordinal families.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# Comparison of Model Performance Indices\n\nName   |   Model |     ELPD | ELPD_SE |   LOOIC | LOOIC weights | LOOIC_SE |    WAIC | WAIC weights |    R2\n-----------------------------------------------------------------------------------------------------------\ncumord | brmsfit | -113.628 |   7.485 | 227.256 |         0.062 |   14.970 | 227.249 |        0.002 | 0.179\nadjcat | brmsfit | -107.434 |   7.111 | 214.868 |         0.938 |   14.223 | 214.718 |        0.998 | 0.169\n```\n:::\n\n```{.r .cell-code}\n# #TIDYBAYES VISUALIZATION\n# library(tidybayes)\n# adjcat %>%\n#   spread_draws(b_Intercept, r_condition[condition,]) %>%\n#   mutate(condition_mean = b_Intercept + r_condition) %>%\n#   ggplot(aes(y = condition, x = condition_mean)) +\n#   stat_halfeye()\n\nplot(cumord)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-62-4.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(adjcat)\n```\n\n::: {.cell-output-display}\n![](modelling_ref_files/figure-html/unnamed-chunk-62-5.png){width=672}\n:::\n\n```{.r .cell-code}\nreport(adjcat)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPossible multicollinearity between bcs_conditionimpasse[1] and b_Intercept[2] (r = 0.81), bcs_conditionimpasse[2] and bcs_conditionimpasse[1] (r = 0.86). This might lead to inappropriate results. See 'Details' in '?rope'.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Predictions are treated as continuous variables in 'bayes_R2' which is\nlikely invalid for ordinal families.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nPossible multicollinearity between bcs_conditionimpasse[1] and b_Intercept[2] (r = 0.81), bcs_conditionimpasse[2] and bcs_conditionimpasse[1] (r = 0.86). This might lead to inappropriate results. See 'Details' in '?rope'.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe desired updates require recompiling the model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCompiling Stan program...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTrying to compile a simple C file\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning /Library/Frameworks/R.framework/Resources/bin/R CMD SHLIB foo.c\nclang -mmacosx-version-min=10.13 -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG   -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/Rcpp/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/unsupported\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/BH/include\" -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/src/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppParallel/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/rstan/include\" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DBOOST_NO_AUTO_PTR  -include '/Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/stan/math/prim/mat/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1   -I/usr/local/include   -fPIC  -Wall -g -O2  -c foo.c -o foo.o\nIn file included from <built-in>:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/stan/math/prim/mat/fun/Eigen.hpp:13:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Dense:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Core:88:\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/src/Core/util/Macros.h:628:1: error: unknown type name 'namespace'\nnamespace Eigen {\n^\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/src/Core/util/Macros.h:628:16: error: expected ';' after top level declarator\nnamespace Eigen {\n               ^\n               ;\nIn file included from <built-in>:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/stan/math/prim/mat/fun/Eigen.hpp:13:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Dense:1:\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Core:96:10: fatal error: 'complex' file not found\n#include <complex>\n         ^~~~~~~~~\n3 errors generated.\nmake: *** [foo.o] Error 1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nStart sampling\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nSAMPLING FOR MODEL 'ebf0c4c0e51ade2b00ca4594e215d3ad' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 0.000553 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 5.53 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 1: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 1.47723 seconds (Warm-up)\nChain 1:                1.73124 seconds (Sampling)\nChain 1:                3.20846 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL 'ebf0c4c0e51ade2b00ca4594e215d3ad' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 9.8e-05 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.98 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 2: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 1.45574 seconds (Warm-up)\nChain 2:                1.74882 seconds (Sampling)\nChain 2:                3.20456 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL 'ebf0c4c0e51ade2b00ca4594e215d3ad' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 0.000105 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 1.05 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 3: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 1.46164 seconds (Warm-up)\nChain 3:                1.42022 seconds (Sampling)\nChain 3:                2.88186 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL 'ebf0c4c0e51ade2b00ca4594e215d3ad' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 0.0001 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 1 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 4: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 1.42222 seconds (Warm-up)\nChain 4:                1.37809 seconds (Sampling)\nChain 4:                2.80032 seconds (Total)\nChain 4: \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nPossible multicollinearity between bcs_conditionimpasse[1] and b_Intercept[2] (r = 0.83), bcs_conditionimpasse[2] and bcs_conditionimpasse[1] (r = 0.87). This might lead to inappropriate results. See 'Details' in '?rope'.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Predictions are treated as continuous variables in 'bayes_R2' which is likely invalid for ordinal families.\n\nWarning: 'data_findcols()' is deprecated and will be removed in a future update.\n  Its usage is discouraged. Please use 'data_find()' instead.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWe fitted a Bayesian probit model (estimated using MCMC sampling with 4 chains of 2000 iterations and a warmup of 1000) to predict state with condition (formula: state ~ cs(condition)). Priors over parameters were set as uniform (location = , scale = ), student_t (location = 0.00, scale = 2.50), student_t (location = 0.00, scale = 2.50), student_t (location = 0.00, scale = 2.50), uniform (location = , scale = ), student_t (location = 0.00, scale = 2.50), student_t (location = 0.00, scale = 2.50), student_t (location = 0.00, scale = 2.50), NA (NA) and NA (NA) distributions. The model's explanatory power is moderate (R2 = 0.17, 95% CI [0.07, 0.27]).  Within this model:\n\n  - The effect of b Intercept[1] (Median = 1.94, 95% CI [1.38, 2.80]) has a 100.00% probability of being positive (> 0), 100.00% of being significant (> 0.05), and 100.00% of being large (> 0.30). The estimation successfully converged (Rhat = 1.004) but the indices are unreliable (ESS = 598)\n  - The effect of b Intercept[2] (Median = -1.22, 95% CI [-2.29, -0.41]) has a 99.85% probability of being negative (< 0), 99.85% of being significant (< -0.05), and 98.90% of being large (< -0.30). The estimation successfully converged (Rhat = 1.002) but the indices are unreliable (ESS = 612)\n  - The effect of bcs conditionimpasse[1] (Median = 1.88, 95% CI [1.18, 2.79]) has a 100.00% probability of being positive (> 0), 100.00% of being significant (> 0.05), and 100.00% of being large (> 0.30). The estimation successfully converged (Rhat = 1.004) but the indices are unreliable (ESS = 617)\n  - The effect of bcs conditionimpasse[2] (Median = -0.99, 95% CI [-2.08, -0.14]) has a 99.12% probability of being negative (< 0), 98.70% of being significant (< -0.05), and 93.70% of being large (< -0.30). The estimation successfully converged (Rhat = 1.003) but the indices are unreliable (ESS = 620)\n\nFollowing the Sequential Effect eXistence and sIgnificance Testing (SEXIT) framework, we report the median of the posterior distribution and its 95% CI (Highest Density Interval), along the probability of direction (pd), the probability of significance and the probability of being large. The thresholds beyond which the effect is considered as significant (i.e., non-negligible) and large are |0.05| and |0.30|. Convergence and stability of the Bayesian sampling has been assessed using R-hat, which should be below 1.01 (Vehtari et al., 2019), and Effective Sample Size (ESS), which should be greater than 1000 (Burkner, 2017).\n```\n:::\n:::\n\n*Converges, but estimates are unreliable?*",
    "supporting": [
      "modelling_ref_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}