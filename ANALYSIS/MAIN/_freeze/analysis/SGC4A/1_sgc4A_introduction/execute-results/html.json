{
  "hash": "39cf2480dd89d5eaa61508457d8a930f",
  "result": {
    "markdown": "---\n# title: 'Introduction' \nsubtitle: 'Study SGC4A | 1 Introduction'\n---\n\n\\newpage\n\n# Introduction {#sec-SGC3A-introduction}\n\nIn Study 4A we explore ...\n\n::: {#fig-manipulation layout-ncol=\"2\"}\n:::\n\n**TODO To try the study yourself:**\n\n-   [control condition](https://limitless-plains-85018.herokuapp.com/?study=SGC3A&condition=111&session=WEB-DEMO)\n-   [impasse condition](https://limitless-plains-85018.herokuapp.com/?study=SGC3A&condition=121&session=WEB-DEMO)\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(kableExtra)\n\n# dir = \"/Users/amyfox/Sites/RESEARCH/SGCâ€”Scaffolding Graph Comprehension/SGC-X/ANALYSIS/MAIN\"\n# setwd(dir)\n\n#IMPORT DATA \ndf_subjects <- read_rds('analysis/SGC4A/data/0-study-level/sgc4a_participants.rds')\n```\n:::\n\nTODO UPDATE CONDITION NAMES\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle = \"Participants by Condition\"\ncols = c(\"COND1\",\"COND1\",\"COND3\",\"COND4\",\"TOTAL\")\ncont <- table(df_subjects$term, df_subjects$condition)\ncont %>%  addmargins() %>% kbl(caption = title, col.names = cols) %>% kable_classic()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; margin-left: auto; margin-right: auto;'>\n<caption>Participants by Condition</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:right;\"> COND1 </th>\n   <th style=\"text-align:right;\"> COND1 </th>\n   <th style=\"text-align:right;\"> COND3 </th>\n   <th style=\"text-align:right;\"> COND4 </th>\n   <th style=\"text-align:right;\"> TOTAL </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> winter22 </td>\n   <td style=\"text-align:right;\"> 88 </td>\n   <td style=\"text-align:right;\"> 86 </td>\n   <td style=\"text-align:right;\"> 88 </td>\n   <td style=\"text-align:right;\"> 98 </td>\n   <td style=\"text-align:right;\"> 360 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Sum </td>\n   <td style=\"text-align:right;\"> 88 </td>\n   <td style=\"text-align:right;\"> 86 </td>\n   <td style=\"text-align:right;\"> 88 </td>\n   <td style=\"text-align:right;\"> 98 </td>\n   <td style=\"text-align:right;\"> 360 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n### TODO Hypotheses\n\n**Experimental Hypothesis:**\n\n-   H1...\n\n**Null Hypothesis:** *....*\n\n**Exploratory Questions**\n\n-   \n\n-   \n\n## METHODS\n\n### Design\n\nWe employed a mixed design with 1 between-subjects factor with 2 levels (Scaffold: control, impasse) and 15 items (within-subjects factor).\n\nIndependent Variables:\n\n-   B-S (TODO: control,impasse)\n-   W-S (Item x 15)\n\nDependent Variables:\n\n-   Response Accuracy : Is the response triangular-correct?\n-   Response Interpretation : (derived) With which interpretation of the graph is the subject's response on an individual question consistent?\n-   Response Latency : Time from stimulus onset to clicking 'Submit' button: time in (s)\n\n### Materials\n\nStimuli consisted of a series of 15 graph comprehension questions, each testing a different combination of time interval relations, to be read from a Triangular-Model graph. @fig-sample. The list of questions can be found [here](static/stimuli/sgcx_questions.csv).\n\n![Sample Question (Q=1) for Graph Comprehension Task](static/stimuli/sample_task.png){#fig-sample fig-alt=\"picture of multiple select question on the left, accompanied by a triangular model graph on the right\" fig-align=\"center\"}\n\nCONDITIONS ...\n\n### Procedure\n\nParticipants completed the study via a web-browser.\n\n\\(1\\) Upon starting, they submitted informed consent, before reading task instructions.\n\n\\(2\\) Participants were introduced to a scenario in which they were to play the role of a project manager, scheduling shifts for a group of employees. The schedule of the employees was presented in a TriangularModel (TM) graph, and they would be answering question about the schedule.\n\n\\(3\\) Then participants completed an experimental block of 15 items.\n\n(3A) The first five items in the task are defined as the SCAFFOLDING block. In the IMPASSE condition, the first five questions included an IMPASSE problem state. For participants in the CONTROL condition, the dataset was structure such that there was always an available 'orthogonal answer' for the first 5 questions.\n\n(3B) The remaining 10 items are defined as the TESTING block. In both conditions, these questions were not structured as impasse (i.e. contained an available orthogonal answer)\n\n\\(4\\) Following the experimental block, participants answered a free-response question about their strategy for reading the graph, followed by a demographic questionnaire and debrief.\n\n### Sample\n\nData were collected by convenience sample of a university subject pool ... ANALYSIS\n\n### Data Preparation\n\nData were collected via a custom web application and stored in a NoSQL database. The following exclusion criteria were applied during data cleaning:\n\n-   completion status : \"success\" ; subject must have finished all parts of the study, including demographic questionnaire\n-   session ID: \\[in list\\] ; subject must have been assigned to valid data collection session (discard testing and piloting data)\n-   browser interaction violations \\< 3; subject must have fewer than 3 violations of non-allowed browser interactions (i.e. resizing window, leaving browser tab or leaving fullscreen mode)\n-   self-rated effort \\> 2; subjects who reported, \"not trying hard/rushing through questions\" or \"started out trying hard but giving up at some point\" were excluded from analysis.\n-   attention check ==TRUE ; subjects who failed to answer a mid-study attention check question (Graph Comprehension Task Question #6) are excluded\n\n#### Wrangling {#sec-SGC3A-harmonize}\n\n| Pre-Requisite              | Followed By         |\n|----------------------------|---------------------|\n| winter2022_clean_sgc4a.Rmd | 2_sgc3A_scoring.qmd |\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) #ALL THE THINGS\nlibrary(codebook) #data dictionary\n\n#set some output options\nlibrary(dplyr, warn.conflicts = FALSE)\noptions(dplyr.summarise.inform = FALSE)\noptions(scipen=1, digits=3)\n```\n:::\n\nThe underlying data structure of the stimulus web application changed across the data collection period, resulting in slightly different data files (i.e. columns are not named consistently). In this section, we combine the files from each data collection period into a single *harmonized* data file for analysis (one for participants, one for items).\n\n#### Participants\n\nFirst we import participant-level data, selecting only the columns relevant for analysis. The result is a single data frame `df_subjects` containing one row for each subject (across all periods). Note that we *are not* discarding any *response* data. Rather, we discard columns that are automatically recorded by the stimulus web application and help the application run.\n\n*Note that we discard some columns representing scores calculated in the stimulus engine. These scores were calculated differently across collection periods, and so we discard them and recalculate scores in the next analysis notebook. No raw data (responses and response times) are discarded, only algorithmically-derived scores for the responses.*\n\n::: {.cell}\n\n```{.r .cell-code}\n#IMPORT PARTICIPANT DATA\n\n#import file\ndf_subjects <- read_rds(\"analysis/SGC4A/data/0-study-level/sgc4a_participants.rds\") #use RDS file as it contains metadata\n\n#SAVE METADATA FROM WINTER, but no rows \n# df_subjects <- df_subjects_winter22 %>% filter(condition=='X') %>% select(\n#   subject,condition,term,mode,\n#   gender,age,language, schoolyear, country,\n#   effort,difficulty,confidence,enjoyment,other,\n#   totaltime_m,absolute_score\n# )\n\n#save 'explanation' columns from winter22, which is actually a response to a free response item (Q16); was recorded with item_level data in old webapp\ndf_q16 <- df_subjects %>% \n  select(subject, condition, term , mode, explanation) %>% \n  mutate(\n    q = 16,\n    response = explanation\n  ) %>% select(-explanation)\n\n#reduce data collected using NEW webapp to useful columns\ndf_subjects <- df_subjects %>% \n  mutate(score = absolute_score) %>% \n  #select only columns we'll be analyzing, discard others\n  dplyr::select( subject, condition, term, mode, \n                 #demographics\n                 gender, age, language, schoolyear, country,\n                 #effort survey\n                 effort, difficulty, confidence, enjoyment, \n                 #explanations\n                 other,disability,\n                 #response characteristics\n                 totaltime_m, absolute_score)\n\n\neffort_labels <- c(\"I tried my best on each question\", \"I tried my best on most questions\")\n\n#set factors\ndf_subjects <- df_subjects %>% \n  #refactor factors\n  mutate (\n    subject = factor(subject),\n    condition = factor(condition),\n    term = factor(term),\n    mode = factor(mode),\n    gender = factor(gender),\n    schoolyear = factor(schoolyear, levels=c(\"First\",\"Second\",\"Third\",\"Fourth\",\"Fifth\",\"Other\"))\n  )\n```\n:::\n\n#### Items\n\nNext we import item-level data from each data collection period, selecting only the columns relevant for analysis. The result is a single data frame `df_items` containing one row for each *graph comprehension task question* (qs=15) (across all periods). A second data frame `df_freeresponse` contains one row for each free response strategy question (last question posed to participants in Winter2022) Note that we *do not* discard any *response* data. Rather, we *do* discard several columns representing accuracy scores for responses that were calculated in the stimulus engine. These scores were calculated differently across collection periods, and so we discard them and recalculate scores in the next analysis notebook. Original response data are always preserved.\n\n::: {.cell}\n\n```{.r .cell-code}\n#read datafiles\ndf_items <- read_rds(\"analysis/SGC4A/data/0-study-level/sgc4a_items.rds\") #use RDS file as it contains metadata\n\n#reduce data collected using new webapp\ndf_items <- df_items %>% \n  select(subject, condition, term, mode, question, q, answer, correct, rt_s) %>% #unfactor before combine\n  mutate(\n    subject = as.character(subject),\n    condition = as.character(condition),\n    term = as.character(term),\n    mode = as.character(mode),\n    q = as.integer(q),\n    correct = as.logical(correct)\n  ) %>% \n  mutate(\n    response = str_remove_all(as.character(answer), \",\"),\n    num_o = str_length(response)\n  )\n```\n:::\n\n#### Validation\n\nNext, we validate that we have the complete number of item-level records based on the number of subject-level records\n\n::: {.cell}\n\n```{.r .cell-code}\n#the number of items should be equal to 15 x the number of subjects\nnrow(df_items) == 15* nrow(df_subjects) #TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#each subject should have 15 items\ndf_items %>% group_by(subject) %>% summarise(n = n()) %>% filter(n != 15) %>% nrow() == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n#### Export\n\nFinally, we export the (session-harmonized) data for analysis, as CSVs, and .RDS (includes metadata)\n\n::: {.cell}\n\n```{.r .cell-code}\n#SAVE FILES\nwrite.csv(df_subjects,\"analysis/SGC4A/data/1-study-level/sgc4a_participants.csv\", row.names = FALSE)\nwrite.csv(df_items,\"analysis/SGC4A/data/1-study-level/sgc4a_items.csv\", row.names = FALSE)\nwrite.csv(df_q16,\"analysis/SGC4A/data/1-study-level/sgc4a_freeresponse.csv\", row.names = FALSE)\n\n#SAVE R Data Structures \n#export R DATA STRUCTURES (include codebook metadata)\nrio::export(df_subjects, \"analysis/SGC4A/data/1-study-level/sgc4a_participants.rds\") # to R data structure file\nrio::export(df_items, \"analysis/SGC4A/data/1-study-level/sgc4a_items.rds\") # to R data structure file\n```\n:::\n\n### Response Scoring\n\nBecause the graph comprehension task utilizes a Multiple-Response (MR) format (rather than simple multiple choice), the raw response data (the combination of answer options selected) for each question first need to be assigned a score. Approaches to scoring MR data and score transformations are derived in [Section -@sec-SGC3A-scoring].\n\n### Hypothesis Testing\n\nExperimental hypotheses are tested in [Section -@sec-SGC4A-hypotesting].\n\n### Exploratory Analysis\n\nFurther data analyses are documented in [Section -@sec-SGC4A-exploration].\n\n## RESOURCES\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur ... 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] codebook_0.9.2   kableExtra_1.3.4 forcats_0.5.1    stringr_1.4.0   \n [5] dplyr_1.0.9      purrr_0.3.4      readr_2.1.2      tidyr_1.2.0     \n [9] tibble_3.1.7     ggplot2_3.3.6    tidyverse_1.3.1 \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.8.3      svglite_2.1.0     lubridate_1.8.0   assertthat_0.2.1 \n [5] digest_0.6.29     utf8_1.2.2        R6_2.5.1          cellranger_1.1.0 \n [9] backports_1.4.1   reprex_2.0.1      labelled_2.9.1    evaluate_0.15    \n[13] httr_1.4.3        highr_0.9         pillar_1.7.0      rlang_1.0.3      \n[17] curl_4.3.2        readxl_1.4.0      data.table_1.14.2 rstudioapi_0.13  \n[21] rmarkdown_2.14    webshot_0.5.3     foreign_0.8-82    htmlwidgets_1.5.4\n[25] munsell_0.5.0     broom_0.8.0       compiler_4.2.1    modelr_0.1.8     \n[29] xfun_0.31         pkgconfig_2.0.3   systemfonts_1.0.4 htmltools_0.5.2  \n[33] tidyselect_1.1.2  rio_0.5.29        fansi_1.0.3       viridisLite_0.4.0\n[37] crayon_1.5.1      tzdb_0.3.0        dbplyr_2.2.1      withr_2.5.0      \n[41] grid_4.2.1        jsonlite_1.8.0    gtable_0.3.0      lifecycle_1.0.1  \n[45] DBI_1.1.3         magrittr_2.0.3    scales_1.2.0      zip_2.2.0        \n[49] cli_3.3.0         stringi_1.7.6     fs_1.5.2          xml2_1.3.3       \n[53] ellipsis_0.3.2    generics_0.1.2    vctrs_0.4.1       openxlsx_4.2.5   \n[57] tools_4.2.1       glue_1.6.2        hms_1.1.1         fastmap_1.1.0    \n[61] yaml_2.3.5        colorspace_2.0-3  rvest_1.0.2       knitr_1.39       \n[65] haven_2.5.0      \n```\n:::\n:::",
    "supporting": [
      "1_sgc4A_introduction_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}