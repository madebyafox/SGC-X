{
  "hash": "548e9cbb74b80bf267b820cfbd75a778",
  "result": {
    "markdown": "---\nsubtitle: 'Study SGC4D | 1 Introduction'\n---\n\n\\newpage\n\n# Introduction {#sec-SGC4D-introduction}\n\n**In Study 4D we explore the extent to which the Y-XIS and SHAPE of the triangle of the graph influence how a reader interprets its underlying coordinate system.**\n\n+---------------------------------------+-----------------------------------------------------------------------------------------------------------------+\n| ![](/analysis/utils/img/111.png)      | **Orthogonal-Isosceles**\\                                                                                       |\n|                                       | Demo: [111](https://limitless-plains-85018.herokuapp.com/?study=SGC4D&condition=111&session=WEB-DEMO)           |\n+---------------------------------------+-----------------------------------------------------------------------------------------------------------------+\n| ![](/analysis/utils/img/11111112.png) | ) \\| \\| **Orthogonal-Equilateral**\\                                                                             |\n|                                       | Demo: [11111112](https://limitless-plains-85018.herokuapp.com/?study=SGC4D&condition=11111112&session=WEB-DEMO) |\n+---------------------------------------+-----------------------------------------------------------------------------------------------------------------+\n| ![](/analysis/utils/img/113.png)      | **Triangular-Isosceles**\\                                                                                       |\n|                                       | Demo: [113](https://limitless-plains-85018.herokuapp.com/?study=SGC4D&condition=113&session=WEB-DEMO)\\          |\n+---------------------------------------+-----------------------------------------------------------------------------------------------------------------+\n| ![](/analysis/utils/img/11311112.png) | **Triangular-Equilateral**\\                                                                                     |\n|                                       | Demo: [11311112](https://limitless-plains-85018.herokuapp.com/?study=SGC4D&condition=11311112&session=WEB-DEMO) |\n+---------------------------------------+-----------------------------------------------------------------------------------------------------------------+\n\n: **SGC4D Study Conditions** {tbl-colwidths=\"\\[40,60\\]\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(codebook) #data dictionary\nlibrary(kableExtra) #tables\nlibrary(tidyverse) #ALL THE THINGS\n\n#set some output options\nlibrary(dplyr, warn.conflicts = FALSE)\noptions(dplyr.summarise.inform = FALSE)\noptions(scipen=1, digits=3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# HACK WD FOR LOCAL RUNNING?\n# imac = \"/Users/amyraefox/Code/SGC-Scaffolding_Graph_Comprehension/SGC-X/ANALYSIS/MAIN\"\n# mbp = \"/Users/amyfox/Sites/RESEARCH/SGCâ€”Scaffolding Graph Comprehension/SGC-X/ANALYSIS/MAIN\"\n# setwd(mbp)\n\n#IMPORT DATA \ndf_subjects <- read_rds('analysis/SGC4D/data/1-study-level/sgc4d_participants.rds')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle = \"Participants by Condition\"\ncols = c(\"Condition\",\"n\")\ncont <- table(df_subjects$pretty_condition)\ncont %>%  addmargins() %>% kbl(caption = title, col.names = cols) %>% kable_classic()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; margin-left: auto; margin-right: auto;'>\n<caption>Participants by Condition</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Condition </th>\n   <th style=\"text-align:right;\"> n </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Orth-Isosceles </td>\n   <td style=\"text-align:right;\"> 62 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Tri-Isosceles </td>\n   <td style=\"text-align:right;\"> 152 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Orth-Equilateral </td>\n   <td style=\"text-align:right;\"> 57 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Tri-Equilateral </td>\n   <td style=\"text-align:right;\"> 60 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Sum </td>\n   <td style=\"text-align:right;\"> 331 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n**Experimental Hypothesis:**\\\n\n\n## TODO METHODS\n\n### TODO Design\n\nWe employed a mixed design with 1 between-subjects factor with 4 levels (Graphical Framework: ORTH-FULL, ORTH-SPARSE, ORTH-GRID, TRI-SPARSE) and 15 items (within-subjects factor).\n\nIndependent Variables:\n\n-   B-S (Graphical Framework: ORTH-FULL, ORTH-SPARSE, ORTH-GRID, TRI-SPARSE)\n-   W-S (Item x 15)\n\nDependent Variables:\n\n-   Response Accuracy : Is the response triangular-correct?\n-   Response Interpretation : (derived) With which interpretation of the graph is the subject's response on an individual question consistent?\n-   Response Latency : Time from stimulus onset to clicking 'Submit' button: time in (s)\n\n### Materials\n\nStimuli consisted of a series of 15 graph comprehension questions, each testing a different combination of time interval relations, to be read from a Triangular-Model graph. @fig-sample. The list of questions can be found [here](utils/stimuli/sgcx_questions.csv).\n\n![Sample Question (Q=1) for Graph Comprehension Task](/analysis/utils/img/sample_graphComprehensionTask.png){#fig-sample fig-alt=\"picture of multiple select question on the left, accompanied by a triangular model graph on the right\" fig-align=\"center\"}\n\n### Procedure\n\nParticipants completed the study via a web-browser.\n\n\\(1\\) Upon starting, they submitted informed consent, before reading task instructions.\n\n\\(2\\) Participants were introduced to a scenario in which they were to play the role of a project manager, scheduling shifts for a group of employees. The schedule of the employees was presented in a TriangularModel (TM) graph, and they would be answering question about the schedule.\n\n\\(3\\) Then participants completed an experimental block of 15 items : the Graph Comprehension Task\n\n\\(4\\) Following the experimental block, participants answered a free-response question about their strategy for reading the graph, followed by a demographic questionnaire and debrief.\n\n### Sample\n\nData were collected by convenience sample of a university subject pool during the winter of 2022. Participants accessed the study via a web browser (asynchronously). The stimulus application required the participant stay in full-screen mode for the entirety of the study.\n\n## ANALYSIS\n\n### Data Preparation {#sec-SGC4D-harmonize}\n\nData were collected via a custom web application and stored in a NoSQL database. The following exclusion criteria were applied during data cleaning:\n\n-   completion status : \"success\" ; subject must have finished all parts of the study, including demographic questionnaire\n-   session ID: \\[in list\\] ; subject must have been assigned to valid data collection session (discard testing and piloting data)\n-   browser interaction violations \\< 3; subject must have fewer than 3 violations of non-allowed browser interactions (i.e. resizing window, leaving browser tab or leaving fullscreen mode)\n-   self-rated effort \\> 2; subjects who reported, \"not trying hard/rushing through questions\" or \"started out trying hard but giving up at some point\" were excluded from analysis.\n-   attention check ==TRUE ; subjects who failed to answer a mid-study attention check question (Graph Comprehension Task Question #6) are excluded\n\n\nThe underlying data structure of the stimulus web application changed across the data collection period, resulting in slightly different data files (i.e. columns are not named consistently). In this section, we combine the files from each data collection period into a single *harmonized* data file for analysis (one for participants, one for items).\n\n#### Participants\n\nFirst we import participant-level data, selecting only the columns relevant for analysis. The result is a single data frame `df_subjects` containing one row for each subject (across all periods). Note that we *are not* discarding any *response* data. Rather, we discard columns that are automatically recorded by the stimulus web application and help the application run.\n\n*Note that we discard some columns representing scores calculated in the stimulus engine. These scores were calculated differently across collection periods, and so we discard them and recalculate scores in the next analysis notebook. No raw data (responses and response times) are discarded, only algorithmically-derived scores for the responses.*\n\n\n**NOTE: Data for the isocelese traingular conditions were originally run under the study code SGC4A, under a different naming scheme. **\n\n::: {.cell}\n\n```{.r .cell-code}\n#IMPORT PARTICIPANT DATA FOR CONDITIONS 111 AND 113 \n\n#set datafiles\nfall17 <- \"analysis/SGC4A/data/0-session-level/fall17_sgc4a_participants.csv\"\nspring18 <- \"analysis/SGC4A/data/0-session-level/spring18_sgc4a_participants.csv\"\nwinter22 <- \"analysis/SGC4A/data/0-session-level/winter22_sgc4a_participants.rds\"\nsummer22 <- \"analysis/SGC4A/data/0-session-level/su22_sgc4a_participants.rds\"\nsummer4d <- \"analysis/SGC4D/data/0-session-level/sgc4d_participants.rds\"\n\n#LOAD DATAFILES\n#read datafiles, set mode and term\ndf_subjects_fall17 <- read_csv(fall17) %>% mutate(mode = \"lab-synch\", term = \"fall17\") %>% filter(condition %in% c(111,113))\ndf_subjects_spring18 <- read_csv(spring18) %>% mutate(mode = \"lab-synch\", term = \"spring18\") %>% filter(condition %in% c(111,113))\ndf_subjects_winter22 <- read_rds(winter22) %>% filter(condition %in% c(111,113))#use RDS file as it contains metadata\ndf_subjects_summer22 <- read_rds(summer22) %>% filter(condition %in% c(111,113))#use RDS file as it contains metadata\ndf_subjects_summer4d <- read_rds(summer4d) \n\n#SAVE METADATA FROM WINTER AS TEMPLATE, but no rows \ndf_subjects <- df_subjects_summer22 %>% filter(condition=='X') %>% \n  dplyr::select(\n  subject,condition,pretty_condition, term,mode,\n  gender,age,language, schoolyear, country, disability,\n  effort, difficulty, confidence, enjoyment,other,\n  totaltime_m, \n  # absolute_score, #drop absolute score as this is re-scored [though should be the same]\n  #exploratory factors\n  violations, browser, width, height\n)\n\n#reduce data collected using OLD webapp to useful columns\ndf_subjects_before <- rbind(df_subjects_fall17, df_subjects_spring18) %>% \n  #rename and summarize some columns\n  mutate(\n    totaltime_m = totalTime / 1000 / 60,  \n    absolute_score = triangular_score,\n    language = native_language,\n    gender = sex,\n    schoolyear = year) %>% \n  #create placeholders for cols not collected until NEW webapp [for later rbind]\n  mutate(\n    condition = as.factor(condition),\n    pretty_condition = \"NULL\",\n    effort = \"NULL\",\n    difficulty = \"NULL\",\n    confidence = \"NULL\",\n    enjoyment = \"NULL\",\n    other = \"NULL\",\n    disability = \"NULL\",\n    violations = \"NULL\",\n    browser = \"NULL\",\n    width = \"NULL\",\n    height = \"NULL\"\n  ) %>% \n  #select only columns we'll be analyzing, discard others\n  dplyr::select(subject, condition, pretty_condition, term, mode, \n                #demographics\n                gender, age, language, schoolyear, country,\n                #placeholder effort survey\n                effort, difficulty, confidence, enjoyment, \n                #placeholder misc \n                other, disability,\n                #response characteristics\n                totaltime_m, \n                # absolute_score, #drop absolute score as this is re-scored [though should be the same]\n                #exploratory factors\n                violations, browser, width, height)\n\n\n\n#save 'explanation' columns from winter22, which is actually a response to a free response item (Q16); was recorded with item_level data in old webapp\ndf_winter22_q16 <- df_subjects_winter22 %>% \n  dplyr::select(subject, condition, pretty_condition, term , mode, explanation) %>% \n  mutate(\n    q = 16,\n    response = explanation\n  ) %>% dplyr::select(-explanation)\n\n#reduce data collected using NEW webapp to useful columns\ndf_subjects_winter22 <- df_subjects_winter22 %>% \n  mutate(score = absolute_score) %>% \n  #select only columns we'll be analyzing, discard others\n  dplyr::select( subject, condition, pretty_condition, term, mode, \n                 #demographics\n                 gender, age, language, schoolyear, country,\n                 #effort survey\n                 effort, difficulty, confidence, enjoyment, \n                 #explanations\n                 other,disability,\n                 #response characteristics\n                 totaltime_m, \n                 # absolute_score, #drop absolute score as this is re-scored [though should be the same]\n                 #exploratory factors \n                 violations, browser, width, height)\n\n#reduce data collected using NEW webapp to useful columns\ndf_subjects_summer22 <- df_subjects_summer22 %>% \n  mutate(score = absolute_score) %>% \n  #select only columns we'll be analyzing, discard others\n  dplyr::select( subject, condition, pretty_condition, term, mode, \n                 #demographics\n                 gender, age, language, schoolyear, country,\n                 #effort survey\n                 effort, difficulty, confidence, enjoyment, \n                 #explanations\n                 other,disability,\n                 #response characteristics\n                 totaltime_m, \n                 # absolute_score, #drop absolute score as this is re-scored [though should be the same]\n                 #exploratory factors \n                 violations, browser, width, height)\n\n#reduce data collected using NEW webapp to useful columns\ndf_subjects_summer4d <- df_subjects_summer4d %>% \n  mutate(score = absolute_score) %>% \n  #select only columns we'll be analyzing, discard others\n  dplyr::select( subject, condition, pretty_condition, term, mode, \n                 #demographics\n                 gender, age, language, schoolyear, country,\n                 #effort survey\n                 effort, difficulty, confidence, enjoyment, \n                 #explanations\n                 other,disability,\n                 #response characteristics\n                 totaltime_m, \n                 # absolute_score, #drop absolute score as this is re-scored [though should be the same]\n                 #exploratory factors \n                 violations, browser, width, height)\n\neffort_labels <- c(\"I tried my best on each question\", \"I tried my best on most questions\")\n\n#compare dataframe columns\n# janitor::compare_df_cols(df_subjects, df_subjects_winter22, df_subjects_before)\n\n#combine ADD DATAFRAMES\ndf_subjects <- rbind(df_subjects, df_subjects_winter22, df_subjects_summer22, df_subjects_before, df_subjects_summer4d) %>% \n  #refactor factors\n  mutate (\n    subject = factor(subject),\n    condition = factor(condition),\n    pretty_mode = recode_factor(mode, \"lab-synch\" = \"laboratory\", \"asynch\" =  \"online-replication\"),\n    term = factor(term, levels= c(\"fall17\",\"spring18\",\"fall21\",\"winter22\",\"summer22\")),\n    mode = factor(mode, levels=c(\"lab-synch\",\"asynch\")),\n    gender = factor(gender),\n    schoolyear = factor(schoolyear, levels=c(\"First\",\"Second\",\"Third\",\"Fourth\",\"Fifth\",\"Other\"))\n  )\n\n#FIX METADATA\n#Add metadata for columns that lost it [factors, for some reason!]\nvar_label(df_subjects$subject) <- \"ID of subject (randomly assigned in stimulus app).\"\nvar_label(df_subjects$condition) <- \"ID indicates randomly assigned condition (111 -> control, 121 -> impasse).\"\nvar_label(df_subjects$term) <- \"indicates if session was run with experimenter present or asynchronously\"\nvar_label(df_subjects$mode) <- \"indicates mode in which the participant completed the study\"\nvar_label(df_subjects$gender) <- \"What is your gender identity?\"\nvar_label(df_subjects$schoolyear) <- \"What is your year in school?\"\n\n#REFACTOR CONDITIONS\ndf_subjects <- df_subjects %>% mutate(\n     pretty_condition = recode_factor(condition,\n                                   \"111\" = \"Orth-Isosceles\",\n                                   \"113\" = \"Tri-Isosceles\",\n                                   \"11111112\" = \"Orth-Equilateral\",\n                                   \"11311112\" = \"Tri-Equilateral\"\n    ),\n    pretty_mode = recode_factor(mode, \"lab-synch\" = \"laboratory\", \"asynch\" =  \"online-replication\")\n) \n\n#CLEANUP\nrm(df_subjects_fall17, df_subjects_spring18, df_subjects_winter22,df_subjects_before, df_subjects_summer22, df_subjects_summer4d)\nrm(fall17,spring18,winter22, summer22, summer4d)\n\n\n\n### Power\n# \n# library(lme4)\n# library(simr)\n# \n# table(df_subjects$condition)\n# table(df_items$condition)\n# \n# winter <- df_subjects %>% filter(term==\"winter22\")\n# table(winter$condition)\n# \n# other <- df_subjects %>% filter(condition != \"113\")\n# test <- rbind(other,winter)\n# table(test$condition)\n# \n# df_i <- df_items %>% filter( subject %in% test$subject) %>% mutate(\n#   subject =as.factor(subject),\n#   q = as.factor(q),\n#   AXES = recode_factor(condition, \n#             \"111\"=\"orth\", \n#             \"113\"=\"tri\",\n#             \"11111112\" = \"orth\",\n#             \"11311112\" = \"tri\"\n#             ),\n#   SHAPE = recode_factor(condition, \n#             \"111\"=\"iso\", \n#             \"113\"=\"iso\",\n#             \"11111112\" = \"equal\",\n#             \"11311112\" = \"equal\"\n#             )\n# )\n```\n:::\n\n#### Items\n\nNext we import item-level data from each data collection period, selecting only the columns relevant for analysis. The result is a single data frame `df_items` containing one row for each *graph comprehension task question* (qs=15) (across all periods). A second data frame `df_freeresponse` contains one row for each free response strategy question (last question posed to participants in Winter2022) Note that we *do not* discard any *response* data. Rather, we *do* discard several columns representing accuracy scores for responses that were calculated in the stimulus engine. These scores were calculated differently across collection periods, and so we discard them and recalculate scores in the next analysis notebook. Original response data are always preserved.\n\n::: {.cell}\n\n```{.r .cell-code}\n# HACK WD FOR LOCAL RUNNING?\n# imac = \"/Users/amyraefox/Code/SGC-Scaffolding_Graph_Comprehension/SGC-X/ANALYSIS/MAIN\"\n# # #mbp = \"/Users/amyfox/Sites/RESEARCH/SGCâ€”Scaffolding Graph Comprehension/SGC-X/ANALYSIS/MAIN\"\n# setwd(imac)\n\n#set datafiles\nfall17 <- \"analysis/SGC4D/data/0-session-level/fall17_sgc4a_blocks.csv\"\nspring18 <- \"analysis/SGC4D/data/0-session-level/spring18_sgc4a_blocks.csv\"\nwinter22 <- \"analysis/SGC4D/data/0-session-level/winter22_sgc4a_items.rds\"\nsummer22 <- \"analysis/SGC4D/data/0-session-level/su22_sgc4a_items.rds\"\nsummer4d <- \"analysis/SGC4D/data/0-session-level/sgc4d_items.rds\"\n\n#read datafiles, set mode and term\ndf_items_fall17 <- read_csv(fall17) %>% mutate(mode = \"lab-synch\", term = \"fall17\") %>% filter(condition %in% c(111,113))\ndf_items_spring18 <- read_csv(spring18) %>% mutate(mode = \"lab-synch\", term = \"spring18\")%>% filter(condition %in% c(111,113))\ndf_items_winter22 <- read_rds(winter22) %>% filter(condition %in% c(111,113))#use RDS file as it contains metadata\ndf_items_summer22 <- read_rds(summer22)%>% filter(condition %in% c(111,113)) #use RDS file as it contains metadata\ndf_items_summer4d <- read_rds(summer4d) #use RDS file as it contains metadata\n\n#get mapping being question # and interval relation the question tests, that is encoded only in the winter22 data files\nmap_relations <- df_items_winter22 %>% group_by(q) %>% dplyr::select(q,relation) %>% unique()\n\n#SAVE METADATA FROM WINTER, but no rows \ndf_items <- df_items_winter22 %>% filter(condition=='X') %>% dplyr::select(\n  subject,condition,term,mode,\n  question, q, answer, correct, rt_s\n) \n\n#reduce data collected using old webapp\ndf_items_before <- rbind(df_items_fall17, df_items_spring18) %>% \n  mutate(rt_s = rt / 1000, correct = as.logical(correct)) %>% \n  dplyr::select(subject, condition, term, mode, question, q, answer, correct, rt_s) \n  \n#reduce data collected using new webapp\ndf_items_winter22 <- df_items_winter22 %>% \n  dplyr::select(subject, condition, term, mode, question, q, answer, correct, rt_s) %>% #unfactor before combine\n  mutate(\n    subject = as.character(subject),\n    condition = as.character(condition),\n    term = as.character(term),\n    mode = as.character(mode),\n    q = as.integer(q),\n    correct = as.logical(correct)\n  )\n\ndf_items_summer22 <- df_items_summer22 %>% \n  dplyr::select(subject, condition, term, mode, question, q, answer, correct, rt_s) %>% #unfactor before combine\n  mutate(\n    subject = as.character(subject),\n    condition = as.character(condition),\n    term = as.character(term),\n    mode = as.character(mode),\n    q = as.integer(q),\n    correct = as.logical(correct)\n  )\n\ndf_items_summer4d <- df_items_summer4d %>% \n  dplyr::select(subject, condition, term, mode, question, q, answer, correct, rt_s) %>% #unfactor before combine\n  mutate(\n    subject = as.character(subject),\n    condition = as.character(condition),\n    term = as.character(term),\n    mode = as.character(mode),\n    q = as.integer(q),\n    correct = as.logical(correct)\n  )\n\n\n#combine dataframes from old and new webapps\ndf_items <- rbind(df_items, df_items_winter22, df_items_summer22, df_items_before, df_items_summer4d) %>% \n  #refactorize columns\n  mutate(\n    subject = factor(subject),\n    condition = factor(condition),\n    term = factor(term, levels= c(\"fall17\",\"spring18\",\"fall21\",\"winter22\",\"summer22\")),\n    mode = factor(mode, levels=c(\"lab-synch\",\"asynch\")),\n    q = as.integer(q)) %>% \n  #rename answer column to RESPONSE \n  rename(response = answer) %>% \n  #remove all commas and make as character string\n  mutate(\n    response = str_remove_all(as.character(response), \",\"),\n    num_o = str_length(response)\n  ) %>% \n  # handle NA values (why are some empty responses blank and others NA?) \n  mutate(\n    response = replace_na(response, \"\"),\n    num_o = replace_na(num_o, 0)\n  )\n\n\n#FIX METADATA\n#Add metadata for columns that lost it [factors, for some reason!]\nvar_label(df_items$subject) <- \"ID of subject (randomly assigned in stimulus app).\"\nvar_label(df_items$condition) <- \"ID indicates randomly assigned condition (111 -> control, 121 -> impasse).\"\nvar_label(df_items$term) <- \"indicates if session was run with experimenter present or asynchronously\"\nvar_label(df_items$mode) <- \"indicates mode in which the participant completed the study\"\nvar_label(df_items$q) <- \"Question Number (in order)\"\nvar_label(df_items$correct) <- \"Is the response (strictly) correct? [dichotomous scoring]\"\nvar_label(df_items$response) <- \"options (datapoints) selected by the subject\"\nvar_label(df_items$num_o) <- \"number of options selected by the subject\"\n\n#HANDLE FREE RESPONSE QUESTION #16 \n#save `free response` Q#16 in its own dataframe\ndf_freeresponse <- df_items %>% filter(q == 16) %>% dplyr::select(-question,-correct,-rt_s,-num_o)\n#add data from wi22 [stored on subject data]\ndf_winter22_q16 <- df_winter22_q16 %>% dplyr::select(-pretty_condition)\ndf_freeresponse <- rbind(df_freeresponse, df_winter22_q16)\n#add question description\ndf_freeresponse <- df_freeresponse %>% mutate(\n    question = \"Please describe how to determine what event(s) start at 12pm?\",\n    response = as.character(response) #doesn't need to be factor\n  ) \n#remove 'free response' Q#16 from df_items\ndf_items <- df_items %>% filter (q != 16)\n\n#REFACTOR CONDITIONS\ndf_items <- df_items %>% mutate(\n  pretty_condition = recode_factor(condition,\n                                   \"111\" = \"Orth-Isosceles\",\n                                   \"113\" = \"Tri-Isosceles\",\n                                   \"11111112\" = \"Orth-Equilateral\",\n                                   \"11311112\" = \"Tri-Equilateral\"\n    ),\n    pretty_mode = recode_factor(mode, \"lab-synch\" = \"laboratory\", \"asynch\" =  \"online-replication\")\n) \n\n#CLEANUP\nrm(df_items_fall17, df_items_spring18, df_items_winter22, df_items_before, df_winter22_q16, df_items_summer22, df_items_summer4d)\nrm(fall17,spring18,winter22, map_relations, summer22, summer4d)\n```\n:::\n\n#### Validation\n\nNext, we validate that we have the complete number of item-level records based on the number of subject-level records\n\n::: {.cell}\n\n```{.r .cell-code}\n#the number of items should be equal to 15 x the number of subjects\nnrow(df_items) == 15* nrow(df_subjects) #TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#each subject should have 15 items\ndf_items %>% group_by(subject) %>% summarise(n = n()) %>% filter(n != 15) %>% nrow() == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n#### Export\n\nFinally, we export the (session-harmonized) data for analysis, as CSVs, and .RDS (includes metadata)\n\n::: {.cell}\n\n```{.r .cell-code}\n# HACK WD FOR LOCAL RUNNING?\n# imac = \"/Users/amyraefox/Code/SGC-Scaffolding_Graph_Comprehension/SGC-X/ANALYSIS/MAIN\"\n# # mbp = \"/Users/amyfox/Sites/RESEARCH/SGCâ€”Scaffolding Graph Comprehension/SGC-X/ANALYSIS/MAIN\"\n# setwd(imac)\n\n#SAVE FILES\nwrite.csv(df_subjects,\"analysis/SGC4D/data/1-study-level/sgc4d_participants.csv\", row.names = FALSE)\nwrite.csv(df_items,\"analysis/SGC4D/data/1-study-level/sgc4d_items.csv\", row.names = FALSE)\nwrite.csv(df_freeresponse,\"analysis/SGC4D/data/1-study-level/sgc4d_freeresponse.csv\", row.names = FALSE)\n\n#SAVE R Data Structures \n#export R DATA STRUCTURES (include codebook metadata)\nrio::export(df_subjects, \"analysis/SGC4D/data/1-study-level/sgc4d_participants.rds\") # to R data structure file\nrio::export(df_items, \"analysis/SGC4D/data/1-study-level/sgc4d_items.rds\") # to R data structure file\n```\n:::\n\n## RESOURCES\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur ... 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] forcats_0.5.1    stringr_1.4.0    dplyr_1.0.9      purrr_0.3.4     \n [5] readr_2.1.2      tidyr_1.2.0      tibble_3.1.7     ggplot2_3.3.6   \n [9] tidyverse_1.3.1  kableExtra_1.3.4 codebook_0.9.2  \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.8.3      svglite_2.1.0     lubridate_1.8.0   assertthat_0.2.1 \n [5] digest_0.6.29     utf8_1.2.2        R6_2.5.1          cellranger_1.1.0 \n [9] backports_1.4.1   reprex_2.0.1      labelled_2.9.1    evaluate_0.15    \n[13] httr_1.4.3        highr_0.9         pillar_1.7.0      rlang_1.0.3      \n[17] curl_4.3.2        readxl_1.4.0      data.table_1.14.2 rstudioapi_0.13  \n[21] rmarkdown_2.14    webshot_0.5.3     foreign_0.8-82    htmlwidgets_1.5.4\n[25] bit_4.0.4         munsell_0.5.0     broom_0.8.0       compiler_4.2.1   \n[29] modelr_0.1.8      xfun_0.31         pkgconfig_2.0.3   systemfonts_1.0.4\n[33] htmltools_0.5.2   tidyselect_1.1.2  rio_0.5.29        fansi_1.0.3      \n[37] viridisLite_0.4.0 crayon_1.5.1      tzdb_0.3.0        dbplyr_2.2.1     \n[41] withr_2.5.0       grid_4.2.1        jsonlite_1.8.0    gtable_0.3.0     \n[45] lifecycle_1.0.1   DBI_1.1.3         magrittr_2.0.3    scales_1.2.0     \n[49] zip_2.2.0         cli_3.3.0         stringi_1.7.6     vroom_1.5.7      \n[53] fs_1.5.2          xml2_1.3.3        ellipsis_0.3.2    generics_0.1.2   \n[57] vctrs_0.4.1       openxlsx_4.2.5    tools_4.2.1       bit64_4.0.5      \n[61] glue_1.6.2        hms_1.1.1         parallel_4.2.1    fastmap_1.1.0    \n[65] yaml_2.3.5        colorspace_2.0-3  rvest_1.0.2       knitr_1.39       \n[69] haven_2.5.0      \n```\n:::\n:::",
    "supporting": [
      "1_sgc4D_introduction_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}