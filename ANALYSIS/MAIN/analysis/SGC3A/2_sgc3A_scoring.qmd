---
# title: 'Response Scoring'
subtitle: 'Study SGC3A | 2 Response Scoring'
# author: 'Amy Rae Fox'
# always_allow_html: true  
# header-includes:
#    - \usepackage{amsmath}
# output:
#   html_document:
#     theme: yeti
#     code_folding: hide
#     fig_caption: yes
#     number_sections: yes
#     toc: yes
#     toc_depth: 4
#     toc_float:
#       collapsed: no
#       smooth_scroll: yes
#   pdf_document: 
#     toc: true
#     toc_depth: 3
#     latex_engine: xelatex
# font-family: "DejaVu Sans"
# mainfont: "DejaVu Sans"
---

\newpage

**TODO**

-   mine for inline TODOs
-   finish item level response exploration

# Response Scoring {#sec-SGC3A-scoring}

```{r}
#| label: SETUP
#| echo : true
#| warning : false
#| message : false


# knitr::opts_chunk$set(eval = FALSE) #knit w/o execution
options(scipen=1, digits=3)

library(tidyverse) #ALL THE THINGS
library(kableExtra) #printing tables 
library(ggformula) #quick graphs
library(ggpubr) #better graphs

```

**THIS NOTEBOOK IS INCOMPLETE**

*The purpose of this notebook is to score (assign a measure of accuracy) to response data for the SGC_3A study. This is required because the question type on the graph comprehension task used a 'Multiple Response' (MR) question design. Here, we evaluate different approaches to scoring multiple response questions, and transform raw item responses (e.g. boxes ABC are checked) to a measure of response accuracy. (Warning: this notebook takes several minutes to execute.)*

| Pre-Requisite         | Followed By             |
|-----------------------|-------------------------|
| 1_sgc3A_harmonize.qmd | 3_sgc3A_exploration.qmd |

## MULTIPLE RESPONSE SCORING

The *graph comprehension task* of study SGC 3A presents readers with a graph, a question, and a series of checkboxes. Participants are instructed to use the graph to answer the question, and respond by selecting all the checkboxes that apply, where each checkbox corresponds to a datapoint in the graph.

![**Figure 1. Sample Graph Comprehension (Question \# 6)**](static/img/sample_graphComprehensionTask.png)

In the psychology and education literatures on Tests & Measures, the format of this type of question is referred to as Multiple Response (MR), (also: Multiple Choice Multiple Answer (MCMA) and Multiple Answer Multiple Choice (MAMC)). It has a number of properties that make it different from traditional Single Answer Multiple Choice (SAMC) questions, where the respondent marks a single response from a number of options. In particular, there are a number of very different ways that MAMC questions can be *scored*.

In tranditional SAMC format questions, one point is given for selecting the option designated as correct, and zero points given for marking any of the alternative (i.e. distractor) options. Individual response options on MAMC questions, however might be partially correct ($i$), while responses on other answer options within the same item might be incorrect ($n – i$). In MR, it is not obvious how to allocate points when the respondent marks a true-correct option (i.e. options that *should* be selected, denoted $p$), as well as one or more false-correct options (i.e. options that *should not* be selected, denoted $q$). Should partial credit be awarded? If so, are options that respondents false-selected and false-unselected items equally penalized?

@schmidtRelationExamineesTrue2021 performed a systematic literature review of publications proposing MAMC (or equivalent) scoring schemes, ultimately synthesizing over 80 sources into 27 distinct scoring approaches. Upon reviewing the benefits of trade-offs of each approach, for this study we choose utilize two of the schemes: **dichotomous scoring** ( @schmidtRelationExamineesTrue2021 scheme #1), and **partial scoring** $[-1/q,0, +1/p]$ ( @schmidtRelationExamineesTrue2021 scheme #26), as well as a scaled **discriminant score** that leverages partial scoring to discriminate between strategy-specific patterns of response.

### Response Encoding

First, we note that the question type evaluated by @schmidtRelationExamineesTrue2021 is referred to as *Multiple True-False* (MTF), a variant of MAMC where respondents are presented with a question (stem) and series of response options with True/False (e.g. radio buttons) for each. Depending on the implementation of the underlying instrument, it may or may not be possible for respondents to *not respond* to a particular option (i.e. leave the item 'blank'). Although MTF questions have a different underlying implementation (and potentially different psychometric properties) they are identical in their mathematical properties; that is, responses to a MAMC question of 'select all that apply' can be coded as a series of T/F responses to each response option

![**Figure 2. SAMC (vs) MAMC (vs) MTF**](static/img/MAMC-MTF.png){#fig-ItemTypes}

In this example (@fig-ItemTypes), we see an example of a question with four response options ($n=4$) in each question type. In the **SAMC** approach (at left), there are four possible responses, given explicitly by the response options (respondent can select only one) $(\text{number of possible responses} = n)$. With only four possible responses, we cannot entirely discriminate between all combinations of the underlying response variants we might be interested in, and must always choose an 'ideal subset' of possible distractors to present as response options. In the MAMC (middle) and MTF (at right), the *same number of response options* ($n=4$) yield a much greater number $(\text{number of possible responses} = 2^{n})$. We can also see the equivalence between a MAMC and MTF format questions with the same response options. Options the respondent *selects* in MAMC are can be coded as T, and options they leave *unselected* can be coded as F. Thus, for response options (ABCD), a response of \[AB\] can also be encoded as \[TTFF\].

### Scoring Schemes

In the sections that follow, we use the terminology:

**Properties of the Stimulus-Question**

```{=tex}
\begin{align}
n &= \text{number of response options} \\  
  &= p + q \\ 
  p &= \text{number of true-select options (i.e. should be selected)} \\
  q &= \text{number of true-unselect options (i.e. should not be selected)} 
\end{align}
```
**Properties of the Subject's Response**

```{=tex}
\begin{align} 
i &= \text{number of options in correct state}, (0 ≤ i ≤ n) \\ 
f &= \text{resulting score} 
\end{align}
```
#### Dichotomous Scoring {#sec-absolute-scoring}

**Dichotomous Scoring** is the strictest scoring scheme, where a response only receives points if it is *exactly* correct, meaning the respondent includes *only correct-select* options, and does select any additional (i.e. incorrect-select) options that should not be selected. This is also known as *all or nothing scoring*, and importantly, it ignores any partial knowledge that a participant may be expressing through their choice of options. They may select some but not all of the correct-select options, and one or more but not all of the correct-unselect items, but receive the same score as a respondent selects none of the correct-select options, or all of the correct-unselect options. In this sense, dichotomous scoring tells us *only* about perfect knowledge, and ignores any indication of partial knowledge the respondent may be indicating through their selection of response options.

**In Dichotomous Scoring**

-   score for the question is either 0 or 1
-   full credit is only given if all responses are correct; otherwise no credit
-   does not account for *partial knowledge*. - with increasing number of response options, scoring becomes stricter as each statement must be marked correctly.

The algorithm for **dichotomous scoring** is given by:

\begin{gather*}
f = 
\begin{cases}
  1, \text{if } i = n \\    
  0, \text{otherwise}    
\end{cases}
\end{gather*} \text{where } 0 \le i \le n

```{r}
f_dichom <- function(i, n) {
 
  # print(paste("i is :",i," n is:",n)) 
  
  #if (n == 0 ) return error 
  ifelse( (n == 0), print("ERROR n can't be 0"), "")
  
  #if (i > n ) return error 
  ifelse( (i > n), print("i n can't > n"), "")
  
  #if (i==n) return 1, else 0
  return (ifelse( (i==n), 1 , 0))
 
}
```

#### Partial Scoring \[-1/n, +1/n\]

**Partial Scoring** refers to a class or scoring schemes that award the respondent partial credit depending on pattern of options they select. @schmidtRelationExamineesTrue2021 identify twenty-six different partial credit scoring schemes in the literature, varying in the range of possible scores, and the relative weighting of incorrectly selected (vs) incorrectly unselected options.

A particularly elegant approach to partial scoring is referred to as the $[-1/n, +1/n]$ approach ( @schmidtRelationExamineesTrue2021 #17). This approach is appealing in the context of SGC3A, because it: (1) takes into account all information provided by the respondent: the pattern of what the select, and choose not to select.

**In Partial Scoring** $[-1/n, +1/n]$:

-   Scores range from \[-1, +1\]
-   One point is awarded if all options are *correct*
-   One point point is subtracted if all options are *incorrect*.
-   Intermediate results are credited as fractions accordingly ($+1/n$ for each correct, $-1/n$ for each incorrect)
-   This results in *at chance performance* (i.e. half of the given options marked correctly), being awarded 0 points are awarded

This scoring is more consistent with the motivating theory that Triangular Graph readers start out with an incorrect (i.e. orthogonal, cartesian) interpretation of the coordinate system, and transition to a correct (i.e. triangular) interpretation. But the first step in making this transition is realizing the cartesian interpretation *is incorrect*, which may yield blank responses where the respondent is essentially saying, 'there is no correct answer to this question'.

@schmidtRelationExamineesTrue2021 describe the *Partial* ${[-1/n, +1/n]}$ scoring scheme as the *only* scoring method (of the 27 described) where respondents' scoring results can be interpreted as a percentage of their true knowledge. One important drawback of this method is that a respondent may receive credit (a great deal of credit, depending on the number of answer options n) even if she did not select *any* options. In the case (such as ours) where there are many more response options $n$ than there are options meant to be selected $p$, this partial scoring algorithm poses a challenge because the respondent can achieve an almost completely perfect score by selecting a small number of options that should not be selected.

The algorithm for **partial scoring**$[-1/n, +1/n]$ is given by:

```{=tex}
\begin{align}
f &= (1/n * i) - (1/n * (n-i)) \\
&= (2i - n)/{n} 
\end{align}
```
```{r}
f_partialN <- function(i, n) {

# print(paste("i is :",i," n is:",n))

#if(n==0) return error
ifelse((n==0),print("ERROR: n should not be 0"),"")

#if(i >n ) return error
ifelse((i > n),print("ERROR: i CANNOT BE GREATER THAN n"),"")

return ((2*i - n) / n) 
}
```

#### Partial Scoring \[-1/q, +1/p\]

One drawback of the Partial Scoring $[-1/n, +1/n]$ approach is that treats the choice to select, and choice to not select options as equally indicative of the respondent's understanding. That is to say, incorrectly selecting one particular option is no more or less informative than incorrectly not-selecting a different item. This represents an important difference between MAMC (i.e. "select all correct options") vs MTF (i.e. "Mark each option as true or false") questions.

In our study, the selection of any particular option (remember options represent data points on the stimulus graph) is indicative of a particular interpretation of the stimulus. Incorrectly selecting an option indicates an interpretation of the graph with respect to that particular option. Alternatively, failing to select a correct option *might* mean the individual has a different interpretation, or that they failed to find *all* the data points consistent with the interpretation.

For this reason, we consider another alternative Partial Scoring scheme that takes into consideration only the selected statements, without penalizing statements incorrectly *not selected*. (See @schmidtRelationExamineesTrue2021 method #26; also referred to as the Morgan-Method) This partial scoring scheme takes into consideration that the most effort-free (or 'default') response for any given item is the null, or blank response. Blank responses indicate *no understanding*, perhaps *confusion*, or refusal to answer. These lack of responses are awarded zero credit. Whereas taking the action to select an *incorrect* option is effortful, and is indicative of *incorrect understanding*.

**Partial Scoring** $[-1/q, +1/p]$:

-   awards +1/p for each correctly selected option ($p_s$), and subtracts $1/(n-p) = 1/q$ for each incorrectly selected option ($q_s$)
-   only considers *selected* options; does not penalize nor reward *unselected* options

**Properties of Item**

```{=tex}
\begin{align}
p &= \text{number of true-select options (i.e. should be selected)} \\
q &= \text{number of true-unselect options (i.e. should not be selected)} \\
n &= \text{number of options} \: ( n = p + q)
\end{align}
```
**Properties of Response**

```{=tex}
\begin{align}
p_s &= \text{number of true-select options selected (i.e. number of correctly checked options)}\\
q_s &= \text{number of true-unselect options selected (i.e. number of incorrectly checked options }
\end{align}
```
The algorithm for **partial scoring** $[-1/q, +1/p]$ is given by:

```{=tex}
\begin{align}
f &= (p_s / p) - ({q_s}/{q}) \\
\end{align}
```
```{r}
f_partialP <- function(t,p,f,q) {

  #t = number of correct-selected options
  #p = number of true options
  #f = number of incorrect-selected options
  #q = number of false options
  #n = number of options + p + q
  # ifelse( (p == 0), return(""), "") #handle empty response set gracefully by returning nothing rather than 0
  ifelse( (p == 0), return(NA), "") #handle empty response set gracefully by returning nothing rather than 0
  ifelse( (p != 0), return( (t / p) - (f/q)), "")
  
  # return( (t / p) - (f/q))
}
```

### Comparison of Schemes

Which scoring scheme is most appropriate for the goals of the graph comprehension task?

Consider the following example:

*For a question with* $n = 5$ response options (data points A, B, C, D and E) with a correct response of A, the schemes under consideration yield the following scores:

```{r}
title <- "Comparison of Scoring Schemes for n = 5 options [ A,B,C,D,E ]"

correct <- c( "A____",  
              "A____",      
              "A____",        
              "A____",        
              "A____",      
              "A____",      
              "A____",      
              "A____",      
              "A____" ) 

response <- c("A____",  
              "AB___",      
              "A___E",      
              "AB__E",        
              "____E",
              "___DE",
              "_BCDE",      
              "ABCDE",      
              "_____" )

i <- c(        5,       
               4,              
               4,              
               3,               
               
               3,
               2,
               0,
               1,
               4)

abs <- c(f_dichom(5,5), 
         f_dichom(4,5), 
         f_dichom(4,5), 
         f_dichom(3,5), 
         
         f_dichom(3,5), 
         f_dichom(2,5),
         f_dichom(0,5),
         f_dichom(1,5),
         f_dichom(4,5))

partial1 <- c(f_partialN(5,5), 
              f_partialN(4,5), 
              f_partialN(4,5), 
              f_partialN(3,5), 
              
              f_partialN(3,5), 
              f_partialN(2,5),
              f_partialN(0,5),
              f_partialN(1,5),
              f_partialN(4,5))

partial2 <- c(f_partialP(1,1,0,4), 
              f_partialP(1,1,1,4), 
              f_partialP(1,1,1,4), 
              f_partialP(1,1,2,4), 
              
              f_partialP(0,1,1,4),
              f_partialP(0,1,2,4),
              f_partialP(0,1,4,4),
              f_partialP(1,1,4,4), 
              f_partialP(0,1,0,4))

names = c(    "Correct Answer",
              "Response",
              "i ",
              "Dichotomous",
              "Partial [-1/n, +1/n]",
              "Partial[-1/q, +1/p]")

dt <- data.frame(correct, response, i, abs, partial1 , partial2)

kbl(dt, col.names = names, caption = title, digits=3) %>%
  kable_classic() %>%
    add_header_above(c("Response Scenario " = 3, "Scores" = 3)) %>% 
    pack_rows("Perfect Response", 1, 1) %>%
    pack_rows("Correct + Extra Incorrect Selections", 2, 4) %>%
    pack_rows("Only Incorrect Selections", 5, 6) %>%
    pack_rows("Completely Inverse Response ", 7, 7) %>%
    pack_rows("Selected ALL or NONE", 8, 9) %>%
    footnote(general = paste("i = number of options in correct state; _ indicates option not selected"),
           general_title = "Note: ",footnote_as_chunk = T)

#cleanup
rm(dt, abs, correct,i,names,partial1,partial2,response,title)
```

-   We see that in the Dichotomous scheme, only the precisely correct response (row 1) yields a score other than zero. This scheme does now allow us to differentiate between different response patters.

-   The Partial $[-1/n, +1/n]$ scheme yields a range from $[-1,1]$, differentiating between responses. However, a blank response (bottom row) receives the same score (0.6) as the selection of the correct option + 1 incorrect option (row 2), which is problematic with for the goals of this study, where we need to differentiate between states of confusion or uncertainty yielding blank responses and the intentional selection of incorrect items.

-   The Partial $[-1/q, +1/p]$ scheme also yields a range of scores from $[-1,1]$. A blank response (bottom row) yields the same score ($0$) as the selection of *all* answer options (row 7); both are patterns of behavior we would expect to see if a respondent is confused or uncertain that there is a correct answer to the question.

Next we consider an example from our study, with $n = 15$ options and $p = 1$ correct option to be selected.

```{r}

title <- "Comparison of Scoring Schemes for SGC3 with n=15 and p=1 options [A,B...N,O]  "

correct <- c( "A____",  
              "A____",      
              "A____",      
              "A____",        
              "A____",      
              "A____",      
              "A____",      
              "A____",      
              "A____" ) 

response <- c("A__...__",  
              "AB_...__",      
              "A__..._O",      
              "AB_..._O",        
              "___..._O",      
              "___...NO",      
              "_BC...NO",
              "ABC...NO",      
              "___...__" )

i <- c(        15,       
               14,              
               14,              
               13,
               13,               
               12,          
               0,
               1,
               14)

abs <- c(f_dichom(15,15), 
         f_dichom(14,15), 
         f_dichom(14,15), 
         f_dichom(13,15), 
         f_dichom(13,15),
         f_dichom(12,15),
         f_dichom(0,15),
         f_dichom(1,15),
         f_dichom(14,15))

partial1 <- c(f_partialN(15,15), 
              f_partialN(14,15), 
              f_partialN(14,15), 
              f_partialN(13,15), 
              f_partialN(13,15),
              f_partialN(12,15),
              f_partialN(0,15),
              f_partialN(1,15),
              f_partialN(14,15))

partial2 <- c(f_partialP(1,1,0,14), 
              f_partialP(1,1,1,14), 
              f_partialP(1,1,1,14), 
              f_partialP(1,1,2,14), 
              f_partialP(0,1,1,14),
              f_partialP(0,1,2,14),
              f_partialP(0,1,14,14),
              f_partialP(1,1,14,14), 
              f_partialP(0,1,0,14))

names = c(    "Correct Answer",
              "Response",
              "$i$ ",
              "Dichotomous",
              "Partial [-1/n, +1/n]",
              "Partial [-1/q, +1/p]")

dt <- data.frame(correct, response, i, abs, partial1 , partial2)

kbl(dt, col.names = names, caption = title, digits=3) %>%
  kable_classic() %>%
    add_header_above(c("Response Scenario " = 3, "Scores" = 3)) %>% 
    pack_rows("Perfect Response", 1, 1) %>%
    pack_rows("Correct + Extra Incorrect Selections", 2, 4) %>%
    pack_rows("Only Incorrect Selections", 5, 6) %>%
    pack_rows("Completely Inverse Response ", 7, 7) %>%
    pack_rows("Selected ALL or NONE", 8, 9) %>%
    footnote(general = paste("i = number of options in correct state; _ indicates option not selected"),
           general_title = "Note: ",footnote_as_chunk = T)

#cleanup
rm(dt, abs, correct,i,names,partial1,partial2,response,title)
```

Here again we see that the Partial $[-1/q, +1/p]$ scheme allows us differentiate between patterns of responses, in a way that is more sensible for the goals of the SGC3 graph comprehension task.

::: {.callout-caption appearance="simple" icon="false"}
## Decision

The Partial $[-1/q, +1/p]$ scheme is more appropriate for scoring the graph comprehension task than the Partial $[-1/n, +1/n]$ scheme because it allows us to differentially penalize incorrectly *selected* and incorrectly *not selected* answer options.
:::

## SCORE SGC DATA

In SGC_3A we are fundamentally interested in understanding how a participant interprets the presented graph (stimulus). The **graph comprehension task** asks them to select the data points in the graph that meet the criteria posed in the question. To assess a participant's performance, for each question (q=15) we will calculate the following scores:

TODO UPDATE SCORE DEFS

*An overall, strict score:*\
1. **Absolute Score** : using dichotomous scoring referencing true (Triangular) answer. (see 1.2)

*Sub-scores, for each alternative graph interpretation*\
2. **Triangular Score** : using partial scoring \[-1/q, +1/p\] referencing true (Triangular) answer key.

3\. **Orthogonal Score** : using partial scoring \[-1/q, +1/p\] referencing (incorrect Orthogonal) answer key.

4\. **Tversky Score** : using partial scoring \[-1/q, +1/p\] referencing (incorrect connecting-lines strategy) answer key.

5\. **Satisficing Score** : using partial scoring \[-1/q, +1/p\] referencing (incorrect satisficing stategy) answer key.

### Prepare Answer Keys

We start by importing three answer keys: (1) Q1 - Q5 \[control condition\], (2) Q1-Q5 \[impasse condition\], (3) Q6-15. Separate answer keys by condition are required for Q1-Q5 because the stimuli for each condition visualize a different underlying dataset (i.e. the graphs show datapoints in different positions). Q6-Q15 are identical across conditions. Each answer key includes a row for each question, and a column defining the subset of response options that correspond to different graph interpretations.

```{r}
#| label: IMPORT-KEYS
#| warning: false
#| message: false

key_111_raw <- read_csv('data/keys/SGC3A_scaffold_111_key.csv') %>% mutate(condition = 111, phase = "scaffold")
key_121_raw <- read_csv('data/keys/SGC3A_scaffold_121_key.csv')%>% mutate(condition = 121, phase = "scaffold")
key_test_raw <- read_csv('data/keys/SGC3A_test_key.csv')%>% mutate(condition = "", phase = "test")

#TODO decompose tversky responses for key_121_raw and key_test_raw

keys_raw <- rbind(key_111_raw, key_121_raw ) #, key_test_raw)
rm(key_111_raw, key_121_raw, key_test_raw)

```

In order to calculate scores using the $[-1/q, +1/p]$ algorithm, we need to define the subset of all response options (set N) that should be selected (set P) and should not be selected (set Q). In order to calculate subscores for each graph interpretation (i.e. triangular, orthogonal, tversky) we must define these sets independently for each interpretation. For each question, the `keys_raw` dataframe gives us set N (all response options), and a set P (options that should be selected) for *each interpretation*. From these we must derive set Q for each interpretation.

-   SET $N$, all response options (superset) . This set is the same across all interpretations (a property of the question) and is given in the answer key.

-   SET $P$, $P \subset N$ , the subset of options that **should** be selected (rewarded as +1/p) . This set differs by interpretation, and is given in the answer key.

-   SET $A, A \subset N, A \sqcup P$ , the subset of options that **should not** be selected, *but if they are, aren't penalized* (i.e. these options are ignored. Not rewarded, nor penalized). These include any options referenced in the question (i.e. select shifts that start at the same time as X; don't penalize if they also select 'X'), as well as options within 0.5hr offset from the data point to accommodate reasonable visual errors. This set differs by interpretation, and is given in the answer key (columns `REF_POINT` and `_also`).

-   SET $Q$, the subset of options that **should not be selected** and are penalized (as -1/q). This set differs by interpretation and is not given in the answer key. We can derive set Q for each interpretation by $Q = N - (P \cup A)$

The next step in scoring is preparing interpretation-specific answer keys that specify sets N, P, A and Q for each question.

#### Triangular Key

First we construct a key set based on the 'Triangular' interpretation (i.e. the actually correct answers).

```{r}
#| label: KEY-SET-TRI
verify_tri = c() #sanity check
##——————————————————————————————————————————————————————————————————————
##CONSTRUCT TRIANGULAR KEY SET
##——————————————————————————————————————————————————————————————————————
#1. DEFINE SETS N, P, A
keys_tri <- keys_raw %>% 
  select(Q, condition, OPTIONS, TRIANGULAR, TRI_allow, REF_POINT) %>% 
  mutate(
    
    #replace NAs 
    TRI_allow = str_replace_na(TRI_allow,""),
    REF_POINT = str_replace_na(REF_POINT,""),
    
    #P options that SHOULD be selected (rewarded)
    set_p = TRIANGULAR,
    set_p = str_replace_na(set_p,""),#replace na if empty
    n_p = nchar(set_p), #number of true-select options
    
    #A options that are ignored if selected 
    set_a = str_c(TRI_allow,REF_POINT, sep=""),
    n_a = nchar(set_a),
    
    #N store all answr options (superset)
    set_n = OPTIONS,  
    n_n = nchar(set_n)
  
) %>% select(Q, condition, set_n, set_p, set_a, n_n, n_p, n_a)

#2. DEFINE SETS N, P, A
for (x in 1:nrow(keys_tri)) {
  
  #UNWIND STRINGS FOR SETDIFF
  #n all answer options
  N = keys_tri[x,'set_n'] %>% pull(set_n) %>% strsplit("") %>% unlist()
  #p correct-select answer options
  P = keys_tri[x,'set_p'] %>% pull(set_p) %>% strsplit("") %>% unlist()
  #a ignore-select answer options (should not be selected, but if they are, don't penalize)
  A = keys_tri[x,'set_a'] %>% pull(set_a) %>% strsplit("") %>% unlist()
  
  #Q = N - (P+A)
  #answers that are penalized (at -1/q) if selected 
  s = union(P,A) #rewarded plus ignored 
  s = str_replace_na(s,"")
  # s = union(s,X) # + trapdoor 
  Q = setdiff(N,s) # = penalized at -1/q when selected 
  
  #save set to dataframe
  Q = str_c(Q, collapse="")
  n_q = nchar(Q)
  keys_tri[x,'set_q'] = Q
  keys_tri[x,'n_q'] = n_q
  
  #verify each element in N is included in one and only one of P,A,Q
  tempunion = union(s,Q) %>% str_c(collapse="") %>% strsplit("") %>% unlist()
  N = N %>% str_c(collapse="") %>% strsplit("") %>% unlist()
  verify_tri[x] = setequal(tempunion,N)
}

#3. reorder cols for ease of use
keys_tri <- keys_tri %>% select(Q, condition, set_n, set_p, set_a, set_q, n_n, n_p, n_a, n_q) %>% mutate(verify = n_p + n_a + n_q)

#cleanup 
rm(N,A,P,Q,n_q,s,x,tempunion)
  
```

This leaves us a dataframe `keys_tri` that define the sets of response options consistent with the triangular graph interpretation.

To verify we have generated the correct sets, we verify that for each question, each option in N is included in either set P, A or Q (once and only once).

`r verify_tri`

#### Orthogonal Key

Next we construct a key set based on the 'Orthogonal' interpretation.

```{r}
#| label: KEY-SET-ORTH
verify_orth = c() #sanity check

##——————————————————————————————————————————————————————————————————————
##CONSTRUCT ORTHOGONAL KEY SET
##——————————————————————————————————————————————————————————————————————
#1. DEFINE SETS N, P, A
keys_orth <- keys_raw %>% 
  select(Q, condition, OPTIONS, ORTHOGONAL, ORTH_allow, REF_POINT) %>% 
  mutate(
    
    #replace NAs 
    ORTH_allow = str_replace_na(ORTH_allow,""),
    REF_POINT = str_replace_na(REF_POINT,""),
    
    #P options that SHOULD be selected (rewarded)
    set_p = ORTHOGONAL,
    set_p = str_replace_na(set_p,""),#replace na if empty
    n_p = nchar(set_p), #number of true-select options
    
    #A options that are ignored if selected 
    set_a = str_c(ORTH_allow,REF_POINT, sep=""),
    set_a = str_replace_na(set_a,""), #replace na if empty
    n_a = nchar(set_a),
    
    #N store all answer options (superset)
    set_n = OPTIONS,  
    n_n = nchar(set_n)
  
) %>% select(Q, condition, set_n, set_p, set_a, n_n, n_p, n_a)

#2. DO THE STUFF THAT'S EASIER IN A LOOP
for (x in 1:nrow(keys_orth)) {
  
  #UNWIND STRINGS FOR SETDIFF
  #n all answer options
  N = keys_orth[x,'set_n'] %>% pull(set_n) %>% strsplit("") %>% unlist()
  #p correct-select answer options
  P = keys_orth[x,'set_p'] %>% pull(set_p) %>% strsplit("") %>% unlist()
  #a ignore-select answer options (should not be selected, but if they are, don't penalize)
  A = keys_orth[x,'set_a'] %>% pull(set_a) %>% strsplit("") %>% unlist() 
 
  #Q = N - (P+A)
  #answers that are penalized (at -1/q) if selected 
  s = union(P,A) #rewarded plus ignored 
  s = str_replace_na(s,"")
  # print(s)
  # s = union(s,X) # + trapdoor 
  Q = setdiff(N,s) # = penalized at -1/q when selected 
  #save set to dataframe
  Q = str_c(Q, collapse="")
  n_q = nchar(Q)
  keys_orth[x,'set_q'] = Q
  keys_orth[x,'n_q'] = n_q
  
  #verify each element in N is included in one and only one of P,A,Q
  tempunion = union(s,Q) %>% str_c(collapse="") %>% strsplit("") %>% unlist()
  # print(tempunion)
  N = N %>% str_c(collapse="") %>% strsplit("") %>% unlist()

  verify_orth[x] = setequal(tempunion,N)
}

#3. reorder cols for ease of use
keys_orth <- keys_orth %>% select(Q, condition, set_n, set_p, set_a, set_q, n_n, n_p, n_a, n_q) %>% mutate(verify = n_p + n_a + n_q)


#cleanup
rm(A, N, n_q, P, Q, s, tempunion, x)
```

This leaves us a dataframe `keys_orth` that define the sets of response options consistent with the orthogonal graph interpretation.

To verify we have generated the correct sets, we verify that for each question, each response in N is included in either set P, A or Q (once and only once).

`r verify_orth`

#### Satisficing Key

Next we construct a key set based on the 'Satisficing' strategy. Satisficing involves selecting any data points within 0.5hr visual offset of the orthogonal interpretation of the graph (because no orthogonal response option is available) 

```{r}
#| label: KEY-SET-SATISFICE
verify_satisfice = c() #sanity check

##——————————————————————————————————————————————————————————————————————
##CONSTRUCT SATISFICE KEY SET
##——————————————————————————————————————————————————————————————————————
#1. DEFINE SETS N, P, A
keys_satisfice <- keys_raw %>% 
  select(Q, condition, OPTIONS, SATISFICE, SATISFICE_allow, REF_POINT) %>% 
  mutate(
    
    #replace NAs 
    SATISFICE_allow = str_replace_na(SATISFICE_allow,""),
    REF_POINT = str_replace_na(REF_POINT,""),
    
    #P options that SHOULD be selected (rewarded)
    set_p = SATISFICE,
    set_p = str_replace_na(set_p,""), #replace na if empty
    n_p = nchar(set_p), #number of true-select options
    
    #A options that are ignored if selected 
    set_a = str_c(SATISFICE_allow,REF_POINT, sep=""),
    set_a = str_replace_na(set_a,""), #replace na if empty
    n_a = nchar(set_a),
    
    #N store all answr options (superset)
    set_n = OPTIONS,  
    n_n = nchar(set_n)
  
) %>% select(Q, condition, set_n, set_p, set_a, n_n, n_p, n_a)

#2. DO THE STUFF THAT'S EASIER IN A LOOP
for (x in 1:nrow(keys_satisfice)) {
  
  #UNWIND STRINGS FOR SETDIFF
  #n all answer options
  N = keys_satisfice[x,'set_n'] %>% pull(set_n) %>% strsplit("") %>% unlist()
  #p correct-select answer options
  P = keys_satisfice[x,'set_p'] %>% pull(set_p) %>% strsplit("") %>% unlist()
  #a ignore-select answer options (should not be selected, but if they are, don't penalize)
  A = keys_satisfice[x,'set_a'] %>% pull(set_a) %>% strsplit("") %>% unlist() 
  
  #Q = N - (P+A)
  #answers that are penalized (at -1/q) if selected 
  s = union(P,A) #rewarded plus ignored 
  s = str_replace_na(s,"")
  # print(s)
  # s = union(s,X) # + trapdoor 
  Q = setdiff(N,s) # = penalized at -1/q when selected 
  #save set to data frame
  Q = str_c(Q, collapse="")
  n_q = nchar(Q)
  keys_satisfice[x,'set_q'] = Q
  keys_satisfice[x,'n_q'] = n_q
  
  #verify each element in N is included in one and only one of P,A,Q
  tempunion = union(s,Q) %>% str_c(collapse="") %>% strsplit("") %>% unlist()
  N = N %>% str_c(collapse="") %>% strsplit("") %>% unlist()
  verify_satisfice[x] = setequal(tempunion,N)
}

#3. reorder cols for ease of use
keys_satisfice <- keys_satisfice %>% select(Q, condition, set_n, set_p, set_a, set_q, n_n, n_p, n_a, n_q)%>% mutate(verify = n_p + n_a + n_q)


#cleanup
rm(A, N, n_q, P, Q, s, tempunion, x)
```

This leaves us a dataframe `keys_satisfice` that define the sets of response options consistent with the orthogonal graph interpretation.

To verify we have generated the correct sets, we verify that for each question, each response in N is included in either set P, A or Q (once and only once).

`r verify_satisfice`

#### Tversky Keys

Next we construct the key set based on a partial-understanding strategy we refer to as 'Tversky'. We use the label Tversky as shorthand for a partial interpretation of the coordinate system where subjects select a set of responses that lay along a connecting line from the referenced data point or referenced time for that item. The term is named for Barbara Tversky based on her work on graphical primitives (e.g. "lines connect, arrows direct, boxes contain").

```{r}
#| label: KEY-SETS-TVERSKY

verify_max = c() #sanity check
##——————————————————————————————————————————————————————————————————————
##CONSTRUCT TVERSKY KEY SET for TVERSKY-MAX
##——————————————————————————————————————————————————————————————————————
#1. DEFINE SETS N, P, A
keys_tversky_max <- keys_raw %>% 
  select(Q, condition, OPTIONS, REF_POINT, TV_max, TV_max_allow) %>% 
  mutate(
  
    #replace NAs 
    REF_POINT = str_replace_na(REF_POINT,""),
    TV_max = str_replace_na(TV_max,""),
    TV_max_allow = str_replace_na(TV_max_allow,""),
    
    #P options that SHOULD be selected (rewarded)
    set_p = TV_max,
    set_p = str_replace_na(set_p,""), #replace na if empty
    n_p = nchar(set_p), #number of true-select options
    
    #A options that are ignored if selected 
    set_a = str_c(TV_max_allow,REF_POINT, sep=""),
    set_a = str_replace_na(set_a,""), #replace na if empty
    n_a = nchar(set_a),
    
    #N store all answr options (superset)
    set_n = OPTIONS,  
    n_n = nchar(set_n)
  
) %>% select(Q, condition, set_n, set_p, set_a, n_n, n_p, n_a)

#2. DO THE STUFF THAT'S EASIER IN A LOOP
for (x in 1:nrow(keys_tversky_max)) {
  
  #UNWIND STRINGS FOR SETDIFF
  #n all answer options
  N = keys_tversky_max[x,'set_n'] %>% pull(set_n) %>% strsplit("") %>% unlist()
  #p correct-select answer options
  P = keys_tversky_max[x,'set_p'] %>% pull(set_p) %>% strsplit("") %>% unlist()
  #a ignore-select answer options (should not be selected, but if they are, don't penalize)
  A = keys_tversky_max[x,'set_a'] %>% pull(set_a) %>% strsplit("") %>% unlist()
  
  #Q = N - (P+A)
  #answers that are penalized (at -1/q) if selected 
  s = union(P,A) #rewarded plus ignored 
  s = str_replace_na(s,"")
  # s = union(s,X) # + trapdoor 
  Q = setdiff(N,s) # = penalized at -1/q when selected 
  
  #save set to dataframe
  Q = str_c(Q, collapse="")
  n_q = nchar(Q)
  keys_tversky_max[x,'set_q'] = Q
  keys_tversky_max[x,'n_q'] = n_q
  
  #verify each element in N is included in one and only one of P,A,Q
  tempunion = union(s,Q) %>% str_c(collapse="") %>% strsplit("") %>% unlist()
  N = N %>% str_c(collapse="") %>% strsplit("") %>% unlist()
  verify_max[x] = setequal(tempunion,N)
}

#3. reorder cols for ease of use
keys_tversky_max <- keys_tversky_max %>% select(Q, condition, set_n, set_p, set_a, set_q, n_n, n_p, n_a, n_q) %>% mutate(verify = n_p + n_a + n_q)

verify_tversky_start = c() #sanity check
##——————————————————————————————————————————————————————————————————————
##CONSTRUCT TVERSKY KEY SET for TVERSKY-START
##——————————————————————————————————————————————————————————————————————
#1. DEFINE SETS N, P, A
keys_tversky_start <- keys_raw %>% 
  select(Q, condition, OPTIONS, REF_POINT, TV_start, TV_start_allow) %>% 
  mutate(
  
    #replace NAs 
    REF_POINT = str_replace_na(REF_POINT,""),
    TV_start = str_replace_na(TV_start,""),
    TV_start_allow = str_replace_na(TV_start_allow,""),
    
    #P options that SHOULD be selected (rewarded)
    set_p = TV_start,
    set_p = str_replace_na(set_p,""), #replace na if empty
    n_p = nchar(set_p), #number of true-select options
    
    #A options that are ignored if selected 
    set_a = str_c(TV_start_allow,REF_POINT, sep=""),
    set_a = str_replace_na(set_a,""), #replace na if empty
    n_a = nchar(set_a),
    
    #N store all answr options (superset)
    set_n = OPTIONS,  
    n_n = nchar(set_n)
  
) %>% select(Q, condition, set_n, set_p, set_a, n_n, n_p, n_a)

#2. DO THE STUFF THAT'S EASIER IN A LOOP
for (x in 1:nrow(keys_tversky_start)) {
  
  #UNWIND STRINGS FOR SETDIFF
  #n all answer options
  N = keys_tversky_start[x,'set_n'] %>% pull(set_n) %>% strsplit("") %>% unlist()
  #p correct-select answer options
  P = keys_tversky_start[x,'set_p'] %>% pull(set_p) %>% strsplit("") %>% unlist()
  #a ignore-select answer options (should not be selected, but if they are, don't penalize)
  A = keys_tversky_start[x,'set_a'] %>% pull(set_a) %>% strsplit("") %>% unlist()
  
  #Q = N - (P+A)
  #answers that are penalized (at -1/q) if selected 
  s = union(P,A) #rewarded plus ignored 
  s = str_replace_na(s,"")
  # s = union(s,X) # + trapdoor 
  Q = setdiff(N,s) # = penalized at -1/q when selected 
  
  #save set to dataframe
  Q = str_c(Q, collapse="")
  n_q = nchar(Q)
  keys_tversky_start[x,'set_q'] = Q
  keys_tversky_start[x,'n_q'] = n_q
  
  #verify each element in N is included in one and only one of P,A,Q
  tempunion = union(s,Q) %>% str_c(collapse="") %>% strsplit("") %>% unlist()
  N = N %>% str_c(collapse="") %>% strsplit("") %>% unlist()
  verify_tversky_start[x] = setequal(tempunion,N)
}

#3. reorder cols for ease of use
keys_tversky_start <- keys_tversky_start %>% select(Q, condition, set_n, set_p, set_a, set_q, n_n, n_p, n_a, n_q) %>% mutate(verify = n_p + n_a + n_q)


verify_tversky_end = c() #sanity check
##——————————————————————————————————————————————————————————————————————
##CONSTRUCT TVERSKY KEY SET for TVERSKY-END
##——————————————————————————————————————————————————————————————————————
#1. DEFINE SETS N, P, A
keys_tversky_end <- keys_raw %>% 
  select(Q, condition, OPTIONS, REF_POINT, TV_end, TV_end_allow) %>% 
  mutate(
  
    #replace NAs 
    REF_POINT = str_replace_na(REF_POINT,""),
    TV_end = str_replace_na(TV_end,""),
    TV_end_allow = str_replace_na(TV_end_allow,""),
    
    #P options that SHOULD be selected (rewarded)
    set_p = TV_end,
    set_p = str_replace_na(set_p,""), #replace na if empty
    n_p = nchar(set_p), #number of true-select options
    
    #A options that are ignored if selected 
    set_a = str_c(TV_end_allow,REF_POINT, sep=""),
    set_a = str_replace_na(set_a,""), #replace na if empty
    n_a = nchar(set_a),
    
    #N store all answr options (superset)
    set_n = OPTIONS,  
    n_n = nchar(set_n)
  
) %>% select(Q, condition, set_n, set_p, set_a, n_n, n_p, n_a)

#2. DO THE STUFF THAT'S EASIER IN A LOOP
for (x in 1:nrow(keys_tversky_end)) {
  
  #UNWIND STRINGS FOR SETDIFF
  #n all answer options
  N = keys_tversky_end[x,'set_n'] %>% pull(set_n) %>% strsplit("") %>% unlist()
  #p correct-select answer options
  P = keys_tversky_end[x,'set_p'] %>% pull(set_p) %>% strsplit("") %>% unlist()
  #a ignore-select answer options (should not be selected, but if they are, don't penalize)
  A = keys_tversky_end[x,'set_a'] %>% pull(set_a) %>% strsplit("") %>% unlist()
  
  #Q = N - (P+A)
  #answers that are penalized (at -1/q) if selected 
  s = union(P,A) #rewarded plus ignored 
  s = str_replace_na(s,"")
  # s = union(s,X) # + trapdoor 
  Q = setdiff(N,s) # = penalized at -1/q when selected 
  
  #save set to dataframe
  Q = str_c(Q, collapse="")
  n_q = nchar(Q)
  keys_tversky_end[x,'set_q'] = Q
  keys_tversky_end[x,'n_q'] = n_q
  
  #verify each element in N is included in one and only one of P,A,Q
  tempunion = union(s,Q) %>% str_c(collapse="") %>% strsplit("") %>% unlist()
  N = N %>% str_c(collapse="") %>% strsplit("") %>% unlist()
  verify_tversky_end[x] = setequal(tempunion,N)
}

#3. reorder cols for ease of use
keys_tversky_end <- keys_tversky_end %>% select(Q, condition, set_n, set_p, set_a, set_q, n_n, n_p, n_a, n_q) %>% mutate(verify = n_p + n_a + n_q)

verify_tversky_duration = c()
##——————————————————————————————————————————————————————————————————————
##CONSTRUCT TVERSKY KEY SET for TVERSKY-DURATION
##——————————————————————————————————————————————————————————————————————
#1. DEFINE SETS N, P, A
keys_tversky_duration <- keys_raw %>% 
  select(Q, condition, OPTIONS, REF_POINT, TV_dur, TV_dur_allow) %>% 
  mutate(
  
    #replace NAs 
    REF_POINT = str_replace_na(REF_POINT,""),
    TV_dur = str_replace_na(TV_dur,""),
    TV_dur_allow = str_replace_na(TV_dur_allow,""),
    
    #P options that SHOULD be selected (rewarded)
    set_p = TV_dur,
    set_p = str_replace_na(set_p,""), #replace na if empty
    n_p = nchar(set_p), #number of true-select options
    
    #A options that are ignored if selected 
    set_a = str_c(TV_dur_allow,REF_POINT, sep=""),
    set_a = str_replace_na(set_a,""), #replace na if empty
    n_a = nchar(set_a),
    
    #N store all answr options (superset)
    set_n = OPTIONS,  
    n_n = nchar(set_n)
  
) %>% select(Q, condition, set_n, set_p, set_a, n_n, n_p, n_a)

#2. DO THE STUFF THAT'S EASIER IN A LOOP
for (x in 1:nrow(keys_tversky_duration)) {
  
  #UNWIND STRINGS FOR SETDIFF
  #n all answer options
  N = keys_tversky_duration[x,'set_n'] %>% pull(set_n) %>% strsplit("") %>% unlist()
  #p correct-select answer options
  P = keys_tversky_duration[x,'set_p'] %>% pull(set_p) %>% strsplit("") %>% unlist()
  #a ignore-select answer options (should not be selected, but if they are, don't penalize)
  A = keys_tversky_duration[x,'set_a'] %>% pull(set_a) %>% strsplit("") %>% unlist()
  
  #Q = N - (P+A)
  #answers that are penalized (at -1/q) if selected 
  s = union(P,A) #rewarded plus ignored 
  s = str_replace_na(s,"")
  # s = union(s,X) # + trapdoor 
  Q = setdiff(N,s) # = penalized at -1/q when selected 
  
  #save set to dataframe
  Q = str_c(Q, collapse="")
  n_q = nchar(Q)
  keys_tversky_duration[x,'set_q'] = Q
  keys_tversky_duration[x,'n_q'] = n_q
  
  #verify each element in N is included in one and only one of P,A,Q
  tempunion = union(s,Q) %>% str_c(collapse="") %>% strsplit("") %>% unlist()
  N = N %>% str_c(collapse="") %>% strsplit("") %>% unlist()
  verify_tversky_duration[x] = setequal(tempunion,N)
}

#3. reorder cols for ease of use
keys_tversky_duration <- keys_tversky_duration %>% select(Q, condition, set_n, set_p, set_a, set_q, n_n, n_p, n_a, n_q) %>% mutate(verify = n_p + n_a + n_q)


#cleanup
rm(A, N, n_q, P, Q, s, tempunion, x)
```

This leaves us four dataframes, each corresponding to a different variant of a 'lines connecting to reference point' strategy.\
- `keys_tversky_max` : the superset of lines connecting options - `keys_tversky_start` : lines connecting to the rightward diagonal (start time) of the reference point - `keys_tversky_end`: lines connecting to the leftward diagonal (end time) of the reference point - `keys_tversky_duration`: lines connecting to the horizontal y-intercept (duration) of the reference point

To verify we have generated the correct sets, we verify that for each question, each response in N is included in either set P, A or Q (once and only once).

`r verify_max`

`r verify_tversky_start`

`r verify_tversky_end`

`r verify_tversky_duration`

```{r}
#| label: CLEANUP-VERIFICATIONS
#cleanup
rm(verify_tri, verify_orth, verify_satisfice, verify_max, verify_tversky_duration, verify_tversky_end, verify_tversky_start)
```

### Score Items

Next, we import the item-level response data. For each row in the item level dataset (indicating the response to a single question-item for a single subject), we compare the raw response `df_items$response` with the answer keys in each interpretation (e.g. `keys_orth`, `keys_tri`, etc...), then using those sets, determine the number of correctly selected items(p) and incorrectly selected items (q), which in turn are used to calculate partial\[-1/q, +1/p\] scores for each interpretation. The resulting scores are then stored on each item in `df_items`, and can be used to determine which graph interpretation the subject held.

Specifically, the following scores are calculated for each item:

-   `score_TRI` How consistent is the response with the **triangular**interpretation?
-   `score_ORTH` How consistent is the response with the **orthogonal**interpretation?
-   `score_TV_max` How consistent is the response with the **(maximal) Tversky**interpretation?
-   `score_TV_start` How consistent is the response with the **(start-time) Tversky**interpretation?
-   `score_TV_end` How consistent is the response with the **(end-time) Tversky**interpretation?
-   `score_TV_duration` How consistent is the response with the **(duration) Tversky**interpretation?
-   `score_REF` Did the response select only the **reference point**?
-   `score_BOTH` How consistent is the response with **both** the orthogonal and triangular interpretations?
-   `score_ABS` Is the response strictly correct? (triangular interpretation)
-   `score_niceABS` Is the response strictly correct? (triangular interpretation, not penalizing ref points)

```{r}
#| label: SCORING-FUNCTIONS


#CALCULATE THE TRIANGULAR, ORTHOGONAL OR TVERSKIAN SUBSCORES FROM KEYFRAME
calc_sub_score <- function(keyframe, question, cond, response){
  
  #TODO verify type is in df_keymap$score
  #type must be one of "tri", "orth", "tv_max", "tv_start", "tv_end", "tv_duration", "both", "ref"
  #keyframe must be one of keys_raw, keys_tri, "keys_orth", "keys_tversky_max", "keys_tversky_start", "keys_tversky_end", "keys_tversky_duration", 
  
  #STEP 1 GET KEY 
  if (question < 6) #for q1 - q5 find key for question by condition
  {
    # print(keyframe)
    #GET KEY FOR THIS SCORE TYPE, QUESTION AND CONDITION
    p =  keyframe %>% filter(Q == question) %>% filter(condition == cond) %>% select(set_p) %>% pull(set_p) %>% str_split("") %>% unlist()
    q =  keyframe %>% filter(Q == question) %>% filter(condition == cond) %>% select(set_q) %>% pull(set_q) %>% str_split("") %>% unlist()
    pn = keyframe %>% filter(Q == question) %>% filter(condition == cond) %>% select(n_p)
    qn = keyframe %>% filter(Q == question) %>% filter(condition == cond) %>% select(n_q) 

  } else {
    #GET KEY FOR THIS SCORE TYPE, QUESTION 
    p =  keyframe %>% filter(Q == question) %>% select(set_p) %>% pull(set_p) %>% str_split("") %>% unlist()
    q =  keyframe %>% filter(Q == question) %>% select(set_q) %>% pull(set_q) %>% str_split("") %>% unlist()
    pn = keyframe %>% filter(Q == question) %>% select(n_p)
    qn = keyframe %>% filter(Q == question) %>% select(n_q) 
  }
  
  #STEP 2 CALC INTERSECTIONS BETWEEN RESPONSE AND KEY
  ps = length(intersect(response,p))
  qs = length(intersect(response,q))
  # df_items[x,'tri_ps'] = tri_ps
  # df_items[x,'tri_qs'] = tri_qs
  
  #STEP 3 CALC f_partialP schema SCORE FOR THIS INTERSECTION 
  x = f_partialP(ps,pn,qs,qn)
  
  #cleanup
  rm(p,q,pn,qn,ps,qs)
  
  return(x) 
  
}

#CALCULATE THE REFERENCE SCORES
calc_ref_score <- function(question, condition, response){
  
  #STEP 1 GET KEY for this question and condition
  if (question < 6) #for q1 - q5 find key for question by condition
  {
     #1. GET reference point from REF_POINT column in raw keys
     ref_p = keys_raw %>% filter(Q == question) %>% filter(condition == cond) %>% select(REF_POINT) %>% pull(REF_POINT) %>% str_split("") %>% unlist()
     #2. get all possible options [doesn't matter which key, they're all the same]
     ref_n =keys_raw %>% filter(Q == question) %>% filter(condition == cond) %>% select(OPTIONS) %>% pull(OPTIONS) %>% str_split("") %>% unlist() 
     #3. calc answers that aren't the reference point
     ref_q = setdiff(ref_n,ref_p)
     #4. cal number of ps and qs 
     ref_pn = length(ref_p)
     ref_qn = length(ref_q)
  } else {
    #get REFERENCE POINT keys for this question
     #1. GET reference point from REF_POINT column in raw keys
     ref_p = keys_raw %>% filter(Q == question) %>% select(REF_POINT) %>% pull(REF_POINT) %>% str_split("") %>% unlist()
     #2. get all possible options [doesn't matter which key, they're all the same]
     ref_n =keys_raw %>% filter(Q == question) %>% select(OPTIONS) %>% pull(OPTIONS) %>% str_split("") %>% unlist() 
     #3. calc answers that aren't the reference point
     ref_q = setdiff(ref_n,ref_p)
     #4. cal number of ps and qs 
     ref_pn = length(ref_p)
     ref_qn = length(ref_q)
  }
    
  #STEP 2 CALC INTERSECTIONS BETWEEN RESPONSE AND KEY
  ref_ps = length(intersect(response,ref_p))
  ref_qs = length(intersect(response,ref_q))
  # df_items[x,'both_ps'] = ref_ps
  # df_items[x,'both_qs'] = ref_qs     
 
  #STEP 3 CALC f_partialP schema SCORE FOR THIS INTERSECTION 
  x = f_partialP(ref_ps,ref_pn,ref_qs,ref_qn)
  
  #cleanup
  rm(ref_p,ref_q,ref_pn,ref_qn,ref_ps,ref_qs)   
  
  return(x) #true correct, trues, false correct, falses

}


#CALCULATE SCORE BASED ON UNION OF ORTH & TRI (SUBJECT SELECTS BOTH ANSWERS )
calc_both_score <- function(question, condition, response){
  
  #STEP 1 GET KEY for this question and condition
  if (question < 6) #for q1 - q5 find key for question by condition
  {
     #grab the tri and orth keys for this question as well as N option set
     tri_p =  keys_tri %>%  filter(Q == question) %>% filter(condition == cond) %>% select(set_p) %>% pull(set_p) %>% str_split("") %>% unlist()
     orth_p = keys_orth %>% filter(Q == question) %>% filter(condition == cond) %>% select(set_p) %>% pull(set_p) %>% str_split("") %>% unlist()
     set_n =  keys_tri %>%  filter(Q == question) %>% filter(condition == cond) %>% select(set_n) %>% pull(set_n) %>% str_split("") %>% unlist() 
     #1. calc answer that is both tri and orth and only these --> union of tri_p and orth_p
     both_p = union(tri_p, orth_p) #the selection of tri and p
     #2. calc answers that should't be selected as diffrence between N [same for all keys] and both_p
     both_q = setdiff(set_n,both_p)
     both_pn = length(both_p)
     both_qn = length(both_q)
  } else{
    
     #grab the tri and orth keys for this question as well as N option set
     tri_p =  keys_tri %>%  filter(Q == question) %>% select(set_p) %>% pull(set_p) %>% str_split("") %>% unlist()
     orth_p = keys_orth %>% filter(Q == question) %>% select(set_p) %>% pull(set_p) %>% str_split("") %>% unlist()
     set_n =  keys_tri %>%  filter(Q == question) %>% select(set_n) %>% pull(set_n) %>% str_split("") %>% unlist() 
     #1. calc answer that is both tri and orth and only these --> union of tri_p and orth_p
     both_p = union(tri_p, orth_p) #the selection of tri and p
     #2. calc answers that shouldn't be selected as difference between N [same for all keys] and both_p
     both_q = setdiff(set_n,both_p)
     both_pn = length(both_p)
     both_qn = length(both_q)
  }
    
  #STEP 2 CALC INTERSECTIONS BETWEEN RESPONSE AND KEY
  both_ps = length(intersect(response,both_p))
  both_qs = length(intersect(response,both_q))
  # df_items[x,'both_ps'] = both_ps
  # df_items[x,'both_qs'] = both_qs
 
  #STEP 3 CALC f_partialP schema SCORE FOR THIS INTERSECTION 
  x = f_partialP(both_ps,both_pn,both_qs,both_qn)
  
  #cleanup
  rm(both_p,both_q,both_pn,both_qn,both_ps,both_qs)   
  
  return(x) #true correct, trues, false correct, falses
  
}

```


```{r}
#| label: IMPORT-ITEMS

backup <- read_rds('data/1-study-level/sgc3a_items.rds')
df_items <- read_rds('data/1-study-level/sgc3a_items.rds')
#TODO REMOE FILTER 
df_items <- df_items %>% filter(q < 6 ) 

```
*note: this cell takes several minutes to run and is not optimized*

```{r}
#| label: CALCULATE-SCORES[RUNS-SOOOO-LONG]
#| warning : false
#| message: false

#CALCULATE SUBSCORES (in loop)
for (x in 1:nrow(df_items)) {
  
  #PREPARE ITEMS FOR SCORING
  #sort response vectors alphabetically
  #doesn't impact scoring, but does impact response display tables
   df_items[x,'response'] <-  df_items[x,'response'] %>% str_split("") %>% unlist() %>% sort() %>% str_c(collapse="")

  #get properties of the RESPONSE ITEM
  qu = df_items[x,'q'] %>% as.numeric()
  cond = as.character(df_items[x,'condition']) %>% as.numeric()
  r = df_items[x,'response'] %>% str_split("") %>% unlist()

  #calculate the main subscores
  df_items[x,'score_TRI'] = calc_sub_score(keys_tri, qu, cond, r)
  df_items[x,'score_ORTH'] = calc_sub_score(keys_orth, qu, cond, r)
  df_items[x,'score_SATISFICE'] = calc_sub_score(keys_satisfice, qu, cond, r)
  df_items[x,'score_TV_max'] = calc_sub_score(keys_tversky_max, qu, cond, r)
  df_items[x,'score_TV_start'] = calc_sub_score(keys_tversky_start, qu, cond, r)
  df_items[x,'score_TV_end'] = calc_sub_score(keys_tversky_end, qu, cond, r)
  df_items[x,'score_TV_duration'] = calc_sub_score(keys_tversky_duration, qu, cond, r)

  # # #calculate special subscores
  df_items[x,'score_REF'] = calc_ref_score(qu, cond, r)
  df_items[x,'score_BOTH'] = calc_both_score(qu, cond, r)
}

#CALCULATE ABSOLUTE SCORES
#calculate absolute scores dichotomous
df_items$score_ABS = as.integer(df_items$correct) 
#niceABS indicates if the response is correct without penalizing the allowable triangular options(ie. the ref point)
df_items$score_niceABS  <- as.integer((df_items$score_TRI == 1))
 
#cleanup
rm(qu,cond,r, x)
```

### Derive Interpretation


Finally, we compare the interpretation subscores and decide which is highest. This indicates the interpretation that the individual's response most closely approximates. This algorithm makes assigns one of the following values to each item response:

-   Orthogonal
-   Triangular
-   Tversky
-   both Tri + Orth
-   reference
-   blank
-   frenzy
-   ?

TODO HANDLE EQUAL COLUMNS
TODO HANDLE ADDING SATISFICE TO ALGORITHM

```{r}
#| label: DERIVE-INTERPRETATION
#| warning: false
#| message: false

df_items$best <- "?" #set to null
threshold_range = 0.5 #set required variance in subscores to be discriminant
threshold_frenzy = 7

# df_items <- backup
for (x in 1:nrow(df_items)) {
  
  #CALCULATE MAX TVERSKY SUBSCORE
  #first reshape subscores 
  t = df_items[x,] %>% select(score_TV_max, score_TV_start, score_TV_end, score_TV_duration)
  t.long = gather(t,score, value, 1:4)
  
  #replace empty scores with NA so we can ignore them
  #sometimes TVERSKY subscores are blank if they don't apply for that question 
  t.long[t.long == ""] = NA

  df_items[x,'score_TVERSKY'] = as.numeric(max(t.long$value,na.rm = TRUE))
  df_items[x,'tv_type'] = t.long[which.max(t.long$value),'score']
  
  
  #NOW CALCULATE RANGE IN SUBSCORES
  s = df_items[x,] %>% select(score_TRI, score_TVERSKY, score_ORTH, score_SATISFICE)
  s.long = gather(s,score, value, 1:4)
  s.long[s.long == ""] = NA
  
  df_items[x,'top_score'] = as.numeric(max(s.long$value,na.rm = TRUE))
  df_items[x,'top_type'] = s.long[which.max(s.long$value),'score']
  
  #calculate the range between highest and lowest scores 
  r = as.numeric(range(s.long$value,na.rm = TRUE))
  r = diff(r)
  df_items[x,'range'] = r
  
  #DISCRIMINANT BETWEEN SUBSCORES TO PREDICT BEST FIT INTERPRETATION
  
  #is the response BLANK?
  if( df_items[x,'num_o'] == 0) {df_items[x,'best'] = "blank"}
  
  #is the response a 'FRENZY'? ie. they selected more than half of the datapoints?
  else if( df_items[x,'num_o'] > threshold_frenzy) {df_items[x,'best'] = "frenzy"}
  
  #otherwise does the response perfectly match both TRI AND ORTH?
  else if( df_items[x,'score_BOTH'] == 1) {df_items[x,'best'] = "both tri + orth"}
  
  #otherwise does the response perfectly match the reference point
  else if( df_items[x,'score_REF'] == 1) {df_items[x,'best'] = "reference"}
  
  #otherwise if both TVERSKY and TRI == 1, it is a triangular response
  else if( df_items[x,'score_TRI'] == df_items[x,'score_TVERSKY'] &
           df_items[x,'score_TRI'] == 1) {df_items[x,'best'] = "Triangular"}
  
  #otherwise try to derive from subscores
  else {
   
   #is there enough variance between scores to be able to differentiate?
  
    if (r < threshold_range) {
      #then we can't predict the interpretation
    }
    else {
      #if there IS enough variance to be predictive, take the highest subscore
      p = s.long[which.max(s.long$value),'score']
      if (p == "score_TRI") {df_items[x,'best'] = "Triangular"}
      else if (p == "score_ORTH") {df_items[x,'best'] = "Orthogonal"}
      else if (p == "score_TVERSKY") {df_items[x,'best'] = "Tversky"}
      
    }
  }
  
  
#REFERENCE CODE FOR FINDING MAX COLUMNS [to avoid reshaping dataframe to long]
# max = max.col(df_items[x,] %>% select(score_TRI,score_ORTH, score_TV_max, score_TV_start, score_TV_end), ties.method = "first")
# df_items[x,'best'] = names[max]
  
}

#cleanup 
rm(t, t.long, s, s.long, x, r,p)
rm(threshold_frenzy, threshold_range)

#set order of levels
df_items$interpretation <- factor(df_items$best, 
                                  levels = c("Orthogonal", "Triangular", "Tversky",
                                             "reference", "both tri + orth", "blank","frenzy","?"))

#recode as numeric
df_items$score_TV_duration <- df_items$score_TV_duration %>% as.numeric()

```

TODO is there still a need for a trapdoor or discriminating score?

```{r}
f_partialC <- function(ps,p,qs,q) {
                       # gs,g) {

  #penalty_q = penalty for selecting an incorrect option
  #penalty_g = penalty for selecting an irrelevant option
  
  #ps = number of correct-selected options
  #p = number of true options
  
  #qs = number of incorrect-selected options
  #q = number of false options
  
  
  #gs = number of irrelevantly selected options
  #g = number of irrelevant options
  
  
  #n = number of options + p + q
  # return( (ps/p) - (qs/q) )
}
```

```{r}

# test <- df_items %>% filter(q<6) %>% filter(condition == 111) %>% select(q, response, score_TRI, score_ORTH, score_TVERSKY, score_BOTH, score_REF, range, best)

# gf_histogram(~score_TRI, data = test)
# gf_histogram(~score_ORTH, data = test)
# gf_histogram(~score_ABS, data = test)
# gf_histogram(~score_niceABS, data = test)
```

## EXPLORE RESPONSES

In this section we explore responses given by participants to each particular item in the graph comprehension task, indicate how each response was scored, and what interpretation of the graph is indicated by different responses.

### Control Condition

#### Question #1

We start by exploring the range of response options checked by participants on Question 1, for those assigned to the control (non-impasse) condition (`condition` = 111).

![Question 1 --- Control Condition](static/questions/Q1_111.png){#fig-Q1-111}

```{r}
#| label: Q1-CONTROL-KEY

q <- keys_raw %>% filter(condition == 111) %>% filter(Q==1)
ignore <- q %>% select("REF_POINT")
answers <- q %>% select("TRIANGULAR", "ORTHOGONAL", "SATISFICE", "TV_max","TV_start", "TV_end", "TV_dur") %>% unlist()
ves <- q %>% select("TRI_allow", "ORTH_allow", "SATISFICE_allow", "TV_max_allow","TV_start_allow","TV_end_allow", "TV_dur_allow")%>% unlist()
options <- q %>% select("OPTIONS")
question = q %>%  select("TEXT")
scores <- c("Triangular", "Orthgonal", "Satisficing", "Tversky [maximal]", "Tversky [start diagonal]", 
            "Tversky [end diagonal]", "Tversky [duration line]")
d = tibble(interpretation = scores, answer = answers, allowed=ves)
d$answer <- replace_na(d$answer, "")
d$allowed <- replace_na(d$allowed, "")

title = paste("Answer Key | Q1 Control Condition : ", question)
cols = c("interpretation", "answer","not penalized")

d %>% kbl(caption = title, col.names = cols) %>% kable_classic() %>% 
  footnote(general = paste("15 response options: ", options), general_title = "Note: ",footnote_as_chunk = T) 
```

Notice that for this Question, the *Triangular* answer is the same as the *Tversky \[start diagonal\]* answer. In fact, for most questions, one of the Tversky sub-types will match the correct response.

Here we summarize the distinct response options given by participants on this item. Each letter in `response` indicates a checkbox selected by the participant (See @fig-Q1-111 ). `n` indicates the number of participants who gave this response, while `interpretation` indicates the *graph interpretation* most consistent with that response. At the right of this table are the Absolute, followed by Partial Credit subscores for each response. NA indicates that there is no score calculated (occurs when there is no subset of response options that accord with that interpretation for this question).

```{r}
#| label: Q1-CONTROL-RESPONSES
#| warning: false

title <- "Frequency of Selected Response Options for Question #1 (Control Condition)"
names = c("response","n","interpretation","absolute","tri","orth","satisfice","tv_max","tv_start","tv_end","tv_dur")

df_items %>% filter(q == 1 & condition == 111) %>% group_by(response) %>% 
  dplyr::summarise( count = n(), 
                    nice = unique(score_niceABS),
                    triangular = unique(score_TRI), 
                    orthogonal =  unique(score_ORTH),
                    satisficing =  unique(score_SATISFICE),
                    tversky_max = unique(score_TV_max),
                    tversky_start = unique(score_TV_start),
                    tversky_end = unique(score_TV_end),
                    tversky_duration = unique(score_TV_duration),
                    interpretation = unique(interpretation)) %>% 
  arrange(interpretation, desc(count)) %>% 
  select(response, count, interpretation, nice, triangular, orthogonal, 
         satisficing, tversky_max, tversky_start, tversky_end, tversky_duration) %>% 
  kbl(caption = title, col.names = names) %>%  kable_classic() %>% 
  add_header_above(c(" " = 3, "Strict Score" = 1, "Interpretation Scores"=7)) %>%
  pack_rows("Orthogonal", 1, 1) %>% 
  pack_rows("Triangular", 2, 2) %>% 
  pack_rows("Lines-Connect", 3, 3) %>% 
  pack_rows("other", 4, 7)  %>% 
  footnote(general = "n = number of responses in sample", 
           general_title = "Note: ",footnote_as_chunk = T) 

```

We see that nearly all of the subjects selected a response consistent with one of the identified interpretations. Responses that do not accord with any interpretation are indicated as `?` .

+--------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Which shifts start at 11am?                            |                                                                                                                                                                                                         |
+========================================================+=========================================================================================================================================================================================================+
| ![](static/interpretations/Q1_111_A.png){width="500"}  | **Response: A**                                                                                                                                                                                         |
|                                                        |                                                                                                                                                                                                         |
|                                                        | -   indicates an **orthogonal** (incorrect) interpretation of the coordinate system                                                                                                                     |
|                                                        |                                                                                                                                                                                                         |
|                                                        | -   Consistent with the reader identifying the reference point (11am) on the x-axis, *projecting an invisible orthogonal line upward*, and locating data point **A**.                                   |
+--------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ![](static/interpretations/Q1_111_F.png){width="500"}  | **Response: F**                                                                                                                                                                                         |
|                                                        |                                                                                                                                                                                                         |
|                                                        | -   indicates the **triangular** (correct) interpretation of the coordinate system                                                                                                                      |
|                                                        |                                                                                                                                                                                                         |
|                                                        | -   Consistent with the reader identifying the reference point (11am) on the x-axis, and following the right-diagonal gridline, identifying data point **F**.                                           |
+--------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ![](static/interpretations/Q1_111_CF.png){width="500"} | **Response: C, F**                                                                                                                                                                                      |
|                                                        |                                                                                                                                                                                                         |
|                                                        | -   indicates a **maximal-Tversky** strategy following connecting lines                                                                                                                                 |
|                                                        |                                                                                                                                                                                                         |
|                                                        | -   Consistent with the reader identifying the reference point (11am) on the x-axis, and following *both* the right-diagonal and left-diagonal gridlines, identifying both datapoints F and C gridline. |
+--------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ![](static/interpretations/Q1_111_AF.png){width="500"} | **Response: A , F**                                                                                                                                                                                     |
|                                                        |                                                                                                                                                                                                         |
|                                                        | -   The reader selects both triangular and orthogonal-consistent data points                                                                                                                            |
|                                                        |                                                                                                                                                                                                         |
|                                                        | -   Possibly indicates uncertainty or confusion                                                                                                                                                         |
+--------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Three responses were given that were not consistent with any of the identified interpretations. *Note that options highlighted in light grey are considered within the range of 'visual error', defined by 0.5hr offset from the interpretation-specific projection.*

+---------------------------------------------------------+------------------------------------------+----------------------------------------------------------------+
| **I J D**                                               | **X**                                    | **Z**                                                          |
|                                                         |                                          |                                                                |
|                                                         |                                          | TODO find this person, did they subsequently give tri answers? |
+=========================================================+==========================================+================================================================+
| ![](static/interpretations/Q1_111_IJD.png){width="500"} | ![](static/interpretations/Q1_111_X.png) | ![](static/interpretations/Q1_111_Z.png)                       |
+---------------------------------------------------------+------------------------------------------+----------------------------------------------------------------+

#### Question #2

![Q2---Control Condition](static/questions/Q2_111.png){#fig-Q2-111}

```{r}
#| label: Q2-CONTROL-KEY

q <- keys_raw %>% filter(condition == 111) %>% filter(Q==2)
ignore <- q %>% select("REF_POINT")
answers <- q %>% select("TRIANGULAR", "ORTHOGONAL", "SATISFICE", "TV_max","TV_start", "TV_end", "TV_dur") %>% unlist()
ves <- q %>% select("TRI_allow", "ORTH_allow", "SATISFICE_allow", "TV_max_allow","TV_start_allow","TV_end_allow", "TV_dur_allow")%>% unlist()
options <- q %>% select("OPTIONS")
question = q %>%  select("TEXT")
scores <- c("Triangular", "Orthgonal", "Satisficing", "Tversky [maximal]", "Tversky [start diagonal]", 
            "Tversky [end diagonal]", "Tversky [duration line]")
d = tibble(interpretation = scores, answer = answers, allowed=ves)
d$answer <- replace_na(d$answer, "")
d$allowed <- replace_na(d$allowed, "")

title = paste("Answer Key | Q2 Control Condition : ", question)
cols = c("interpretation", "answer","not penalized")

d %>% kbl(caption = title, col.names = cols) %>% kable_classic() %>% 
  footnote(general = paste("15 response options: ", options), general_title = "Note: ",footnote_as_chunk = T) 
```

```{r}
#| label: Q2-CONTROL-RESPONSES
#| warning: false

title <- "Frequency of Selected Response Options for Question #2 (Control Condition)"
names = c("response","n","interpretation","absolute","tri","orth","satisfice","tv_max","tv_start","tv_end","tv_dur")

df_items %>% filter(q == 2 & condition == 111) %>% group_by(response) %>% 
  dplyr::summarise( count = n(), 
                    nice = unique(score_niceABS),
                    triangular = unique(score_TRI), 
                    orthogonal =  unique(score_ORTH),
                    satisficing =  unique(score_SATISFICE),
                    tversky_max = unique(score_TV_max),
                    tversky_start = unique(score_TV_start),
                    tversky_end = unique(score_TV_end),
                    tversky_duration = unique(score_TV_duration),
                    interpretation = unique(interpretation)) %>% 
  arrange(interpretation, desc(count)) %>% 
  select(response, count, interpretation, nice, triangular, orthogonal, 
         satisficing, tversky_max, tversky_start, tversky_end, tversky_duration) %>% 
  kbl(caption = title, col.names = names) %>%  kable_classic() %>% 
  add_header_above(c(" " = 3, "Strict Score" = 1, "Interpretation Scores"=7)) %>%
  pack_rows("Orthogonal", 1, 3) %>% 
  pack_rows("Triangular", 4, 5) %>% 
  pack_rows("Lines-Connect", 6, 7) %>% 
  pack_rows("other", 8, 10)  %>% 
  footnote(general = "n = number of responses in sample", 
           general_title = "Note: ",footnote_as_chunk = T) 

```

Again, we see that most subjects selected a response consistent with one of the identified interpretations. (note, when the question stem includes a data point rather than time as reference, we do not penalize respondents for selecting the reference data point *in addition* to an interpretation consistent response. For example, in this question, we do not penalize respondents for selecting option D, the reference point in the question. )

+----------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Which shift(s) start at the same time as D?**          |                                                                                                                                                                                                                                                                         |
+----------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ![](static/interpretations/Q2_111_ORTH.png){width="500"} | **Reponse: E** (also EG, DE)                                                                                                                                                                                                                                            |
|                                                          |                                                                                                                                                                                                                                                                         |
|                                                          | -   indicates an **orthogonal** (incorrect) interpretation of the coordinate system                                                                                                                                                                                     |
|                                                          |                                                                                                                                                                                                                                                                         |
|                                                          | -   Consistent with the reader identifying the reference point (D) on the graph, *projecting an invisible orthogonal line through it*, and locating data point **E**.                                                                                                   |
+----------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ![](static/interpretations/Q2_111_TRI.png){width="500"}  | **Response: K** (also KD)                                                                                                                                                                                                                                               |
|                                                          |                                                                                                                                                                                                                                                                         |
|                                                          | -   indicates an **triangular** (correct) interpretation of the coordinate system                                                                                                                                                                                       |
|                                                          |                                                                                                                                                                                                                                                                         |
|                                                          | -   Consistent with the reader identifying the reference point (D) on the graph, and following its *descending-leftward* *diagonal gridline*, and locating data point **K**.                                                                                            |
+----------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ![](static/interpretations/Q2_111_AK.png){width="500"}   | **Response: AK**                                                                                                                                                                                                                                                        |
|                                                          |                                                                                                                                                                                                                                                                         |
|                                                          | -   indicates an **Tversky** strategy following connecting lines                                                                                                                                                                                                        |
|                                                          | -   Consistent with the reader identifying the reference point (D) on the graph, and following its *descending-leftward* *diagonal gridline*, and locating data point **K** then *continuing* *along the connecting ascending leftward diagonal* locating data point A. |
+----------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ![](static/interpretations/Q2_111_J.png){width="500"}    | **Response: J**                                                                                                                                                                                                                                                         |
|                                                          |                                                                                                                                                                                                                                                                         |
|                                                          | -   indicates an **Tversky** strategy following connecting lines                                                                                                                                                                                                        |
|                                                          | -   Consistent with the reader identifying the reference point (D) on the graph, and following its horizontal gridline to the y-axis, locating data point J.                                                                                                            |
+----------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ![](static/interpretations/Q2_111_D.png){width="500"}    | **Response: D**                                                                                                                                                                                                                                                         |
|                                                          |                                                                                                                                                                                                                                                                         |
|                                                          | -   the reader selected only the **reference point**                                                                                                                                                                                                                    |
|                                                          | -   Consistent with the reader identifying the reference point (D) on the graph                                                                                                                                                                                         |
|                                                          | -   Possibly indicates uncertainty or confusion                                                                                                                                                                                                                         |
+----------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

+-------------------------------------------------------+------------------------------------------+
| B                                                     | C                                        |
+=======================================================+==========================================+
| ![](static/interpretations/Q2_111_B.png){width="500"} | ![](static/interpretations/Q2_111_C.png) |
+-------------------------------------------------------+------------------------------------------+

#### Question #3

![Q3---Control Condition](static/questions/Q3_111.png){#fig-Q3-111}

```{r}
#| label: Q3-CONTROL-KEY

q <- keys_raw %>% filter(condition == 111) %>% filter(Q==3)
ignore <- q %>% select("REF_POINT")
answers <- q %>% select("TRIANGULAR", "ORTHOGONAL", "SATISFICE", "TV_max","TV_start", "TV_end", "TV_dur") %>% unlist()
ves <- q %>% select("TRI_allow", "ORTH_allow", "SATISFICE_allow", "TV_max_allow","TV_start_allow","TV_end_allow", "TV_dur_allow")%>% unlist()
options <- q %>% select("OPTIONS")
question = q %>%  select("TEXT")
scores <- c("Triangular", "Orthgonal", "Satisficing", "Tversky [maximal]", "Tversky [start diagonal]", 
            "Tversky [end diagonal]", "Tversky [duration line]")
d = tibble(interpretation = scores, answer = answers, allowed=ves)
d$answer <- replace_na(d$answer, "")
d$allowed <- replace_na(d$allowed, "")

title = paste("Answer Key | Q3 Control Condition : ", question)
cols = c("interpretation", "answer","not penalized")

d %>% kbl(caption = title, col.names = cols) %>% kable_classic() %>% 
  footnote(general = paste("15 response options: ", options), general_title = "Note: ",footnote_as_chunk = T) 
```

```{r}
#| label: Q3-CONTROL-RESPONSES
#| warning: false

title <- "Frequency of Selected Response Options for Question #3 (Control Condition)"
names = c("response","n","interpretation","absolute","tri","orth","satisfice","tv_max","tv_start","tv_end","tv_dur")

df_items %>% filter(q == 3 & condition == 111) %>% group_by(response) %>% 
  dplyr::summarise( count = n(), 
                    nice = unique(score_niceABS),
                    triangular = unique(score_TRI), 
                    orthogonal =  unique(score_ORTH),
                    satisficing =  unique(score_SATISFICE),
                    tversky_max = unique(score_TV_max),
                    tversky_start = unique(score_TV_start),
                    tversky_end = unique(score_TV_end),
                    tversky_duration = unique(score_TV_duration),
                    interpretation = unique(interpretation)) %>% 
  arrange(interpretation, desc(count)) %>% 
  select(response, count, interpretation, nice, triangular, orthogonal, 
         satisficing, tversky_max, tversky_start, tversky_end, tversky_duration) %>% 
  kbl(caption = title, col.names = names) %>%  kable_classic() %>% 
  add_header_above(c(" " = 3, "Strict Score" = 1, "Interpretation Scores"=7)) %>%
  pack_rows("Orthogonal", 1, 1) %>% 
  pack_rows("Triangular", 2, 3) %>% 
  pack_rows("Lines-Connect", 4, 8) %>% 
  pack_rows("other", 9, 17) 

```

TODO

-   address RESPONSE FKE which is classified as Triangular but doesn't seem to fit this interpretation?
-   Should O,K be considered Tvresky ?
-   consider adding trapdoor on n_q, such that score is penalized (OR interpretation is not predicted?) if the Ss selects more than 1 extra options, or is missing more than 2 options?
-   LEFT OFF HERE

+------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| What shift(s) begin when C ends?               |                                                                                                                                                                                                                                                                                           |
+================================================+===========================================================================================================================================================================================================================================================================================+
| ![](static/interpretations/Q3_111_Z.png)       | **Response: Z**                                                                                                                                                                                                                                                                           |
|                                                |                                                                                                                                                                                                                                                                                           |
|                                                | -   indicates an **orthogonal** (incorrect) interpretation of the coordinate system                                                                                                                                                                                                       |
|                                                | -   Consistent with the reader identifying the reference point (C) then using the duration encoded on the y-axis (2) , project along the horizontal gridline by two hours, and then *project an invisible orthogonal line through that time (12PM)* locating data point **Z**.            |
+------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ![](static/interpretations/Q3_111_F.png)       | **Response: F**                                                                                                                                                                                                                                                                           |
|                                                |                                                                                                                                                                                                                                                                                           |
|                                                | -   indicates a (correct) **triangular** interpretation of the coordinate system                                                                                                                                                                                                          |
|                                                | -   Consistent with the reader identifying the reference point (C) on the graph, and following the *descending gridline* to the x-axis to identify the end-time (11AM) and then following the *ascending gridline* to identify datapoints starting at 11AM and locating data point **F**. |
+------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ![](static/interpretations/Q3_111_AUB.png)     | **Response: AUB (also A)**                                                                                                                                                                                                                                                                |
|                                                |                                                                                                                                                                                                                                                                                           |
|                                                | -   indicates a Tversky strategy following connecting lines (duration)                                                                                                                                                                                                                    |
|                                                | -   Consistent with the reader identifying the reference point (C) on the graph, and following the *horizontal y-axis gridline* and locating data points **A U B**.                                                                                                                       |
+------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ![]()![](static/interpretations/Q3_111_OJ.png) | **Response: OJ**                                                                                                                                                                                                                                                                          |
|                                                |                                                                                                                                                                                                                                                                                           |
|                                                | -   indicates a Tversky strategy following connecting lines (start-time)                                                                                                                                                                                                                  |
|                                                | -   Consistent with the reader identifying the reference point (C) on the graph, and following the *ascending diagonal gridline* and locating data points **O J**.                                                                                                                        |
+------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ![](static/interpretations/Q3_111_C.png)       | **Response: C**                                                                                                                                                                                                                                                                           |
|                                                |                                                                                                                                                                                                                                                                                           |
|                                                | -   the participant selected the point referenced in the question                                                                                                                                                                                                                         |
|                                                | -   possibly indicates confusion or uncertainty                                                                                                                                                                                                                                           |
+------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ![](static/interpretations/Q3_111_frenzy.png)  | **Response: AIOZFHJXKUDEGB**                                                                                                                                                                                                                                                              |
|                                                |                                                                                                                                                                                                                                                                                           |
|                                                | -   the participant selects *all* (or nearly all) the data points                                                                                                                                                                                                                         |
|                                                | -   possibly indicates confusion or uncertainty                                                                                                                                                                                                                                           |
+------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Six responses (from 9 participants) appear inconsistent with any interpretation.

+-----------------------------------------------+-------------------------------------------+-------------------------------------------+
| K (**n=3)**                                   | AH (n=1)                                  | DE (n=1)                                  |
+===============================================+===========================================+===========================================+
| ![]()![](static/interpretations/Q3_111_K.png) | ![](static/interpretations/Q3_111_AH.png) | ![](static/interpretations/Q3_111_ED.png) |
+-----------------------------------------------+-------------------------------------------+-------------------------------------------+
| **UE (n=1)**                                  | **U (n=1)**                               | **E (n=1)**                               |
+-----------------------------------------------+-------------------------------------------+-------------------------------------------+
| ![](static/interpretations/Q3_111_UE.png)     | ![](static/interpretations/Q3_111_U.png)  | ![](static/interpretations/Q3_111_E.png)  |
+-----------------------------------------------+-------------------------------------------+-------------------------------------------+

#### Question #4

\[PLACEHOLDER --- NOT YET CONSIDERED THIS QUESTION\]

![Q4---Control Condition](static/questions/Q4_111.png){#fig-Q4-111}

```{r}
#| label: Q4-CONTROL-KEY

q <- keys_raw %>% filter(condition == 111) %>% filter(Q==4)
ignore <- q %>% select("REF_POINT")
answers <- q %>% select("TRIANGULAR", "ORTHOGONAL", "SATISFICE", "TV_max","TV_start", "TV_end", "TV_dur") %>% unlist()
ves <- q %>% select("TRI_allow", "ORTH_allow", "SATISFICE_allow", "TV_max_allow","TV_start_allow","TV_end_allow", "TV_dur_allow")%>% unlist()
options <- q %>% select("OPTIONS")
question = q %>%  select("TEXT")
scores <- c("Triangular", "Orthgonal", "Satisficing", "Tversky [maximal]", "Tversky [start diagonal]", 
            "Tversky [end diagonal]", "Tversky [duration line]")
d = tibble(interpretation = scores, answer = answers, allowed=ves)
d$answer <- replace_na(d$answer, "")
d$allowed <- replace_na(d$allowed, "")

title = paste("Answer Key | Q4 Control Condition : ", question)
cols = c("interpretation", "answer","not penalized")

d %>% kbl(caption = title, col.names = cols) %>% kable_classic() %>% 
  footnote(general = paste("15 response options: ", options), general_title = "Note: ",footnote_as_chunk = T) 
```

```{r}
#| label: Q4-control
#| warning: false

title <- "Frequency of Selected Response Options for Question #4 (Control Condition)"
names = c("response","n","interpretation","absolute","tri","orth","satisfice","tv_max","tv_start","tv_end","tv_dur")

df_items %>% filter(q == 4 & condition == 111) %>% group_by(response) %>% 
  dplyr::summarise( count = n(), 
                    nice = unique(score_niceABS),
                    triangular = unique(score_TRI), 
                    orthogonal =  unique(score_ORTH),
                    satisficing =  unique(score_SATISFICE),
                    tversky_max = unique(score_TV_max),
                    tversky_start = unique(score_TV_start),
                    tversky_end = unique(score_TV_end),
                    tversky_duration = unique(score_TV_duration),
                    interpretation = unique(interpretation)) %>% 
  arrange(interpretation, desc(count)) %>% 
  select(response, count, interpretation, nice, triangular, orthogonal, 
         satisficing, tversky_max, tversky_start, tversky_end, tversky_duration) %>% 
  kbl(caption = title, col.names = names) %>%  kable_classic() %>% 
  add_header_above(c(" " = 3, "Strict Score" = 1, "Interpretation Scores"=7)) %>%
  pack_rows("Triangular", 1, 1) %>% 
  pack_rows("Orthogonal", 2, 5) %>% 
  pack_rows("Lines-Connect", 6, 6) %>% 
  pack_rows("other", 7, 16) 


```

In Question 4 we see more than one variant of an orthogonal interpretation emerge.


| Orthogonal                                                                                                                                                                                                             | Orthogonal-LinesConnecting                                                                                                                                                                                                                                                                                                                                                                      |

| ![](static/interpretations/Q4_111_ORTH.png) \|                                                                                                                                                                         |                                                                                                                                                                                                                                                                                                                                                                                                 |

| If the subject calculates end time for each data point (using duration on the y axis), they find that an (incorrect) projection of point U 'end time' intersects with the (incorrect) orthogonal projection of 4:00PM. | Alternatively, some subjects selected points E and D which intersect with an orthogonal projection from 4:00pm. We call this an 'orthogonal-lines connect" strategy, because it (incorrectly) adapts the orthogonal procedure for finding events that *start* at 4:00pm in order to find those that *end* at 4:00pm, thus selecting any data point with an orthogonal intersection with 4:00pm. |


#### Question #5

\[PLACEHOLDER --- NOT YET CONSIDERED THIS QUESTION\]

```{r}
#| label: Q5-CONTROL-KEY

q <- keys_raw %>% filter(condition == 111) %>% filter(Q==5)
ignore <- q %>% select("REF_POINT")
answers <- q %>% select("TRIANGULAR", "ORTHOGONAL", "SATISFICE", "TV_max","TV_start", "TV_end", "TV_dur") %>% unlist()
ves <- q %>% select("TRI_allow", "ORTH_allow", "SATISFICE_allow", "TV_max_allow","TV_start_allow","TV_end_allow", "TV_dur_allow")%>% unlist()
options <- q %>% select("OPTIONS")
question = q %>%  select("TEXT")
scores <- c("Triangular", "Orthgonal", "Satisficing", "Tversky [maximal]", "Tversky [start diagonal]", 
            "Tversky [end diagonal]", "Tversky [duration line]")
d = tibble(interpretation = scores, answer = answers, allowed=ves)
d$answer <- replace_na(d$answer, "")
d$allowed <- replace_na(d$allowed, "")

title = paste("Answer Key | Q5 Control Condition : ", question)
cols = c("interpretation", "answer","not penalized")

d %>% kbl(caption = title, col.names = cols) %>% kable_classic() %>% 
  footnote(general = paste("15 response options: ", options), general_title = "Note: ",footnote_as_chunk = T) 
```

```{r Q5-control}
#| warning: false

title <- "Frequency of Selected Response Options for Question #5 (Control Condition)"
names = c("response","n","interpretation","absolute","tri","orth","satisfice","tv_max","tv_start","tv_end","tv_dur")

df_items %>% filter(q == 5 & condition == 111) %>% group_by(response) %>% 
  dplyr::summarise( count = n(), 
                    nice = unique(score_niceABS),
                    triangular = unique(score_TRI), 
                    orthogonal =  unique(score_ORTH),
                    satisficing =  unique(score_SATISFICE),
                    tversky_max = unique(score_TV_max),
                    tversky_start = unique(score_TV_start),
                    tversky_end = unique(score_TV_end),
                    tversky_duration = unique(score_TV_duration),
                    interpretation = unique(interpretation)) %>% 
  arrange(interpretation, desc(count)) %>% 
  select(response, count, interpretation, nice, triangular, orthogonal, 
         satisficing, tversky_max, tversky_start, tversky_end, tversky_duration) %>% 
  kbl(caption = title, col.names = names) %>%  kable_classic() %>% 
  add_header_above(c(" " = 3, "Strict Score" = 1, "Interpretation Scores"=7)) %>%
  pack_rows("Triangular", 1, 1) %>% 
  pack_rows("Orthogonal", 2, 9) %>% 
  pack_rows("Lines Connect", 10, 10) %>% 
  pack_rows("other", 11, 22) 


```

TODO note the compelling cases of internal inconsistency (HJDE)

### Impasse Condition

We can compare these responses to those produced by participants in the experimental impasse condition (`condition` = 121).

#### Question #1


![Question 1 --- Impasse Condition](static/questions/Q1_121.png){#fig-Q1-121}

```{r}
#| label: Q1-IMPASSE-KEY

q <- keys_raw %>% filter(condition == 121) %>% filter(Q==1)
ignore <- q %>% select("REF_POINT")
answers <- q %>% select("TRIANGULAR", "ORTHOGONAL", "SATISFICE", "TV_max","TV_start", "TV_end", "TV_dur") %>% unlist()
ves <- q %>% select("TRI_allow", "ORTH_allow", "SATISFICE_allow", "TV_max_allow","TV_start_allow","TV_end_allow", "TV_dur_allow")%>% unlist()
options <- q %>% select("OPTIONS")
question = q %>%  select("TEXT")
scores <- c("Triangular", "Orthgonal", "Satisficing", "Tversky [maximal]", "Tversky [start diagonal]", 
            "Tversky [end diagonal]", "Tversky [duration line]")
d = tibble(interpretation = scores, answer = answers, allowed=ves)
d$answer <- replace_na(d$answer, "")
d$allowed <- replace_na(d$allowed, "")

title = paste("Answer Key | Q1 Impasse Condition : ", question)
cols = c("interpretation", "answer","not penalized")

d %>% kbl(caption = title, col.names = cols) %>% kable_classic() %>% 
  footnote(general = paste("15 response options: ", options), general_title = "Note: ",footnote_as_chunk = T) 
```

Notice that there **is not orthogonal answer** for this question. This is the purpose of the impasse condition, to remove the possibility of selecting the orthogonal answer, we expect learners will be more likely to restructure their understanding of the coordinate system, and arrive at a correct (triangular) interpretation. 


```{r}
#| label: Q1-IMPASSE-RESPONSES
#| warning: false

title <- "Frequency of Selected Response Options for Question #1 (Impasse Condition)"
names = c("response","n","interpretation","absolute","tri","orth","tv_max","tv_start","tv_end","tv_dur")

df_items %>% filter(q == 1 & condition == 121) %>% group_by(response) %>% 
  dplyr::summarise( count = n(), 
                    nice = unique(score_niceABS),
                    triangular = unique(score_TRI), 
                    orthogonal =  unique(score_ORTH),
                    tversky_max = unique(score_TV_max),
                    tversky_start = unique(score_TV_start),
                    tversky_end = unique(score_TV_end),
                    tversky_duration = unique(score_TV_duration),
                    interpretation = unique(interpretation)) %>% 
  arrange(interpretation, desc(count)) %>% 
  select(response, count, interpretation, nice, triangular, orthogonal, 
         tversky_max, tversky_start, tversky_end, tversky_duration) %>% 
  kbl(caption = title, col.names = names) %>%  kable_classic() %>% 
  add_header_above(c(" " = 3, "Strict Score" = 1, "Interpretation Scores"=6)) %>%
  pack_rows("Triangular", 1, 1) %>% 
  pack_rows("Lines-Connect", 2, 4) %>% 
  pack_rows("Other", 4, 12) %>% 
  footnote(general = "n = number of responses in sample", 
           general_title = "Note: ",footnote_as_chunk = T) 

```

### Peeking

#### Score Distributions

```{r}

gf_density(~ score_niceABS, fill = ~condition, data = df_items) %>% 
  gf_facet_wrap( ~ condition, labeller = label_both) + 
  labs( x = "Item Absolute Score", title = "Distribution of Absolute Score") + theme_minimal() + theme(legend.position = "blank")


gf_density(~ score_TRI, fill = ~condition, data = df_items) %>% 
  gf_facet_wrap( ~ condition, labeller = label_both) + 
  labs( x = "Item TRIANGULAR Score", title = "Distribution of Triangular Score") + theme_minimal() + theme(legend.position = "blank")


gf_bar(~ interpretation, fill = ~condition, data = df_items) %>% 
  gf_facet_grid( ~condition, labeller = label_both) + 
  labs( title = "Distribution of Interpretations") + theme_minimal() + theme(legend.position = "blank")

```

#### Scores through Time

```{r}

gf_histogram(~ score_niceABS, fill = ~condition, data = df_items) %>% 
  gf_facet_grid(q ~ condition, labeller = label_both) + 
  labs( x = "Item Absolute Score", title = "Distribution of Absolute Score") + theme_minimal() + theme(legend.position = "blank")


gf_density(~ score_TRI, fill = ~condition, data = df_items) %>% 
  gf_facet_grid(q ~ condition, labeller = label_both) + 
  labs( x = "Item TRIANGULAR Score", title = "Distribution of Triangular Score") + theme_minimal() + theme(legend.position = "blank")

gf_density(~ score_ORTH, fill = ~condition, data = df_items) %>% 
  gf_facet_grid(q ~ condition, labeller = label_both) + 
  labs( x = "Item ORTHGONAL Score", title = "Distribution of Orthogonal Score") + theme_minimal() + theme(legend.position = "blank")


gf_bar(~ interpretation, fill = ~condition, data = df_items) %>% 
  gf_facet_grid( q ~condition, labeller = label_both) + 
  labs( title = "Distribution of Interpretations") + theme_minimal() + theme(legend.position = "blank")

```

#### Score Relationships

```{r}

gf_jitter( score_TRI ~ score_ORTH, fill = ~condition, alpha = 0.5, data = df_items) %>% 
  gf_facet_wrap( ~ condition, labeller = label_both) + 
  labs( x = "ORTH score", y = "TRI score", 
        title = "Relationship between ORTH and TRI scores") + theme_minimal() + theme(legend.position = "blank")

```

#### Scores by Subject

```{r}
subject_scores <- df_items %>% group_by(subject) %>% dplyr::summarize(
  TRI = sum(score_TRI),
  ORTH = sum(score_ORTH),
  # DISCRIM = sum(score_TRI + score_ORTH),
  ABSOLUTE = sum(score_niceABS),
  condition = unique(condition)
)
```

```{r}
gf_histogram(~ ABSOLUTE, fill = ~condition, data = subject_scores) %>% 
  gf_facet_wrap( ~ condition, labeller = label_both) + 
  labs( x = "Item Absolute Score", title = "Distribution of Absolute Score") + theme_minimal() + theme(legend.position = "blank")


gf_density(~ TRI, fill = ~condition, data = subject_scores) %>% 
  gf_facet_wrap( ~ condition, labeller = label_both) + 
  labs( x = "Item TRIANGULAR Score", title = "Distribution of Triangular Score") + theme_minimal() + theme(legend.position = "blank")

```

TODO TRAPDOOR?

SET T = options that result in -1 score (trapdoor)

TODO: TEST first with NO trapdoor, and see what the scores yield, then if the responses can be scaled based on comparing subscores

f_partialP \<- function(t,p,f,q) {

t = number of correct-selected options p = number of true options f = number of incorrect-selected options q = number of false options n = number of options + p + q return( (t / p) - (f/q)) }

To prepare for partial scoring \[-1/q, + 1/p\], we first need to define the parameters t, p , f, q

Our approach to calculating an ORTHOGONAL PARTIAL score is as follows:

-   1/p for each correct-selected

-   -1/q for each incorrect-selected (except 'allowed' based on reference point and visual error)

-   trapdoor : default to -1 if select triangular

## TODO EXPORT

Summarize by subject Export subjects Export items

-   does response time predict interpretation vs. non interpretation?

Finally, we export the scored items and summarized subjects.

```{r}
#| label: EXPORT-SCORES

#prep items
df_items <- df_items %>% select(-best) %>% mutate(
  tv_type = as.factor(tv_type)
)

#SAVE FILES
# write.csv(df_subjects,"data/1-study-level/sgc3a_participants.csv", row.names = FALSE)
write.csv(df_items,"data/2-scored-data/sgc3a_scored_items.csv", row.names = FALSE)


#SAVE R Data Structures 
#export R DATA STRUCTURES (include codebook metadata)
# rio::export(df_subjects, "data/1-study-level/sgc3a_participants.rds") # to R data structure file
rio::export(df_items, "data/2-scored-data/sgc3a_scored_items.rds") # to R data structure file

```

## RESOURCES

*set operations*

<https://stat.ethz.ch/R-manual/R-devel/library/base/html/sets.html>

*kableExtra tables*

<https://haozhu233.github.io/kableExtra/awesome_table_in_html.html#grouped_columns__rows>

```{r}
sessionInfo()
```

### TODO A Discriminant Score

\[TODO old text from creating discriminant score; reconsider this\]

Though it appears the Partial $[-1/q, +1/p]$ scheme is a more appropriate scoring method for differentiating between meaningful patterns of responses, it does have one significant limitation: it treats all incorrectly selected answer options in the same way.

In the case of the SGC study paradigm, the choice of which options the subject selects reveals important information about their understanding of the graph stimulus. Specifically, there are certain patterns of options that correspond to a *triangular* versus *orthogonal* interpretations. In the previous example, rows 2 and 3 both indicate a subject has selected the correct option (A) plus one additional option (B or O). Both responses receive the same score under $[-1/q, +1/q]$. These two responses may be very meaningfully different, however if one of the alternate options chosen indicates a different interpretation of the stimulus. The inclusion of data-point B might be reasonable under some degree of visual tracing error, while the inclusion of data-point O might indicate a cartesian misinterpretation of the coordinate system. Essentially, some answer options are *more incorrect* than others. We want to be able to differentiate between these responses.

To accomplish this task, we need to sets of interpretation-consistent options for each item. Based on our prior work, we define **four interpretations** for which to define options. We can think of these as four different answer keys, each defining the set of 'correct' options (those that should be selected) under each interpretation of the graph.

1.  Triangular : the (true, actually correct) triangular interpretation of the coordinate system; indicated by data points intersecting the appropriate diagonal projection from the x-axis.
2.  Orthogonal: the (incorrect but most common) cartesian interpretation of the coordinate system; indicated by data points intersecting an (invisible) orthogonal projection from the x-axis.
3.  Lines-Connect: an (incorrect) interpretation that is partially-triangular, insofar as it is indicated by data points intersecting any diagonal projection from the x-axis (not necessarily the *correct* projection).
4.  Satisficing: an (incorrect) interpretation that indicated by selecting the data points nearest to the (invisible) orthogonal projection from the x-axis; indicates an orthogonal interpretation in absence of an available orthogonal intersect.

TODO FIX THIS SECTION ONWARDS ... RESPONSE SETS NEED NOT BE MUTUTALLY EXCLUSIVE

Thus for *each* item, in the graph comprehension task, we will define five sets, whose members constitute a partition of the set of answer options.

```{=tex}
\begin{align}
Q &= \text{the (universal) set of all answer options } \\
\\
T &=  \{o:o \:is\:triangular  \}, |T| \ne 0  \\
R &=  \{o:o \:is\:orthogonal \} \\
L &=  \{o:o \:is\:line-connecting \} \\
S &=  \{o:o \:is\:satisficing \} \\
\\
\emptyset &= T \cap R \cap L \cap S  \: \text{(the interpretation sets are disjoint)}\\
D &= Q - \{T \cup R \cup L \cup S \} , \text{(distractors; the remaining options not consistent with any interpretation})
\\
\end{align}
```
For example, for the following sample stimuli, TODO IMAGE

```{=tex}
\begin{align}
Q &= \{a, b, c, d, e, f, g \} \\
  &= \{ \{a \}\}, \{b\}, \{c,d\}, \{e\},  \{f,g\}\} \\
\\
T &= \{ a \} \\
R &= \{ b \} \\
L &= \{ c,d \} \\
S &= \{ e \} \\
D &= \{ f, g\} \\
\end{align}
```
To capture this important source of variation, we can apply the idea behind the partial scoring $[-1/q, +1/p]$ scheme in combination with the response option subgroups given by the graph interpretations to produce a single score (scaled from $-1$ to $+1$) that captures the *nature* of the respondent's partial knowledge.

A **Discriminant Score** will offer:

-   +1 for a complete triangular response
-   -1 for a complete orthogonal response
-   +/- fraction of complete triangular or orthogonal response
-   0 for non-strategy responses
-   0 for blank (empty) responses

```{=tex}
\begin{align}
\text{Score}_{discriminant} &= 0 + 1*(t_s / t) - 1 * (r_s / r) + 0*(d_s / d) \\
&= (t_s / t) - (r_s / r) 
\end{align}
```
Where:

-   $t = |T|$ number of triangular-correct options (consistent with triangular interpretation)
-   $r = |R| =$ number of orthogonal-correct options (consistent with orthogonal interpretation)
-   $d$ = number of non-strategy options (not consistent with either interpretation)
-   $n$ = total number of response options (equals the number of checkboxes in the question; equals the number of data points in the stimulus graph)
-   $n = t + r + d$ (15 for scaffold phase, 18 for test phase)
-   $t_s \ge 0$ number of triangular-correct options selected
-   $r_s \ge 0$ = number of orthogonal-correct options selected
-   $d_s \ge 0$ = number of non-strategy options options selected
-   $s \ge 0$ = number of options selected
-   $s = t_s + r_s + d_s$

TODO:: add 0.5*(tversky) - 0.5*(satisficing)

```{r}
f_discrim <- function(t_s,t,r_s,r){
  return((t_s / t) - (r_s / r))
}
```
