---
subtitle: 'Study SGC3A | (Lab) Hypothesis Testing'
# YAML FOR generating modelsummary tables
# uncomment to run those  cells only 
# \usepackage{booktabs}
# \usepackage{siunitx}
# \newcolumntype{d}{S[input-symbols = ()]}
---

\newpage

# Hypothesis Testing {#sec-SGC3A-lab-hypotesting}

**TODO**

-   run (online replication models) for item-level data, once approach is reviewed for the lab-based data

*The purpose of this notebook is test the hypotheses that determined the design of the SGC3A study.*

```{r}
#| label: SETUP
#| warning : false
#| message : false

#misc utilities
library(Hmisc) # %nin% operator
library(broom) #tidy model output
# library(modelr)
library(distributional)
# library(jtools)
# library(pwr) #power analysis

#visualization
# library(ggpubr) #arrange plots
# library(cowplot) #arrange shift function plots
# library(ggformula) #easy graphs
# # library(vcd) #mosaic plots
# # library(vcdExtra) #mosaic plots
library(kableExtra) #printing tables
library(sjPlot) #visualize model coefficients
library(ggdist) #uncertainty viz
library(gghalves) # plots. in half
library(ggbeeswarm) # violin plot stuffs
library(statsExpressions)
library(ggstatsplot) #plots with stats
library(modelsummary) #latex tables for models!

# 
# #models and performance
# library(rstatix) #helpful testing functions incl wilcoxon, etc
library(report) #easystats reporting
library(see) #easystats visualization
library(performance) #easystats model diagnostics
library(parameters) #easystats model summary and vis
# library(qqplotr) #confint on qq plot
# library(gmodels) #contingency table and CHISQR
# library(equatiomatic) #extract model equation
# library(pscl) #zeroinfl / hurdle models 
library(lme4) #mixed effects models
library(lmerTest) #for CIs in glmer
# library(ggeffects) #visualization log regr models
library(nnet) #multinomial logistic regression [not mixed] #no p values
library(mclogit) #frequentist mixed multinomial logistic regression [mblogit] #gives p values
library(brms) #bayesian mixed multinomials [+ other bayesian reg models]

library(tidyverse) #ALL THE THINGS

#OUTPUT OPTIONS
library(dplyr, warn.conflicts = FALSE)
options(dplyr.summarise.inform = FALSE)
options(ggplot2.summarise.inform = FALSE)
options(scipen=1, digits=3)

#GRAPH THEMEING
# theme_set(theme_minimal()) 

# Custom ggplot theme to make pretty plots
# Get the font at https://fonts.google.com/specimen/Barlow+Semi+Condensed
theme_clean <- function() {
  theme_minimal(base_family = "Barlow Semi Condensed") +
    theme(panel.grid.minor = element_blank(),
          plot.title = element_text(family = "BarlowSemiCondensed-Bold"),
          axis.title = element_text(family = "BarlowSemiCondensed-Medium"),
          strip.text = element_text(family = "BarlowSemiCondensed-Bold",
                                    size = rel(1), hjust = 0),
          strip.background = element_rect(fill = "grey80", color = NA))
}

set_theme(base = theme_clean())

```

**Research Questions**

In SGC3A we set out to answer the following question: Does posing a mental impasse improve performance on the interval graph comprehension task?

**Experimental Hypothesis**\
*Learners posed with scenario designed to evoke a mental impasse will be more likely to correct interpret the graph.*

-   H1A \| Learners in the IMPASSE condition will be more likely to correctly answer the first question than learners in CONTROL.
-   H1B \| Learners in the IMPASSE condition will score higher overall than learners in CONTROL.

**Null Hypothesis**\
*No significant differences in performance will exist between learners in the IMPASSE and CONTROL conditions.*

```{r}
#| label: IMPORT-DATA
#| warning : false
#| message : false

# HACK WD FOR LOCAL RUNNING?
# imac = "/Users/amyraefox/Code/SGC-Scaffolding_Graph_Comprehension/SGC-X/ANALYSIS/MAIN"
# mbp = "/Users/amyfox/Sites/RESEARCH/SGCâ€”Scaffolding Graph Comprehension/SGC-X/ANALYSIS/MAIN"
# setwd(mbp)

#IMPORT DATA 
df_subjects <- read_rds('analysis/SGC3A/data/2-scored-data/sgc3a_scored_participants.rds') %>% filter(mode == "lab-synch")

df_items <- read_rds('analysis/SGC3A/data/2-scored-data/sgc3a_scored_items.rds') %>% 
   mutate (
    q = as.factor(q), #QUESTION
    # CODES TVERSKY AS TRI-LIKE
    # state = recode_factor(score_SCALED, #for ordinal
    #                      "-1" = "orth-like",
    #                      "-0.5" = "unknown",
    #                      "0" = "unknown",
    #                      "0.5" = "tri-like",
    #                      "1" = "tri-like"),
    # CODES TVERSKY AS OTHER
    state = recode_factor(score_SCALED, #for ordinal
                         "-1" = "orthogonal",
                         "-0.5" = "other",
                         "0" = "other",
                         "0.5" = "tri-like",
                         "1" = "triangular"),
    state = as.ordered(state)) %>% 
  filter(mode == "lab-synch")

```

## H1A \| Q1 ACCURACY

**Do Ss in the IMPASSE condition have a higher likelihood of producing a correct response to the first question?**

The graph comprehension task includes 15 questions completed in sequence. But the first question the reader encounters (Q1) is the most important, as it is their *first exposure* to the unconventional triangular coordinate system.

+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Research Question     | Does the frequency of correct (vs) incorrect responses on the first question differ by condition? \[Is response accuracy independent of condition?\]                                                                                   |
+=======================+========================================================================================================================================================================================================================================+
| **Hypothesis**        | H1A \| Ss in the IMPASSE condition will have a higher likelihood of correctly responding to the first question than those in the CONTROL condition                                                                                     |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Data**              | -   data: `df_items` where `q == 1`                                                                                                                                                                                                    |
|                       | -   outcome: *accuracy* ( factor(incorrect/correct) from `score_niceABS` \[absolute score\]                                                                                                                                            |
|                       | -   predictor: `condition` \[between-subjects factor\]                                                                                                                                                                                 |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Analysis Strategy** | 1.  Logistic Regression on `accuracy` predicted by `condition`                                                                                                                                                                         |
|                       |     -   account for difference in odds of correct score by condition                                                                                                                                                                   |
|                       |                                                                                                                                                                                                                                        |
|                       | Alternatives:                                                                                                                                                                                                                          |
|                       |                                                                                                                                                                                                                                        |
|                       | -   Chi-Square test of independence on outcome `accuracy` by `condition`                                                                                                                                                               |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Notes**             | -   CHIQ SQR is simplest method to examine independence of two categorical factors; LOGISTIC REGRESSION is recommended for binomial \~ continuous; though with regression we can quantify the size of the effect and overall model fit |
|                       | -   independence assumption : (CHI SQR) as we only consider responses on the first question, each observation corresponds to an individual subject, and are thus independent                                                           |
|                       | -   cell frequency : (CHI SQR) expected frequency in each cell of the contingency table is greater than 5 (more than 5 correct , more than 5 incorrect responses)                                                                      |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

#### Setup
```{r}
#| label: SETUP-Q1ACC

#:::::::: PREP DATA
df <- df_items %>% filter(q==1) %>% mutate(
  accuracy = recode_factor(score_niceABS, "0" ="incorrect","1"="correct")
) %>% dplyr::select(accuracy, pretty_condition)

```

#### Describe 
```{r}
# #:::::::: GROUPED PROPORTIONAL BAR CHART
# gf_props(~accuracy, fill = ~pretty_condition,
#        position = position_dodge(), data = df) %>%
#   gf_facet_grid(~pretty_mode) +
#    labs(x = "Correct Response on Q 1",
#        title = "Accuracy on First Question by Condition",
#        subtitle="Impasse Condition yields a greater proportion of correct responses") #theme(legend.position = "none")

#:::::::: STACKED BAR CHART
df %>% 
  ggplot(data = .,
         mapping = aes(x = pretty_condition,
                       fill = accuracy)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_brewer(palette = "Set1")  +
  # facet_wrap(~pretty_mode) + 
   labs(#y = "Correct Response on Q 1",
       title = "Q1 Accuracy",
       x = "Condition",
       fill = "",
       subtitle="Impasse Condition yields a greater proportion of correct responses")

```

A proportional bar chart visualizing the proportion of incorrect (vs) correct responses in each condition for each data collection modality (left/right facet) reveals that the pattern of responses appear the same regardless of the data collection modality. In both data collection sessions, the proportion of incorrect responses is much greater than the proportion of correct responses, regardless of condition (marginal probability of incorrect). In the impasse condition, the difference in proportions is smaller than the control condition (conditional probability of success in impasse; (i.e) There are more correct responses in the impasse condition than the control condition).

```{r}

#::::::::::::DESCRIPTIVES

paste("Proportions of Correct Responses by Condition")
table(df$accuracy, df$pretty_condition) %>% addmargins(2) %>% #display sum for row
      prop.table(margin=2) %>%  #return proportion (of column)
      addmargins(1) #sanity check sum of columns

paste("Number of Correct Responses by Condition")
table(df$accuracy, df$pretty_condition) %>% addmargins(2) %>% #display sum for row
      addmargins(1) #sanity check sum of columns
```

#### LOGISTIC REGRESSION

Fit a logistic regression predicting accuracy (absolute score) (n = `r nrow(df)`) by condition (k = 2).\

-   Parameter estimate: $\beta_{0}$ = Log Odds of (correct) responses in CONTROL condition
-   $e^{\beta_{0}}$ = ODDS of correct response in CONTROL condition
-   Parameter estimate: $\beta_{1}$ = $\beta_{1impasse}$ Log Odds (Log OR; change in odds for correct response in impasse (vs) control \[log scale\])
-   $e^{\beta_{1}}$ = ODDS RATIO of correct response in IMPASSE (vs) CONTROL
-   **Null hypothesis**:$\beta_{impasse} \le 0$ the odds for a correct response does not change, or decreases
-   **Alternative hypothesis:** $\beta_{impasse} \gt 0$ the odds of a correct response increases

##### Fit Model

*First, we fit a logistic regression with condition as predictor, and compare its fit to an empty (intercept-only) model.*

```{r}
#| label: FIT-Q1ACC-LAB
#| warning: false
#| message: false

# MODEL FITTING ::::::::

#: 1 EMPTY MODEL baseline glm model intercept only
m0 = glm(accuracy ~ 1, data = df, family = "binomial")
# print("EMPTY MODEL")
# summary(m0)

#: 2 CONDITION model
m1 <- glm( accuracy ~ pretty_condition, data = df, family = "binomial")
# print("PREDICTOR MODEL")
# summary(m1)

#: 3 TEST SUPERIOR FIT
paste("AIC wth predictor is lower than empty model?", m0$aic > m1$aic)
test_lrt(m0,m1) #same as anova(m0, m1, test = "Chi")
paste("Likelihood Ratio test is significant? p = ",(test_lrt(m0,m1))$p[2])
```

*The Condition predictor decreases AIC, but the Likelihood Ratio Test is marginal. We proceed to examine the predictor model, as we plan to do a 1-tailed NHST .*

##### Describe

```{r}
#| label: MODEL-Q1ACC-LOG-LAB

# DESCRIBE MODEL ::::::::::::::::::::::::::::::::::::: 

print("PREDICTOR MODEL [default two-tailed sig test]")
summary(m1)
car::Anova(m1)

# MANUAL ONE-SIDED SIGTEST ::::::::::::::::::::::::::: 

# one-sided (right tail) z test for B COEFFICIENT
#https://stats.stackexchange.com/questions/330655/strategy-for-a-one-sided-test-of-glms-coefficients

#SANITY CHECK 2-tailed test should match the model output
tt <- 2*pnorm(summary(m1)$coefficients[2,3], lower.tail = F)
paste("p value for two-tailed test, null B = 0 : ",round(tt,3))
ot <- pnorm(summary(m1)$coefficients[2,3], lower.tail = F)
paste("BUT we want a one tailed directional, null: B <= 0: ",round(ot,3))
paste("adjusted confint for directional hypothesis")
(dcint <- confint(m1, level = 0.90)) # get 90% for right side))
# https://stats.stackexchange.com/questions/20734/is-a-1-sided-90-prediction-interval-equivalent-to-a-2-sided-95-prediction-inte

#:::::::: INTERPRET COEFFICIENTS

# print("Confidence Interval â€”- LOG ODDS")
# confint(m1) #not adjusted for 1-tailed
print("Coefficients â€”- ODDS RATIOS")
# (e <- cbind( exp(coef(m1)), exp(confint(m1)))) #exponentiated, not adjusted
(e <- cbind( exp(coef(m1)), exp(dcint))) #exponentiated, adjusted

print("MODEL PREDICTIONS")
# Retrieve predictions as probabilities 
# (for each level of the predictor)
pred.control <- predict(m1,data.frame(pretty_condition="control"),type="response")
#this should match : plogis(intercept coefficient)
paste("Probability of success in control,", pred.control)
pred.impasse <- predict(m1,data.frame(pretty_condition="impasse"),type="response")
#this should match : plogis(intercept coefficient + predictor coeff)
paste("Probability of success in impasse,", pred.impasse)
```
##### Inference

**In Dissertation**

**We fit a logistic regression model to explore the effect of experimental condition on probability of a correct answer on the first question. In this model, the effect of condition is statistically significant (z = 1.79, p = 0.04, one-tailed). The model predicts that the odds of a correct response on the first question in the impasse condition increase by nearly 120% ($e^{beta_{impasse}}$ = 2.19, 95% CI \[1.08, 4.63\]) over the control condition. The intercept** $\beta_{0}$ **parameter is also significant, ($e^{b_{0}}$ = 0.19, p \< 0.001, 95% CI \[0.11, 0.33\]) indicating that the odds of a correct response in the control condition are significantly less than even (less than 50/50 chance of correct response in control condition).**

*Equivalent statements:*

-   being in impasse condition increases log odds of correct response by 0.79 (over control)
-   being in impasse increases odds of correct response in impasse over control increases by factor of 2.19
-   probability of correct response in impasse predicted as 30%, vs only 16% in control condition


##### Visualize

```{r}
#| label: VIS-Q1ACC-LOG-LAB
#| message: false
#| warning : false

#SET MODEL
m <- m1

#GGSTATS | MODEL | LOG ODDS 
# ggcoefstats(m1, output = "plot", 
#               conf.level = 0.90) + 
#   labs(x = "Log Odds Estimate", 
#        title = "LOGODDS | Q1 Accuracy ~ condition",
#        subtitle = "(p is for two tailed test)")


#PARAMETERS | MODEL | SIMULATED PARAMETERS
# similar to bayesian dist of estimate
# result <- simulate_parameters(m1)
# #rename params so intercept is plotted 
# result$Parameter[1] <- "condition [control]"
# result$Parameter[2] <- "condition [impasse]"
# plot(result) 

#EQUIVALENCE TEST [not sure if appropriate for log model?]
# https://journals.sagepub.com/doi/10.1177/2515245918770963#:~:text=Consequently%2C%20when%20reporting%20an%20equivalence,values%20is%20smaller%20than%20alpha.
# https://easystats.github.io/parameters/reference/equivalence_test.lm.html
# (result <- equivalence_test(m1, rule = "classic", component = c("all")))
# plot(result,   show_intercept = TRUE) + 
#   scale_y_discrete(labels = c("impasse", "control")) + 
#   labs( title = "Equivalence Test for Model Parameter Estimates")


#PARAMETERS | MODEL | ODDS RATIO 
# result <- model_parameters(m1,exponentiate = TRUE)
# #rename params 
# result$Parameter[1] <- "condition [control]"
# result$Parameter[2] <- "condition [impasse]"
# plot(result,   show_intercept = TRUE) +  labs(
#   title = "Model Parameter Estimates"
# ) + theme_clean() + theme(legend.position="blank")

#SJPLOT | MODEL | ODDS RATIO
#library(sjPlot)
plot_model(m, type = "est",
           vline.color = "red", 
           show.intercept = TRUE, 
           show.values = TRUE,
           p.threshold = 0.1, #manually adjust to account for directional test
           ci.lvl = 0.90 ) +  #manually adjusted for directional test   
  scale_y_continuous() + #remove to put on log scale x axis 
  scale_x_discrete(labels=c("control","impasse"))+
  labs(title = "MODEL ESTIMATE | Q1 Accuracy ~ condition",
       subtitle = "Impasse increases odds of correct response on Q1",
       x = "Condition") + theme_clean()

  
#SJPLOT | MODEL | PROBABILITIES
plot_model(m, type="pred")[[1]] +
  ylim(0,1) + #scale y axis to actual range
  labs(title = "MODEL PREDICTION  | Q1 Accuracy ~ condition",
       subtitle = "Impasse increases probability of correct response on Q1",
       x = "Condition") + theme_clean()

```

```{r}
#SJPLOT | MODEL | TABLE
tab_model(m)

# #MODEL SUMMARY | save latex table
# models <- list("odds ratios" = m1, "(log odds)" = m1)
# notes = list("* p < 0.05, ** p < 0.01, *** p < 0.001",
#              '$sigma^{2}$ = 3.29" N(subject) = 126 $\tau_{00}$(subject) = 22.22 N(question) = 13 $\tau_{00}$(question) = 0.31'
#                )
# 
# modelsummary(models,
#              exponentiate = c(TRUE, FALSE),
#              shape = term ~ model + statistic,
#              fmt = 2, #two digits w/ trailing zero
#              estimate  = "{estimate} {stars}",
#              statistic = "conf.int",
#              gof_map = c("AIC", "sigma"),
#              gof_omit = 'RMSE|ICC|BIC',
#              coef_rename = c("pretty_conditionimpasse" = "Condition[impasse]"),
#              title = 'Accuracy ~ Condition (Mixed Logistic Regression)', 
#              notes = notes,
#              output = "analysis/SGC3A/models/tables/GLMER_OverallAccuracy_lab.tex")
# #              # coef_omit = "Intercept",

```

##### Diagnostics

```{r}
#| label: DIAG-Q1ACC-LOG-LAB
#| message: false
#| warning: false

# print("SANITY CHECK REPORTING")
# report::report(m1)

#print("MODEL PERFORMANCE")
# performance(m1)

print("MODEL DIAGNOSTICS")
check_model(m1)
```


## H1A \| Q1 INTERPRETATION STATE

**Do Ss in the IMPASSE condition offer less-orthogonal interpretations on first question?**

While absolute accuracy score tells us whether a participant successfully interpreted the coordinate system, it doesn't allow us to differentiate between different kinds of incorrect interpretations. Here we examine the (categorical) interpretation state type based on the nature of subject's response, and determine if these interpretations differ by experimental condition. State is a 3-category derived response variable that groups the following interpretations:

-   **"orthogonal"** \[reference category\] includes orthogonal and satisficing responses ==\> indicates a primarily *orthogonal* state of coordinate system understanding

-   **"other"** includes: blank, reference point, responses that can't be classified (including selecting all datapoints), =\> indicates an uncertain or unidentifiable state of coordinate system understanding, but one that is distinctly *not* orthogonal nor triangular

-   **"angular"** includes 'lines connecting' responses as well as responses that include both orthogonal *and* triangular answers =\> indicates some degree of angular/triangular coordinate understanding

-   **"triangular"** includes correct triangular and 'lines connecting' responses as well as responses that include both orthogonal *and* triangular answers =\> indicates some degree of angular/triangular coordinate understanding

+-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Research Question     | Does Ss in the impasse condition produce less orthogonal responses on the first question?                                                                                                                                                                                                                                                                 |
+=======================+===========================================================================================================================================================================================================================================================================================================================================================+
| **Hypothesis**        | H1A \| Ss in the IMPASSE condition will have a higher likelihood of producing unknown and and triangle-like response states, relative to orthogonal response states, on the first question                                                                                                                                                                |
+-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Data**              | -   data: `df_items` where `q == 1`                                                                                                                                                                                                                                                                                                                       |
|                       | -   outcome: `state` ( 4 level factor from 5 level high_interpretation )                                                                                                                                                                                                                                                                                  |
|                       | -   predictor: `condition` \[between-subjects factor\]                                                                                                                                                                                                                                                                                                    |
+-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Analysis Strategy** | 1.  Multinomial (Logistic) Regression on state predicted by condition                                                                                                                                                                                                                                                                                     |
|                       |                                                                                                                                                                                                                                                                                                                                                           |
|                       | Alternative:                                                                                                                                                                                                                                                                                                                                              |
|                       |                                                                                                                                                                                                                                                                                                                                                           |
|                       | -   Ordinal regression on state; but model doesn't satisfy proportional odds assumption (parallel slopes)                                                                                                                                                                                                                                                 |
|                       | -   Multinomial or Ordinal regression on high_interpretation (5 category interpretation state which distinguishes between uncertain (blank, reference) unclassifiable, triangle-like and true triangular.) There are some cells with zeros, however (no uncertain responses in control) which means the model can't accurately estimate those comparisons |
+-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

#### Setup 
```{r}
#| label: SETUP-Q1-INTERPRETATION

#:::::::: PREP DATA
df <- df_items %>% filter(q==1) %>% dplyr::select(pretty_condition, state)

```


#### Describe 
```{r}

#:::::::: STACKED BAR CHART
df %>% 
  ggplot(data = .,
         mapping = aes(x = pretty_condition,
                       fill = state)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_brewer(palette = "Set1")  +
  # facet_wrap(~pretty_mode) + 
   labs(#y = "Correct Response on Q 1",
       title = "Interpretation on First Question by Condition",
       x = "Condition",
       fill = "",
       subtitle="")

```

A proportional bar chart visualizing the proportion of each interpretations type by condition for each data collection modality (left/right facet) reveals that the pattern of responses are similar regardless of the data collection modality, by differ by condition. In the impasse condition, there are more triangular responses than in control. We see that around half of the 'incorrect' (i.e. not triangular) responses in the impasse condition are not orthogonal-like, but "other/unknown".


```{r}

#::::::::::::DESCRIPTIVES

table(df$state, df$pretty_condition) %>% addmargins(2) %>% #display sum for row
      prop.table(margin=2) %>%  #return proportion (of column)
      addmargins(1) #sanity check sum of columns


(t <- table(df$state, df$pretty_condition) %>% addmargins(2) %>% #display sum for row
      addmargins(1)) #sanity check sum of columns

```

#### MULTINOMIAL REGRESSION

*Does condition affect the response state of Q1?*

*Fit a logistic regression predicting interpretation state (k=3) by condition(k = 2).*

-   3 equations will be estimated (# categories - 1); each representing the odds of answering in that particular interpretation (vs) the reference category (orthogonal answer) \[essentially a series of binary logistic regressions, but instead of incorrect/correct, comparing \[reference category\] vs \[this category\])

-   For *each* equation:

    -   $\beta_{0}$ *= Log Odds of \[this category type vs. reference category type) response in CONTROL condition*
    -   $e^{\beta_{0}}$ *= ODDS of \[this category type vs. reference category type\] response in CONTROL condition*
    -   $\beta_{1}$ *=* $\beta_{1impasse}$ *Log Odds (Log OR; change in odds for \[this category\] type response in impasse (vs) control \[log scale\])*
    -   $e^{\beta_{1}}$ *= ODDS RATIO of \[this. vs reference category type\] response in IMPASSE (vs) CONTROL*
    -   Two-tailed NHST *Null hypothesis:* $\beta_{impasse} = 0$ *the odds for \[this category of response vs. reference\] are not different for IMPASSE condition*
    -   *Alternative hypothesis:* $\beta_{impasse} \ne 0$ *the odds of \[this category of response vs. reference\] increases or decreases for IMPASSE condition*

##### Fit Model

```{r}
#| label: FIT-Q1-INTERPRETATION

#check reference level 
print("Categories (first is reference)")
levels(df$state)

#FIT EMPTY MODEL
# print("EMPTY MODEL")
catm.0 <- multinom(state ~ 1, data = df)
# summary(catm.0)

#FIT PREDICTOR MODEL
# print("PREDICTOR MODEL")
catm <- multinom(formula = state ~ pretty_condition, data = df, model = TRUE)
# summary(catm)

#COMPARE MODEL FIT
paste("AIC wth predictor is lower than empty model?", catm.0$AIC > catm$AIC)
test_lrt(catm.0, catm)

##compare bayesian version
#library(brms)
# b.cat <- brm( state2 ~ pretty_condition, data = df, family = "categorical", backend = "cmdstanr")
# summary(b.cat)
# plot_model(b.cat)
# report(b.cat)
# coefficient estimates are very simliar to catm. super cool!

##compare mclogit version
#"baseline-category logit model
# https://www.elff.eu/software/mclogit/manual/mblogit/
# blm1 <- mblogit(state2 ~ pretty_condition , data = df)
# summary(blm1)
#identical to catm. super cool!

```

*AIC in predictor model is less than empty model, and likelihood ratio test indicates predictor model is significantly better fit to the sample data than the empty (intercept only) model.*

##### Describe

```{r}
#| label: DESC-Q1-INTERPRETATION

#set model
m <- catm

#::::::::INTERPRETATION
paste("MODEL SUMMARY")
summary(m)
car::Anova(m)

# calculate z-statistics of coefficients
z_stats <- summary(m)$coefficients/summary(m)$standard.errors
# convert to p-values
p_values <- (1 - pnorm(abs(z_stats)))*2
# display p-values in transposed data frame
(p_values <- data.frame(p = (p_values)))
# display odds ratios in transposed data frame

paste("ODDS RATIOS")
odds_ratios <- data.frame(OR = exp(summary(m)$coefficients))
options(scipen = 2)
(results <- cbind(odds_ratios, p_values))
```

##### Inference

-   Being in the IMPASSE condition *increases* the odds of giving an unknown (potentially nonsense) or blank/uncertain response rather than an orthogonal (or satisficing) response by a factor of 45 (z = 3.81, p \< 0.001) . **Participants in the impasse condition were 45x as likely to give an unknown/uncertain response rather than an orthogonal response compared to participants in control**.

-   Being in the IMPASSE condition *increases* the odds of giving 'triangle-like' response rather than an orthogonal (or satisficing) response by a factor of 17.5 (z = 2.60, p \< 0.001 ). **Participants in the impasse condition were almost 6x as likely to give an a triangular response rather than an orthogonal response compared to participants in control**.


-   Being in the IMPASSE condition *increases* the odds of giving 'triangle-like' response rather than an orthogonal (or satisficing) response by a factor of 4.8 (z = 3.30, p \< 0.001 ). **Participants in the impasse condition were almost 6x as likely to give an a triangular response rather than an orthogonal response compared to participants in control**.


-   As with the (binary) logistic regression on accuracy \~ condition, significant model intercepts indicate that the odds of being in any particular response state (vs) orthogonal are significantly different than 1 *in the control condition.* (i.e. not 1:1 odds or 50% chance of being in that response state. Orthogonal is a much more probable response state in control)

-   \[need to to double check interpretation, but I *think* that the OR intercepts converted to probabilities equate to the marginal probability of being in each state in the control condition. which makes sense. I think.?\]

-   IF I change reference category for condition... then the intercepts should no longer be significant. The b1 coefficients should still be significant, but with changed sign (much less likely) \[Yup! this works!\]

##### Visualize

```{r}
#| label: VIS-Q1INTERPRETATION-LAB

#:::::::: PLOT

#GGSTATS | MODEL | LOG ODDS 
# ggcoefstats(m, output = "plot", 
#               # conf.level = 0.90,
#               exclude.intercept = FALSE) + 
#   labs(x = "Log Odds Estimate", 
#        title = "LOGODDS | Q1 State ~ condition",
#        subtitle = "(p is for two tailed test)")
#:::::::: PLOT

#PARAMETERS | MODEL | SIMULATED PARAMETERS
# similar to bayesian dist of estimate
# result <- simulate_parameters(m)
# plot(result, show_intercept = TRUE, stack=FALSE)

#PARAMETERS | MODEL | ODDS RATIO 
# result <- model_parameters(m1,exponentiate = TRUE)
# #rename params 
# result$Parameter[1] <- "condition [control]"
# result$Parameter[2] <- "condition [impasse]"
# plot(result,   show_intercept = TRUE) +  labs(
#   title = "Model Parameter Estimates"
# ) + theme_clean() + theme(legend.position="blank")

#SJPLOT | MODEL | ODDS RATIO
#library(sjPlot)
plot_model(m, type = "est",
           vline.color = "red", 
           show.intercept = TRUE, 
           show.values = TRUE,
           p.threshold = 0.1, #manually adjust to account for directional test
           ci.lvl = 0.90 ) +  #manually adjusted for directional test   
  # scale_y_continuous() + #remove to put on log scale x axis 
  scale_x_discrete(labels=c("control","impasse"))+
  labs(title = "MODEL ESTIMATE  | Q1 Accuracy ~ condition",
       subtitle = "Impasse increases odds of correct response on Q1",
       x = "Condition") + theme_clean()

  
#SJPLOT | MODEL | PROBABILITIES
plot_model(m, type="eff", ci.lvl = 0.95)[[1]] +
  ylim(0,1) +
  labs(title = "MODEL PREDICTION  | Q1 State ~ condition",
       subtitle = "Impasse increases probability of more accurate response states Q1",
       x = "Condition") + theme_clean()

#MANUALLY BUILD PREDICTION PLOT FACET BY CONDITION RATHER THAN STATE
p <-plot_model(m, type="eff")[[1]]
d <- ggplot_build(p)[[1]]  
points <- d[[2]]
points <- points %>% mutate(
  state = recode(PANEL, "1" ="orth", "2"="other", "3" = "trilike", "4"="tri"),
  condition = recode(x, "1"="control","2"="impasse"),
  prob = y
)
gf_point( prob ~ state, group = ~x, data = points) + 
  geom_errorbar(aes( x = state, ymin = ymin, ymax = ymax)) + facet_grid(~condition) +ylim(0,1)

```

```{r}

#SJPLOT | MODEL | TABLE
tab_model(m)

# #MODEL SUMMARY | save latex table
# models <- list("odds ratios" = m1, "(log odds)" = m1)
# notes = list("* p < 0.05, ** p < 0.01, *** p < 0.001",
#              '$sigma^{2}$ = 3.29" N(subject) = 126 $\tau_{00}$(subject) = 22.22 N(question) = 13 $\tau_{00}$(question) = 0.31'
#                )
# 
# modelsummary(models,
#              exponentiate = c(TRUE, FALSE),
#              shape = term ~ model + statistic,
#              fmt = 2, #two digits w/ trailing zero
#              estimate  = "{estimate} {stars}",
#              statistic = "conf.int",
#              gof_map = c("AIC", "sigma"),
#              gof_omit = 'RMSE|ICC|BIC',
#              coef_rename = c("pretty_conditionimpasse" = "Condition[impasse]"),
#              title = 'Accuracy ~ Condition (Mixed Logistic Regression)', 
#              notes = notes,
#              output = "analysis/SGC3A/models/tables/GLMER_OverallAccuracy_lab.tex")
# #              # coef_omit = "Intercept",

# modelsummary(mixcat.1, s)
#TODO OUTPUT TABLE 
#https://arelbundock.com/posts/modelsummary_multinomial_logit/


```

##### Diagnostics

```{r}

#EXAMINE PREDICTIONS
#create sample data frame
test <- data.frame(pretty_condition = c("control", "impasse"))
pred <- predict(catm, newdata = test, "probs")
paste("Predicted Probability of Being in Each State")
( x <- cbind(test, pred))

print("MODEL PERFORMANCE")
performance(catm)
DescTools::PseudoR2(catm, which = c("McFadden", "CoxSnell", "Nagelkerke"))

#General Goodness of Fit
#library(generalhoslem)
#logitgof(df$state, catm$fitted.values, g = 3)
#A non-significant p value indicates that there is no evidence that the observed and expected frequencies differ (i.e., evidence of good fit).
#don't fret! this version of the hoslem-lem test is problematic with fewer than 10 input variables
chisq.test(df$state,predict(catm)) #actual states VS predicted states
# The chi-square test tests the decrease in unexplained variance from the baseline model to the final model

# print("MODEL DIAGNOSTICS")
# check_model(m) can't do overall diagnostics, have to do them on individual model equations

```

##### TODO

-   interpretation/reporting of model fit?
-   sanity check correct interpretation of coefficients & reporting
-   diagnostics on individual model equations
-   calculate 1-tailed p values to match directional hypothesis

## H1B \| OVERALL ACCURACY

+-----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Research Question     | Do Ss in the IMPASSE condition score higher across the entire task than those in the CONTROL group?                                                                                                                                                                                |
+=======================+====================================================================================================================================================================================================================================================================================+
| **Hypothesis**        | (H1) Participants in the IMPASSE condition will be more likely to correctly interpret the graph than those in the CONTROL condition.                                                                                                                                               |
+-----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Data**              | **data**: `df_items` where `q nin 6,9` (the 13 discriminating Qs ), `df_subjects`                                                                                                                                                                                                  |
|                       |                                                                                                                                                                                                                                                                                    |
|                       | **outcome**:                                                                                                                                                                                                                                                                       |
|                       |                                                                                                                                                                                                                                                                                    |
|                       | -   \[at item level\] : *accuracy* ( factor(incorrect/correct) from `score_niceABS` \[absolute score\]                                                                                                                                                                             |
|                       | -   \[subject level\]: accuracy (number of test phase qs correct from total `s_NABS`)                                                                                                                                                                                              |
|                       |                                                                                                                                                                                                                                                                                    |
|                       | **predictor**: `condition` \[between-subjects factor\]                                                                                                                                                                                                                             |
+-----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Analysis Strategy** | 1.  Wilcoxon-Rank Sum (Mann-Whitney) test on subject-level total accuracy of test phase (`s_NABS`)                                                                                                                                                                                 |
|                       | 2.  Mixed Logistic Regression\                                                                                                                                                                                                                                                     |
|                       |     `accuracy` \~ `condition` + (1 \| `subject` ) + (1 \| `question`)\                                                                                                                                                                                                             |
|                       |     model effect of condition on probability of correct response \[during test phase\] while accounting for subject (and item-level?) effects                                                                                                                                      |
+-----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Alternatives**      | -   Ordinal Mixed Logistic Regression on `scaled_score`                                                                                                                                                                                                                            |
|                       | -   OLS Linear Regression: bimodal distribution at tails makes the mean a poor predictor; LMs violate assumptions of normally distributed residuals; both absolute and scaled scores yield non-normal residuals; no transformation of the outcome variables yield normal residuals |
+-----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Notes**             | **Also exploring:**                                                                                                                                                                                                                                                                |
|                       |                                                                                                                                                                                                                                                                                    |
|                       | -   Hurdle model (mixture model w/ binomial + \[poisson or negbinom count; 0s from 1 DGP)                                                                                                                                                                                          |
|                       | -   Zero Inflated model (mixture model w/ binomial + poisson or negbinom count; 0s from 2 DGPs)                                                                                                                                                                                    |
|                       | -   Beta regression hurdle model? (mixture with location and scale parameters \[mean, variance\] and hurdles for floor and ceiling effects)                                                                                                                                        |
|                       | -   Other way to account for the severe bimodality?                                                                                                                                                                                                                                |
+-----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

#### Setup
```{r}
#| label: SETUP-OVERALL-ACC

#item level
df_i = df_items %>% filter(q %nin% c(6,9)) %>% mutate(
  accuracy = recode_factor(score_niceABS, "0" ="incorrect","1"="correct"),
  subject = as.factor(subject),
  q = as.factor(q)
) %>% dplyr::select(pretty_condition, accuracy, subject,q)

df_s <- df_subjects %>% mutate(
  task_percent = DV_percent_NABS
) %>% dplyr::select(pretty_condition, task_percent)


```

#### Describe
```{r}

#:::::::: STACKED PROPORTIONAL BAR CHART
df %>% 
  ggplot(data = .,
         mapping = aes(x = pretty_condition,
                       fill = accuracy)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_brewer(palette = "Set1")  +
  # facet_wrap(~pretty_mode) + 
   labs(title = "Overall Accuracy",
       x = "Condition",
       fill = "",
       subtitle="Impasse Condition yields a greater proportion of correct responses")

#:::::::: FACETED HISTOGRAM
stats = df_subjects %>% group_by(pretty_condition) %>% dplyr::summarise(mean = mean(DV_percent_NABS))
gf_props(~DV_percent_NABS,
         fill = ~pretty_condition, data = df_subjects) %>%
  gf_facet_grid(pretty_condition ~ pretty_mode) %>%
  gf_vline(data = stats, xintercept = ~mean, color = "red") +
  labs(x = "% Correct",
       y = "proportion of subjects",
       title = "Overall Absolute Score (% Correct)",
       subtitle = "") + theme(legend.position = "blank")

```


**SPLIT SIDE BY SIDE**
```{r}
# quota_halves <- ggplot(vdem_2015, aes(x = quota, y = prop_fem)) +
boxes <- ggplot(df_s, aes(x = pretty_condition, y = task_percent)) +
  
  
  geom_half_point(aes(color = pretty_condition),
                  transformation = position_quasirandom(width = 0.1),
                  side = "l", size = 1.5, alpha = 0.5) +
  geom_half_boxplot(aes(fill = pretty_condition), side = "r", width = 0.5) +
  scale_fill_viridis_d(option = "plasma", end = 0.8) +
  scale_color_viridis_d(option = "plasma", end = 0.8) +
  guides(color = "none", fill = "none") +
  labs(x = "Condition", y = "Proportion of correct responses (test phase)") +
  theme_clean()

# quota_densities <- ggplot(vdem_2015, aes(x = prop_fem, fill = quota)) +
densities <- ggplot(df_s, aes(x = task_percent, fill = pretty_condition)) +
  geom_density(alpha = 0.6) +
  scale_fill_viridis_d(option = "plasma", end = 0.8) +
  labs(x = "proportion of correct responses (test phase)", y = "Density", fill = "Condition") +
  theme_clean() +
  theme(legend.position = "bottom")

boxes | densities


```


**CUSTOM ONLY**
```{r}

ggplot(df_s, # data we are using
       aes(x = task_percent,
           y = pretty_condition)) +
  stat_slab(aes(fill = pretty_condition), # slab geometry
            geom = "slab",
            position = position_nudge(y = .20), # nudged up by .20
            scale = .5,
            # color = "grey",
            alpha = 1.0) + # transparency
  geom_boxplot(# boxplot geometry; grey contrast w/ points
               width = .20,
               size = 0.5,
               show.legend = FALSE,
               alpha = .25) + # transparency
  geom_point(aes(color = pretty_condition), # point geometry
             position = position_jitter(width = .01, height = .05), # 
             size = 1.0,
             shape = 19, # circles
             alpha = .5) + # transparency
  labs(title = "Distribution of Test Phase Accuracy",
       y = "Test Phase Proportion Correct", x = "Condition") +
  theme_clean() + theme(legend.position = "blank") +
  ggeasy::easy_rotate_y_labels(angle = 90)
```
**WIP CUSTOM + STATSEXPRESSIONS LABELS ONLY**
```{r}

ggplot(df_s, aes(x = task_percent, y = pretty_condition, fill=pretty_condition)) +
  stat_slab(
            geom = "slab",
            position = position_nudge(y = .20), # nudged up by .20
            scale = .5) + 
  geom_boxplot(aes(fill = NULL),
               width = .20,
               size = 0.5,
               show.legend = FALSE,
               alpha = .25) + 
  geom_point(aes(color = pretty_condition), 
             position = position_jitter(width = .01, height = .05), 
             size = 1.0,
             shape = 19, # circles
             alpha = .5) + 
  labs(title = "Distribution of Total Accuracy",
       x = "Total Proportion Correct", y = "Condition") +
  theme(legend.position = "blank") 


#NOT WORKING, post on github issues
# centrality_description(df_s, y = task_percent, x = pretty_condition) |>
#   ggplot(aes(y = task_percent, x = pretty_condition)) +
#   geom_point() +
#   geom_label(aes(label = expression), parse = TRUE, nudge_y = -0.05) + 
#   coord_flip()+
#   stat_slab(
#             geom = "slab",
#             position = position_nudge(y = .20), # nudged up by .20
#             scale = .5) + 
#   geom_boxplot(aes(fill = NULL),
#                width = .20,
#                size = 0.5,
#                show.legend = FALSE,
#                alpha = .25) + 
#   geom_point(aes(color = pretty_condition), 
#              position = position_jitter(width = .01, height = .05), 
#              size = 1.0,
#              shape = 19, # circles
#              alpha = .5) + 
#   labs(title = "Distribution of Test Phase Accuracy",
#        x = "Test Phase Proportion Correct", y = "Condition") +
#   theme(legend.position = "blank") 
```

**CUSTOM + BETWEEN, WORKING** 
```{r}
  
p <-   ggbetweenstats(data = df_s, x = pretty_condition, y = task_percent,
               plot.type = "box", type = "nonparametric",
               centrality.type = "parametric",
               package = "RColorBrewer",
               palette = "PRGn",
               centrality.point.args = list(color="black", size = 3, shape = 1),
               point.args = list(alpha=0), #suppress points
               ggplot.component = ## modify further with `{ggplot2}` functions
                list(
                  aes(color = pretty_condition, fill = pretty_condition),
                  scale_colour_manual(values = paletteer::paletteer_c("viridis::viridis", 3)),
                  scale_fill_manual(values = paletteer::paletteer_c("viridis::viridis", 3)),
                  theme(axis.text.x = element_text(angle = 90)))
               ) +
  ggdist::stat_halfeye(
    alpha = 0.7, 
    point_colour = NA,
    adjust = .5, 
    width = .5, .width = 0, 
    justification = -.5) +
  geom_boxplot(
    alpha = 0.1,
    width = .2, 
    outlier.shape = NA
  ) +
  geom_point(
    size = 2,
    alpha = .5,
    position = position_jitter(
      seed = 1, width = .05, height = .02
    )
  )  +
coord_flip() + theme_clean() + theme(legend.position = "blank")
p$layers[[3]]=NULL #remove default boxplot
e <- statsExpressions::oneway_anova(data = df_s, x = pretty_condition, y = task_percent,
               type = "nonparametric") #gen stats test
#labels are layer 4
p + labs(title = "Distribution of Total Accuracy",
         y = "Proportion of correct responses in test phase", x = "",
         subtitle = "Impasse condition yields higher scores and greater variance",
         caption=e$expression[[1]])


```

```{r}

title = "Descriptive Statistics of Response Accuracy (Total % Correct)"
tbl1 <- mosaic::favstats(~task_percent, data = df_s) 
tbl1 %>% kbl (caption = title) %>% kable_classic()


title = "Descriptive Statistics of Response Accuracy (Total % Correct) BY CONDITION"
tbl2 <- mosaic::favstats(task_percent ~ pretty_condition, data = df_s) 
tbl2 %>% kbl (caption = title) %>% kable_classic()

```

Across both conditions, overall accuracy on the task ranges from `r tbl1$min *100` to `r tbl1$max *100` with a mean of `r tbl1$mean * 100`. We see that the distribution of this outcome variable is clearly bimodal: with modes near the floor (0% correct) and ceiling (100% correct) of the scale. This bimodality is sensical considering the nature of the task, where each item in the task indexes a different information extraction operation over the same coordinate system.

A score of 100% indicates that the participant correctly interpreted the interval-coordinate system throughout the task, *starting at the first question*. A score of 0% indicates the individual *never* correctly interpreted the coordinate system. A score somewhere inbetween indicates that an individual deciphered the coordinate system *sometime over the course the task*.

#### WILCOXON RANK SUM (Mann-Whitney Test) --- SCORE

-   **Non parametric alternative** to t-test; compares median rather than mean by ranking data
-   Does not assume normality
-   Does not assume equal variance of samples (homogeneity of variance)

##### Test

```{r}


(w <- wilcox.test(df_s$task_percent ~ df_s$pretty_condition,
                 paired = FALSE, alternative = "less")) #less, greater
report(w)

```


##### Inference

**Reported in dissertation**

Because the distribution of the outcome variable is not normally distributed, we evaluate the effect of CONDITION on ACCURACY via a non-parametric test. Consistent with our hypothesis, a Wilcoxon rank sum test (with continuity correction) on ACCURACY by CONDITION indicates that data in each condition likely come from different population distributions (W = 1243, p < 0.001; one-tailed), and that the distribution of the control condition is less (i.e. shifted to the left/ lower scores) than the impasse condition (\^{r} = -0.37, 95% CI \[-1.00, -0.22\]), a large-sized effect.

##### Visualize

```{r}

  
p <-   ggbetweenstats(data = df_s, x = pretty_condition, y = task_percent,
               plot.type = "box", type = "nonparametric", var.equal = FALSE,
               centrality.type = "parametric",
               package = "RColorBrewer",
               palette = "PRGn",
               centrality.point.args = list(color="black", size = 3, shape = 1),
               point.args = list(alpha=0), #suppress points
               ggplot.component = ## modify further with `{ggplot2}` functions
                list(
                  aes(color = pretty_condition, fill = pretty_condition),
                  scale_colour_manual(values = paletteer::paletteer_c("viridis::viridis", 3)),
                  scale_fill_manual(values = paletteer::paletteer_c("viridis::viridis", 3)),
                  theme(axis.text.x = element_text(angle = 90)))
               ) +
  ggdist::stat_halfeye(
    alpha = 0.7, 
    point_colour = NA,
    adjust = .5, 
    width = .5, .width = 0, 
    justification = -.5) +
  geom_boxplot(
    alpha = 0.1,
    width = .2, 
    outlier.shape = NA
  ) +
  geom_point(
    size = 2,
    alpha = .5,
    position = position_jitter(
      seed = 1, width = .05, height = .02
    )
  )  +
coord_flip() + theme_clean() + theme(legend.position = "blank")
p$layers[[3]]=NULL #remove default boxplot
e <- statsExpressions::two_sample_test(y = task_percent, x = pretty_condition, data = df_s,
                                type = "nonparametric", alternative = "less",
                                var.equal = FALSE)
#labels are layer 4
p + labs(title = "Distribution of Total Accuracy",
         y = "Proportion of correct responses across task", x = "",
         subtitle = "Impasse condition yields higher scores and greater variance",
         caption=e$expression[[1]])

```


#### MIXED LOGISTIC REGRESSION

*Fit a mixed logistic regression (at the item level), predicting accuracy (absolute score) on all discriminating questions by condition; accounting for random effects of subject and item.*

##### Fit Model

```{r}

## 1 | SETUP RANDOM INTERCEPT SUBJECT

#confirm 13 items [all discriminating items]
nrow(df_i) / nrow(df_s) == 13
#confirm all factors 
is.factor(df_i$q) && is.factor(df_i$subject) && is.factor(df_i$pretty_condition) && is.factor(df_i$accuracy)

#:: EMPTY MODEL (baseline, no random effect)
print("Empty fixed model")
m0 = glm(accuracy ~ 1, family = "binomial", data = df_i) 
# summary(m0)

#:: RANDOM INTERCEPT SUBJECT
print("Subject intercept random model")
mm.rS <- glmer(accuracy ~ (1|subject), data = df_i, family = "binomial")
# summary(mm.rS)

# :: TEST random effect
paste("AIC decreases w/ new model?", m0$aic > AIC(logLik(mm.rS)))
test_lrt(m0,mm.rS) #same as anova(m0, m1, test = "Chi")
paste("Likelihood Ratio test is significant? p = ",(test_lrt(m0,mm.rS))$p[2])

#:: RANDOM INTERCEPT SUBJECT + ITEM
print("Subject Intercept + Item intercept random model")
mm.rSQ <- glmer(accuracy ~ (1|subject) + (1|q), data = df_i, family = "binomial")
#summary(mm.rSQ)

# :: TEST random effect
paste("AIC decreases w/ new model?", AIC(logLik(mm.rS)) > AIC(logLik(mm.rSQ)))
test_lrt(mm.rS, mm.rSQ) #same as anova(m0, m1, test = "Chi")
paste("Likelihood Ratio test is significant? p = ",(test_lrt(mm.rS, mm.rSQ))$p[2])

```

*A likelihood ratio test indicates that a logistic regression model including random intercepts for SUBJECT and QUESTION explains more variance in the data than an empty \[intercept only\] model.*

```{r}

## 2 | ADD FIXED EFFECT CONDITION

print("FIXED Condition + Subject & Item random intercepts")
mm.CrSQ <- glmer(accuracy ~ pretty_condition + (1|subject) + (1|q) ,
                data = df_i, family = "binomial")
# summary(mm.CrSQ)


paste("AIC decreases w/ new model", AIC(logLik(mm.rSQ)) > AIC(logLik(mm.CrSQ)) )
test_lrt(mm.rSQ,mm.CrSQ) #same as anova(m0, m1, test = "Chi")
paste("Likelihood Ratio test is significant? p = ",(test_lrt(mm.rSQ,mm.CrSQ))$p[2])

```

*A likelihood ratio test indicates adding CONDITION as a fixed effect to a logistic regression model including a fixed effect random intercepts for SUBJECT and QUESTION explains more variance in the data than random-effects only model.*

##### Describe

```{r}

# best model
m1 <- mm.CrSQ

#::::::::: PRINT MODEL 

print("PREDICTOR MODEL")
summary(m1)
print("SIGNIFICANCE TEST [non directional]")
car::Anova(m1)

#:::::::: MANUAL ONE-SIDED SIGTEST 
#note: anova and chi square are always one-tailed, but that is independent of being one-sided
#https://www.ibm.com/support/pages/can-one-get-one-tailed-tests-logistic-regression-dividing-significance-levels-half

# one-sided (right tail) z test for B COEFFICIENT
#SANITY CHECK 2-tailed test should match the model output
tt <- 2*pnorm(summary(m1)$coefficients[2,3], lower.tail = F)
paste("p value for two-tailed test, null B = 0 : ",round(tt,5))
ot <- pnorm(summary(m1)$coefficients[2,3], lower.tail = F)
paste("BUT we want a one  directional, null: B <= 0: ",round(ot,5))

#:::::::: INTERPRET COEFFICIENTS

se <- sqrt(diag(stats::vcov(m1)))
# table of estimates with 95% CI
paste("LOG ODDS")
(tab <- cbind(Est = fixef(m1), LL = fixef(m1) - 1.96 * se, UL = fixef(m1) + 1.96 *
    se))
paste("ODDS RATIOS")
(e <- exp(tab))

```

##### Inference

***(In Dissertation)***

To quantify the effect of CONDITION on ACCURACY, we fit a mixed-effect binomial logistic regression model with random intercepts for subjects and questions. The structure of this model allows us to differentiate between random variance introduced by individual subjects and questions, versus the expected systematic variance of CONDITION. A likelihood ratio test indicates that a model including a fixed effect of CONDITION is explains significantly more variance in the data than an intercepts-only baseline model ($\chi^2 (3) = 18.66, p < 0.001$). The explanatory power of the entire model is substantial ($conditional \ R^2 = 0.89$) and the part related to the fixed effect CONDITION ($marginal \ R^2$) explains 15% of variance. Consistent with our hypothesis, the impasse condition substantially increased the odds of a correct response.  Across the entire task participants in the impasse condition were 75 times as likely to offer a correct response, compared with those in the control condition ( $e^{\beta_1} = 75.51, p < 0.001$ , one-tailed $90 \% \  CI [8.46, 673.79]$).

```{r}
#SJPLOT | MODEL | TABLE
tab_model(m1)

# #MODEL SUMMARY | save latex table
# models <- list("odds ratios" = m1, "(log odds)" = m1)
# notes = list("* p < 0.05, ** p < 0.01, *** p < 0.001",
#              '$sigma^{2}$ = 3.29" N(subject) = 126 $\tau_{00}$(subject) = 22.22 N(question) = 13 $\tau_{00}$(question) = 0.31'
#                )
# 
# modelsummary(models,
#              exponentiate = c(TRUE, FALSE),
#              shape = term ~ model + statistic,
#              fmt = 2, #two digits w/ trailing zero
#              estimate  = "{estimate} {stars}",
#              statistic = "conf.int",
#              gof_map = c("AIC", "sigma"),
#              gof_omit = 'RMSE|ICC|BIC',
#              coef_rename = c("pretty_conditionimpasse" = "Condition[impasse]"),
#              title = 'Accuracy ~ Condition (Mixed Logistic Regression)', 
#              notes = notes,
#              output = "analysis/SGC3A/models/tables/GLMER_OverallAccuracy_lab.tex")
# #              # coef_omit = "Intercept",
# 
# 
# 

```

##### Visualize

```{r}
#:::::::: PLOT

#GGSTATS | MODEL | LOG ODDS 
ggcoefstats(m1, output = "plot", 
              conf.level = 0.90) + 
  labs(x = "Log Odds Estimate", 
       subtitle = "p is for two tailed test")

#SJPLOT | MODEL | ODDS RATIO
#library(sjPlot)
plot_model(m1, vline.color = "red", 
           show.intercept = TRUE, 
           show.values = TRUE,
           p.threshold = 0.1, #manually adjust to account for directional test
           ci.lvl = 0.90 ) + #manually adjusted for directional test   
  labs(title = "Model Predicted Odds Ratio",
       subtitle = "",
       x = "Condition")


#GGIDST
broom.mixed::tidy(m1) %>% 
  head(2) %>% #take only fixed effects
  ggplot(aes(y = term)) +
  stat_halfeye(
    #is this legit? ok to use dist_student_t for logistic? 
    aes(xdist = dist_student_t(df = exp(df.residual(m1)), 
                               mu = exp(estimate), sigma = exp(std.error))))
  # stat_halfeye(
  #   aes(xdist = dist_student_t(df = df.residual(m1), mu = estimate, sigma = std.error)))

#SJPLOT | MODEL | PROBABILITIES
plot_model(m1, type="eff",
           show.intercept = TRUE,
           show.values = TRUE,
           title = "Model Predicted Probability of Accuracy",
           axis.title = c("Condition","Probability of Accurate Response"))

library(parameters)

result <- simulate_parameters(m1)
plot(result)

result <- equivalence_test(m1, rule = "cet")
plot(result)

result <- equivalence_test(m1, effects = "random")
plot(result)

#PLOT PARAMETERS
result <- model_parameters(m1, exponentiate = TRUE, 
                           component = "all")
plot(result) + 
  labs(
  title = "Accuracy ~ Condition + (1 | subject) + (1 | question)",
  subtitle = "Logistic Mixed Effects Model"
)  + theme_clean() +  theme(legend.position = "blank") 

#PLOT MODEL PREDICTION
plot_model(m1, type = "pred")[[1]] + 
  ylim(0,1) + labs(
    title = "Model Prediction | Probability of Accurate Response",
    subtitle = "Impasse increases Probability of Correct Response"
  )

```

```{r}
#SJPLOT | MODEL | TABLE
# tab_model(m1)
# 
# 
# #MODEL SUMMARY | save latex table
# models <- list("odds ratios" = m1, "(log odds)" = m1)
# notes = list('N(subject) = 126 $\tau_{00}$(subject) = 22.22',
#              'N(question) = 13 $\tau_{00}$(question) = 0.31',
#                "*** indicates p < 0.001")
# 
# modelsummary(models,
#              exponentiate = c(TRUE, FALSE),
#              shape = term + statistic ~ model,
#              fmt = 2, #two digits w/ trailing zero
#              estimate  = "{estimate} {stars}",
#              statistic = c(
#                            "s.e. = {std.error}"),
#              coef_rename = c("pretty_conditionimpasse" = "Condition[impasse]"),
#              # coef_omit = "Intercept",
#              gof_omit = 'AIC|RMSE|ICC|BIC',
#              title = 'Accuracy ~ Condition (Mixed Logistic Regression)', notes = notes,
#              output = "analysis/SGC3A/models/tables/GLMER_OverallAccuracy_lab.tex")
```

##### Diagnostics

```{r}
#| warning: false
#| message: false

print("SANITY CHECK REPORTING")
# report(m1)

print("MODEL PERFORMANCE")
performance(m1)

print("DIAGNOSTICS")
check_model(m1)
binned_residuals(m1)
```

##### TODO

-   DIAGNOSTICS: What in the world is happening with the normality of random effects plot? Do the fixed effects residuals need to be normally distributed?
-   What else needs to be interpreted with respect to the item and subject random effects?


##### BAYESIAN 

**Sanity Check** Compare frequentist model with bayesian alternative


```{r}

##FLAT PRIORS
#fit matching bayesian model [flat priors]
FLAT_B.mm.CrSQ <-  brm(
  bf(accuracy ~ pretty_condition + (1|subject) + (1|q)),
  data = df_i,
  family = bernoulli(link = "logit"),
  chains = 4, iter = 2000, warmup = 1000,
  cores = 4, seed = 1234,
  backend = "cmdstanr"
)

```

```{r}

#describe model
summary(FLAT_B.mm.CrSQ)

#compare to frequentist model
paste("COMPARE TO FREQUENTIST")
compare_models(mm.CrSQ, FLAT_B.mm.CrSQ)

```
_Here we see that the model with default priors yields estimates comparable to the frequentist mixed model, though slightly smaller for fixed effects condition, with tighter credible intervals._


```{r}

#describe priors that were used
paste("DEFAULT PRIORS")
prior_summary(FLAT_B.mm.CrSQ)


#set informative priors for fixed effects
#parameters normally distributed around the mean of the expected log coefficient
#we expect low probability of accuracy in control [intercept] and in impasse, but higher variance in impasse
priors <- c(
  prior(normal(-1, 2), class = b),
  prior(normal(-1, 4), class = b, coef="pretty_conditionimpasse")
)

#fit model with informative priors
B.mm.CrSQ <-  brm(
  accuracy ~ pretty_condition + (1|subject) + (1|q),
  prior = priors,
  data = df_i,
  family = bernoulli(link = "logit"),
  chains = 4, iter = 2000, warmup = 1000,
  cores = 4, seed = 1234,
  backend = "cmdstanr"
)
```
```{r}

#describe model
summary(B.mm.CrSQ)

#compare to frequentist model
paste("COMPARE TO UNFINFORMATIVE PRIOR")
compare_models(FLAT_B.mm.CrSQ, B.mm.CrSQ)

```
_Here we see tha the model with the informative prior makes predictions similar to the uninformative prior model_. 

```{r}

#DIAGNOSTICS

#set model 
m <- B.mm.CrSQ

#POSTERIOR CHECKS
library(bayestestR)
diagnostic_posterior(m)
pp_check(m, ndraws = 500)

plot(m)

```


```{r}

#INTERPRET
library(bayestestR)
describe_posterior(m, test = c("p_direction", "rope", "bayesfactor"))

```


```{r}

#set working model
m <- B.mm.CrSQ


#equivalence test 
result <- equivalence_test(m, rule = "cet")
plot(result)

#rope 
result <- rope(m)
plot(result)

#direction of effect 
result <- pd(m)
plot(result)


# all parameters
m %>% 
  posterior_samples() %>% 
  select(-c(lp__, contains("["))) %>%
  pivot_longer(cols = everything(),
               names_to = "variable",
               values_to = "value") %>% 
  ggplot(data = .,
         mapping = aes(x = value)) +
  stat_halfeye(point_interval = mode_hdi,
               fill = "lightblue") + 
  facet_wrap(~ variable,
             ncol = 2,
             scales = "free") +
  theme(text = element_text(size = 12))

#plot parameters
stanplot(m, 
         type = "areas",
         prob = 0.95) 


#plot model
plot_model(m)


#PLOT PARAMETERS
result <- model_parameters(m, exponentiate = TRUE, 
                           component = "all")
plot(result) + 
  labs(
  title = "Accuracy ~ Condition + (1 | subject) + (1 | question)",
  subtitle = "Logistic Mixed Effects Model"
)  + theme_clean() +  theme(legend.position = "blank") 

#PLOT MODEL PREDICTION
plot_model(m, type = "pred")[[1]] + 
  ylim(0,1) + labs(
    title = "Model Prediction | Probability of Accurate Response",
    subtitle = "Impasse increases Probability of Correct Response"
  )
```
```{r}
#report(m)
```


## H1B \| OVERALL INTERPRETATION STATE

**Do Ss in the IMPASSE condition offer less-orthogonal interpretations across the test phase questions?**

While absolute accuracy score tells us whether a participant successfully interpreted the coordinate system, it doesn't allow us to differentiate between different kinds of incorrect interpretations. Here we examine the (categorical) interpretation state type based on the nature of subject's response, and determine if these interpretations differ by experimental condition. State is a 3-category variable that groups the following interpretations:

-   **"orthogonal-like"** \[reference category\] includes orthogonal and satisficing responses ==\> indicates a primarily *orthogonal* state of coordinate system understanding
-   **"unknown"** includes: blank, reference point, responses that can't be classified (including selecting all datapoints) =\> indicates an uncertain or unidentifiable state of coordinate system understanding, but one that is distinctly *not* orthogonal nor triangular
-   **"triangle-like"** includes correct triangular and 'lines connecting' responses as well as responses that include both orthogonal *and* triangular answers =\> indicates some degree of angular/triangular coordinate understanding

+-----------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| Research Question     | Does Ss in the impasse condition produce less orthogonal responses across questions?                                          |
+=======================+=================================================================================================================================================+
| **Hypothesis**        | H1A \| Ss in the IMPASSE condition will have a higher likelihood of producing unknown and triangle-like response states across all items |
+-----------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| **Data**              | -   data: `df_items` where `q nin 6,9` (13 discriminant test phase items)                                                              |
|                       | -   outcome: `state` ( 3 level factor from high_interpretation )                                                                                |
|                       | -   predictor: `condition` \[between-subjects factor\]                                                                                          |
+-----------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| **Analysis Strategy** | 1.  MIXED Multinomial (Logistic) Regression on state predicted by condition                                                                     |
|                       |                                                                                                                                                 |
|                       | Alternative:                                                                                                                                    |
|                       |                                                                                                                                                 |
|                       | -   MIXED Ordinal regression on state (doesn't meet proportional odds assumption-I think)                                                       |
|                       | -   MIXED Multinomial or Ordinal regression on high_interpretation (some cells are 0, produces problems)                                        |
+-----------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+

#### Setup

```{r}

#:::::::: PREP DATA
df = df_items %>% filter(q %nin% c(6,9)) %>% mutate(
  q = as.factor(q),
  subject = as.factor(subject)
) %>% dplyr::select(q,subject,state,pretty_condition,pretty_mode)
```

```{r}
#:::::::: STACKED BAR CHART
df %>% 
  ggplot(data = .,
         mapping = aes(x = pretty_condition,
                       fill = state)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_brewer(palette = "Set1")  +
  facet_wrap(~pretty_mode) + 
   labs(title = "Test Phase Interpretation",
       x = "Condition",
       fill = "",
       subtitle="")

```

A proportional bar chart visualizing the proportion of each interpretations type by condition for each data collection modality (left/right facet) reveals that the pattern of responses are similar regardless of the data collection modality, by differ by condition. In the impasse condition, there are more triangular responses than in control. In the impasse condition, there are also more positive transition (i.e. triangle-like) and neutral (ie. blank or uncertain response types) than in the control condition.

### (LAB)

```{r}

#:::::::: IN PERSON ONLY
df_i <- df_items %>% filter(mode == "lab-synch") %>% filter(q %nin% c(6,9)) %>% 
  dplyr::select(pretty_condition, subject, q, state)

#::::::::::::DESCRIPTIVES

table(df_i$state, df_i$pretty_condition) %>% addmargins(2) %>% #display sum for row
      prop.table(margin=2) %>%  #return proportion (of column)
      addmargins(1) #sanity check sum of columns


(t <- table(df_i$state, df_i$pretty_condition) %>% addmargins(2) %>% #display sum for row
      addmargins(1)) #sanity check sum of columns

```

#### MIXED MULTINOMIAL REGRESSION

**TODO** - add a 1 to the empty cell and re-run mblogit to show that estimates are more similar to the brms results - run individual mixed models to show results are similar to mblogit vs brms

*Does condition affect the response state of of items across the task?*

*Fit a MIXED logistic regression predicting interpretation state (k=3) by condition(k = 2).*

-   Can use mclogit mblogit() with random effect *or* bayesian brms package b/c nlme, lme4 don't support random effects on multinomial (ie no categorical family on glmer())

-   Alternative would be to manually run 2 X binomial mixed models \[should compare outcomes\]

-   2 equations will be estimated (# categories - 1); each representing the odds of answering in that particular interpretation (vs) the reference category (orthogonal answer) \[essentially a series of binary logistic regressions, but instead of incorrect/correct, comparing \[reference category\] vs \[this category\])

-   For *each* equation:

    -   $\beta_{0}$ *= Log Odds of \[this category type vs. reference category type) response in CONTROL condition*
    -   $e^{\beta_{0}}$ *= ODDS of \[this category type vs. reference category type\] response in CONTROL condition*
    -   $\beta_{1}$ *=* $\beta_{1impasse}$ *Log Odds (Log OR; change in odds for \[this category\] type response in impasse (vs) control \[log scale\])*
    -   $e^{\beta_{1}}$ *= ODDS RATIO of \[this. vs reference category type\] response in IMPASSE (vs) CONTROL*
    -   Two-tailed NHST *Null hypothesis:* $\beta_{impasse} = 0$ *the odds for \[this category of response vs. reference\] are not different for IMPASSE condition*
    -   *Alternative hypothesis:* $\beta_{impasse} \ne 0$ *the odds of \[this category of response vs. reference\] increases or decreases for IMPASSE condition*

##### Fit Model \[MANUAL INDIVIDUAL BINOMIALS\]

```{r}

#VERIFY RESULTS BELOW VIA MULTIPLE INDIVIDUAL MODELS

paste("ORTH vs. UNKNOWN")

d1 <- df_i %>% filter(state %nin% c("tri-like")) %>% droplevels()
table(d1$pretty_condition, d1$state)
plot(d1$pretty_condition, d1$state)

m.unknown <- glmer(state ~ pretty_condition + ( 1 | subject) + (1 | q), family = "binomial", data = d1)
summary(m.unknown)
```

*Being in the IMPASSE condition increases* the odds of giving an unknown (potentially nonsense) or blank/uncertain response rather than an orthogonal (or satisficing) response by a factor of 19 ( logodds = 2.92, z = 6.89, p \< 0.001) . Participants in the impasse condition were 19x as likely to give an unknown/uncertain response rather than an orthogonal response compared to participants in control. (Conditional R2 = 0.67, marginal R2 = 0.21; SD(subject) = 1.55, SD(question) = 2.22)

```{r}

paste("ORTH vs. TRIANGULAR")

d2 <- df_i %>% filter(state %nin% c("unknown")) %>% droplevels()
table(d2$pretty_condition, d2$state)
plot(d2$pretty_condition, d2$state)

m.tri <- glmer(state ~ pretty_condition + ( 1 | subject) + (1 | q), family = "binomial", data = d2)
summary(m.tri)

```

*Being in the IMPASSE condition increases* the odds of giving an triangle-like response by a factor of 305 ( logodds = 5.72, z = 4.14, p \< 0.001) . Participants in the impasse condition were 305 times as likely to give an triangle-like response rather than an orthogonal response compared to participants in control. (Conditional R2 = 0.91, marginal R2 = 0.21; SD(subject) = 5.05, SD(q) = 1.09)

##### Fit Model \[mblogit\]

```{r}

#https://www.elff.eu/software/mclogit/manual/mblogit/
#"baseline category logit" model matches multinom()

#check reference level 
print("Categories (first is reference)")
levels(df_i$state)

#FIT EMPTY MODEL
# print("EMPTY MODEL")
m.mbl0 <- mblogit(state ~ pretty_condition ,  #no random intercepts; fixed only model 
                  data = df_i)
#summary(m.mbl0)

#FIT PREDICTOR MODEL
# print("PREDICTOR MODEL")
m.mbl1 <- mblogit(state ~ pretty_condition , 
                  random = list( ~ 1|subject, ~1|q), 
                  data = df_i)
# summary(m.mbl1)

#COMPARE MODEL FIT
paste("AIC wth predictor is lower than empty model?", AIC(m.mbl0) > AIC(m.mbl1))
test_lrt(m.mbl0, m.mbl1)

#DESCRIBE MODEL
summary(m.mbl1)

#INTERPRET COEFFICIENTS
cint <- confint(m.mbl1, level = 0.95)
print("ODDS RATIO")
(e <- cbind( exp(coef(m.mbl1)), exp(cint))) #exponentiated, adjusted

#PERFORMANCE
performance(m.mbl1)

#TABLE
tab_model(m.mbl1, transform = "exp", title = "Model Predicted Odds Ratio")

```


##### Inference

-   Being in the IMPASSE condition *increases* the odds of giving an unknown (potentially nonsense) or blank/uncertain response rather than an orthogonal (or satisficing) response by a factor of 12 (z = 6.48, p \< 0.001) . **Participants in the impasse condition were 12x as likely to give an unknown/uncertain response rather than an orthogonal response compared to participants in control**.

-   Being in the IMPASSE condition *increases* the odds of giving 'triangle-like' response rather than an orthogonal (or satisficing) response by a factor of 29 (z = 4.63, p \< 0.001 ). **Participants in the impasse condition were more than 29x as likely to give an a triangular response rather than an orthogonal response compared to participants in control**.

-   As with the (binary) logistic regression on accuracy \~ condition, significant model intercepts indicate that the odds of being in any particular response state (vs) orthogonal are significantly different than 1 *in the control condition.* (i.e. not 1:1 odds or 50% chance of being in that response state. Orthogonal is a much more probable response state in control)

##### Visualize

```{r}


#set model 
m <- m.mbl1

#:::::::: PLOT

#SJPLOT | MODEL | ODDS RATIO
#library(sjPlot)
plot_model(m, vline.color = "red", 
           transform = "exp", #for some reason have to manually add for mixed?
           show.intercept = TRUE, 
           show.values = TRUE,
           p.threshold = 0.05, #can manually adjust to account for directional test
           ci.lvl = 0.95) +  #can manually adjusted for directional test   
  labs(title = "ODDS RATIO | State ~ condition",
       subtitle = "(p for  two-tailed test)")

library(parameters)

#PLOT PARAMETER ESTIMATES
result <- simulate_parameters(m)
plot(result, stack = FALSE)

result <- equivalence_test(m, rule = "cet")
plot(result)

#raw coefficients
plot_model(m)


#PLOT PARAMETERS
result <- model_parameters(m, exponentiate = TRUE, 
                           component = "all")
plot(result) + 
  labs(
  title = "Accuracy ~ Condition + (1 | subject) + (1 | question)",
  subtitle = "Logistic Mixed Effects Model"
)  + theme_clean() +  theme(legend.position = "blank") 

s
#TODO CAN'T SEEM TO COMPUTE MARGINAL EFFECTS PLOT FOR THE MIXED MODEL
# pr <- ggpredict(m, "pretty_condition", type = "fixed")
# plot(pr)
#PLOT MODEL PREDICTION
# plot_model(m, type = "pred")
# plot_model(m, type = "eff")

# TERNARY PLOT
# library(plot3logit)
# field3logit(ggpredict(m))
#https://cran.r-project.org/web/packages/plot3logit/vignettes/plot3logit-overview.html


#SJPLOT | MODEL | TABLE
tab_model(m)

```

##### Diagnostics

**COMPARE TO MANUAL MODELS**
```{r}
compare_models(m, m.unknown, m.tri)
```

##### Fit Model \[brms\]

```{r}

#BAYESIAN MIXED VERSION
mixcat.1 <- brm( state ~ pretty_condition + (1|subject) + (1|q), 
                 data = df_i, 
                 family = "categorical",
                 chains = 4, iter = 2000, warmup = 1000,
                 cores = 4, seed = 1234,
                 backend = "cmdstanr",
                 file ="analysis/SGC3A/models/sgc3a_brms_mixedcat_state_LAB.rds")
```


```{r}

m <- mixcat.1

#DESCRIBE MODEL
summary(m)
# report(mixcat.1)

#TABLE
# tab_model(m,
          # show.r2 = FALSE) #, transform = "exp", title = "Model Predicted Odds Ratio")


#TODO OUTPUT TABLE 
#https://arelbundock.com/posts/modelsummary_multinomial_logit/
# modelsummary(m)

```

##### Inference

-   Being in the IMPASSE condition *increases* the odds of giving an unknown (potentially nonsense) or blank/uncertain response rather than an orthogonal (or satisficing) response by a factor of 43.86.

-   Being in the IMPASSE condition *increases* the odds of giving 'triangle-like' response rather than an orthogonal (or satisficing) response by a factor of 6.64.


##### Visualize

```{r}

#:::::::: PLOT

#SJPLOT | MODEL | ODDS RATIO
#library(sjPlot)
plot_model(m, vline.color = "red", 
           show.intercept = TRUE, 
           show.values = TRUE,
           p.threshold = 0.05, #can manually adjust to account for directional test
           ci.lvl = 0.95 ) +  #can manually adjusted for directional test   
  labs(title = "ODDS RATIO | State ~ condition",
       subtitle = "(p for one two test)")


result <- estimate_density(m)
plot(result, stack = FALSE, priors = TRUE)

result <- describe_posterior(m)
plot(result, stack = FALSE, priors = TRUE)

result <- p_direction(m)
plot(result, stack = FALSE)

#ROPE
result <- rope(m, ci = 0.89)
plot(result) + theme_clean()

result <- equivalence_test(m)
plot(result)

#ERROR incompatible arguments to calculate multivariate normal distribution
# result <- simulate_parameters(m)
# plot(result)

#check posterior
pp_check(m, ndraws=1000)

#PERFORMANCE
# performance(m)

#Plot parameters
plot(model_parameters(m, exponentiate = TRUE))

#plot marginal predictions of model
plot_model(m, type = "pred")[[1]] + 
  labs(
    title = "Model Predicted Marginal Probabilities",
    x = "Condition", 
    y = "probability of being in each state"
  ) + theme_clean() 
```

##### COMPARE

```{r}
compare_models(m.unknown, m.tri, m.mbl1, mixcat.1)
```
The predictions of the manual, frequentist mixed multinomial and bayesian mixed multinomial models are comparable. 

DECISION: Report bayesian model, because for some reason the visualization of the marginal predictions is actually working?

##### TODO

-   priors? used default flat priors... ok?
-   posterior predictive checks
-   diagnostics on random effects
-   reconcilliation of mblogit() vs brms versions of the model; seems like they should yield similar estimates


## ARCHIVE

### H1B \| TEST PHASE ACCURACY

DECISION: There is no need to differentiate between test phase and scaffold phase; can just consider all items, BECAUSE even during the scaffold phase, incorrect responses are available in the control condition. The satisfice stragey yields a 0 absolute score, just like an orthogonal. Including all items (i=13) rather than just test phase(i=8) gives a little more statistical power in the mixed effects models. 

+-----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Research Question     | Do Ss in the IMPASSE condition score higher across the test phase than those in the CONTROL group?                                                                                                                                                                                 |
+=======================+====================================================================================================================================================================================================================================================================================+
| **Hypothesis**        | (H1B) Participants in the IMPASSE condition will have higher test phase performance than those in the CONTROL condition.                                                                                                                                                           |
+-----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Data**              | **data**: `df_items` where `q nin 1,2,3,4,5,6,9` (the 8 discriminating test phase Qs ), `df_subjects`                                                                                                                                                                              |
|                       |                                                                                                                                                                                                                                                                                    |
|                       | **outcome**:                                                                                                                                                                                                                                                                       |
|                       |                                                                                                                                                                                                                                                                                    |
|                       | -   \[at item level\] : *accuracy* ( factor(incorrect/correct) from `score_niceABS` \[absolute score\]                                                                                                                                                                             |
|                       | -   \[subject level\]: accuracy (number of test phase qs correct from total `s_NABS`)                                                                                                                                                                                              |
|                       |                                                                                                                                                                                                                                                                                    |
|                       | **predictor**: `condition` \[between-subjects factor\]                                                                                                                                                                                                                             |
+-----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Analysis Strategy** | 1.  Wilcoxon-Rank Sum (Mann-Whitney) test on subject-level total accuracy of test phase (`item_test_NABS`)                                                                                                                                                                         |
|                       | 2.  Mixed Logistic Regression\                                                                                                                                                                                                                                                     |
|                       |     `accuracy` \~ `condition` + (1 \| `subject` )\                                                                                                                                                                                                                                 |
|                       |     model effect of condition on probability of correct response \[during test phase\] while accounting for subject (and item-level?) effects                                                                                                                                      |
+-----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Alternatives**      | -   Ordinal Mixed Logistic Regression\                                                                                                                                                                                                                                             |
|                       |     `interpretation` \~ `condition` + (1 \| `subject` )\                                                                                                                                                                                                                           |
|                       |     model effect of condition on \[ordered correctness of interpretation\] \[during test phase\] while accounting for subject (and item-level?) effects                                                                                                                            |
|                       | -   Shift in Modal Mass (descriptive)\                                                                                                                                                                                                                                             |
|                       |     describe & visualize shift in deciles between conditions for `scaled_score` (at subject level)                                                                                                                                                                                 |
|                       | -   OLS Linear Regression: bimodal distribution at tails makes the mean a poor predictor; LMs violate assumptions of normally distributed residuals; both absolute and scaled scores yield non-normal residuals; no transformation of the outcome variables yield normal residuals |
+-----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Notes**             | **Also exploring:**                                                                                                                                                                                                                                                                |
|                       |                                                                                                                                                                                                                                                                                    |
|                       | -   Hurdle model (mixture model w/ binomial + \[poisson or negbinom count; 0s from 1 DGP)                                                                                                                                                                                          |
|                       | -   Zero Inflated model (mixture model w/ binomial + poisson or negbinom count; 0s from 2 DGPs)                                                                                                                                                                                    |
|                       | -   Beta regression hurdle model? (mixture with location and scale parameters \[mean, variance\] and hurdles for floor and ceiling effects)                                                                                                                                        |
|                       | -   Other way to account for the severe bimodality?                                                                                                                                                                                                                                |
+-----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

```{r}
#| label: SETUP-TEST-ACC


#item level
df = df_items %>% filter(q %nin% c(1,2,3,4,5,6,9)) %>% mutate(
  accuracy = recode_factor(score_niceABS, "0" ="incorrect","1"="correct"),
  q = as.factor(q)
)

#:::::::: STACKED PROPORTIONAL BAR CHART
df %>% 
  ggplot(data = .,
         mapping = aes(x = pretty_condition,
                       fill = accuracy)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_brewer(palette = "Set1")  +
  facet_wrap(~pretty_mode) + 
   labs(title = "Test Phase Accuracy",
       x = "Condition",
       fill = "",
       subtitle="Impasse Condition yields a greater proportion of correct responses")


#:::::::: FACETED HISTOGRAM
stats = df_subjects %>% group_by(pretty_condition) %>% dplyr::summarise(mean = mean(item_test_NABS))
gf_props(~item_test_NABS, 
         fill = ~pretty_condition, data = df_subjects) %>% 
  gf_facet_grid(pretty_condition ~ pretty_mode) %>% 
  gf_vline(data = stats, xintercept = ~mean, color = "red") +
  labs(x = "# Correct in Test Phase",
       y = "proportion of subjects",
       title = "Test Phase Absolute Score (# Correct)",
       subtitle = "") + theme(legend.position = "blank")

#:::::::: FACETED HISTOGRAM
stats = df_subjects %>% group_by(pretty_condition) %>% dplyr::summarise(mean = mean(item_test_NABS/8))
gf_props(~item_test_NABS/8, 
         fill = ~pretty_condition, data = df_subjects) %>% 
  gf_facet_grid(pretty_condition ~ pretty_mode) %>% 
  gf_vline(data = stats, xintercept = ~mean, color = "red") +
  labs(x = "% Correct in Test Phase",
       y = "proportion of subjects",
       title = "Test Phase Absolute Score (% Correct)",
       subtitle = "") + theme(legend.position = "blank")

```


```{r}

#:::::::: IN PERSON ONLY
df_i <- df_items %>% filter(mode == "lab-synch") %>% filter(q %nin% c(1,2,3,4,5,6,9)) %>% mutate(
  accuracy = recode_factor(score_niceABS, "0" ="incorrect","1"="correct")
) 

df_s <- df_subjects %>% filter(mode == "lab-synch") %>% mutate(
  test_score = item_test_NABS,
  test_percent = item_test_NABS/8
)


```

#### Describe

```{r}

title = "Descriptive Statistics of Response Accuracy (Test Phase % Correct)"
tbl1 <- mosaic::favstats(~test_percent, data = df_s) 
tbl1 %>% kbl (caption = title) %>% kable_classic()


title = "Descriptive Statistics of Response Accuracy (Test Phase % Correct) BY CONDITION"
tbl2 <- mosaic::favstats(test_percent ~ condition, data = df_s) 
tbl2 %>% kbl (caption = title) %>% kable_classic()

```

Across both conditions, overall accuracy on the test phase ranges from `r tbl1$min *100` to `r tbl1$max *100` with a mean of `r tbl1$mean * 100`. We see that the distribution of this outcome variable is clearly bimodal: with modes near the floor (0% correct) and ceiling (100% correct) of the scale. This bimodality is sensical considering the nature of the task, where each item in the task indexes a different information extraction operation over the same coordinate system.

A score of 100% indicates that the participant correctly interpreted the interval-coordinate system throughout the task, *starting at the first question*. A score of 0% indicates the individual *never* correctly interpreted the coordinate system. A score somewhere inbetween indicates that an individual deciphered the coordinate system *sometime over the course the task*.

#### WILCOXON RANK SUM (Mann-Whitney Test) --- SCORE

-   **Non parametric alternative** to t-test; compares median rather than mean by ranking data
-   Does not assume normality
-   Does not assume equal variance of samples (homogeneity of variance)

##### Test

```{r}


(w <- wilcox.test(df_s$test_score ~ df_s$condition,
                 paired = FALSE, alternative = "less")) #less, greater
report(w)

```

##### Visualize

```{r}


#[manual one-sided test]
(results <- statsExpressions::two_sample_test(y = test_score, x = condition, data = df_s,
                                type = "nonparametric", alternative = "less",
                                var.equal = FALSE))


#:::::::: STATSPLOT | VIOLIN
ggbetweenstats(y = test_score, x = condition, data = df_s,
               results.subtitle = FALSE, #override default [two tailed] test dsiplay
               subtitle = results$expression[[1]]
              )

```

##### Inference

A Mann-Whitney (Wilcoxon Rank Sum) test evaluating the difference in median accuracy score in the test phase of the graph comprehension task indicates that performance was better in the impasse (vs) control condition. \[report stats\]

#### WILCOXON RANK SUM (Mann-Whitney Test) --- PERCENTAGE

-   same as above, but on percentage rather than \# correct

##### Test

```{r}


(w <- wilcox.test(df_s$test_percent ~ df_s$condition,
                 paired = FALSE, alternative = "less")) #less, greater
report(w)

# df_s %>% wilcox_effsize(test_percent ~ condition)


```

##### Visualize

```{r}


#[manual one-sided test]
(results <- statsExpressions::two_sample_test(y = test_percent, x = condition, data = df_s,
                                type = "nonparametric", alternative = "less",
                                var.equal = FALSE))


#:::::::: STATSPLOT | VIOLIN
ggbetweenstats(y = test_percent, x = condition, data = df_s,
               results.subtitle = FALSE, #override default [two tailed] test dsiplay
               subtitle = results$expression[[1]]
              )

```

##### Inference

**Reported in dissertation**

Because the distribution of the outcome variable is not normally distributed, we evaluate the effect of CONDITION on ACCURACY via a non-parametric test. Consistent with our hypothesis, a Wilcoxon rank sum test (with continuity correction) on ACCURACY by CONDITION indicates that data in each condition likely come from different population distributions (W = 1438.00, p = 0.002; one-tailed), and that the distribution of the control condition is less (i.e. shifted to the left/ lower scores) than the impasse condition (\^{r} = -0.28, 95% CI \[-1.00, -0.11\]), a medium-sized effect.

#### MIXED LOGISTIC REGRESSION

*Fit a mixed logistic regression (at the item level), predicting accuracy (absolute score) on all discriminating questions by condition; accounting for random effects of subject and item.*

##### Fit Model

```{r}
#| label: MODEL-MLOG-ABS-LAB

## 1 | SETUP RANDOM INTERCEPT SUBJECT

#:: EMPTY MODEL (baseline, no random effect)
print("Empty fixed model")
m0 = glm(accuracy ~ 1, family = "binomial", data = df_i) 
# summary(m0)

#:: RANDOM INTERCEPT SUBJECT
print("Subject intercept random model")
mm.rS <- glmer(accuracy ~ (1|subject), data = df_i, family = "binomial")
# summary(mm.rS)

# :: TEST random effect
paste("AIC decreases w/ new model?", m0$aic > AIC(logLik(mm.rS)))
test_lrt(m0,mm.rS) #same as anova(m0, m1, test = "Chi")
paste("Likelihood Ratio test is significant? p = ",(test_lrt(m0,mm.rS))$p[2])
```

*A likelihood ratio test indicates that a logistic regression model including SUBJECT as a random effect explains more variance in the data than an empty \[intercept only\] model.*

```{r}

## 2 | ADD FIXED EFFECT CONDITION

print("FIXED Condition + Subject random intercepts")
mm.CrS <- glmer(accuracy ~ pretty_condition + (1|subject) ,
                data = df_i, family = "binomial")
summary(mm.CrS)


paste("AIC decreases w/ new model", AIC(logLik(mm.rS)) > AIC(logLik(mm.CrS)) )
test_lrt(mm.rS,mm.CrS) #same as anova(m0, m1, test = "Chi")
paste("Likelihood Ratio test is significant? p = ",(test_lrt(mm.rS,mm.CrS))$p[2])

```

```{r}
# print("FIXED Condition + Subject & Item random intercepts")
# mm.CrSQ <- glmer(accuracy ~ pretty_condition + (1|subject) + (1|q) ,
#                 data = df_i, family = "binomial")
# summary(mm.CrSQ)
```

##### Describe

```{r}

# best model
m1 <- mm.CrS

#::::::::: PRINT MODEL 

print("PREDICTOR MODEL")
summary(m1)
car::Anova(m1)

#:::::::: MANUAL ONE-SIDED SIGTEST 

# one-sided (right tail) z test for B COEFFICIENT
#SANITY CHECK 2-tailed test should match the model output
tt <- 2*pnorm(summary(m1)$coefficients[2,3], lower.tail = F)
paste("p value for two-tailed test, null B = 0 : ",round(tt,5))
ot <- pnorm(summary(m1)$coefficients[2,3], lower.tail = F)
paste("BUT we want a one tailed directional, null: B <= 0: ",round(ot,5))

#:::::::: INTERPRET COEFFICIENTS

se <- sqrt(diag(stats::vcov(m1)))
# table of estimates with 95% CI
paste("LOG ODDS")
(tab <- cbind(Est = fixef(m1), LL = fixef(m1) - 1.96 * se, UL = fixef(m1) + 1.96 *
    se))
paste("ODDS RATIOS")
(e <- exp(tab))

```


##### Visualize

```{r}
#:::::::: PLOT

#GGSTATS | MODEL | LOG ODDS 
ggcoefstats(m1, output = "plot", 
              conf.level = 0.90) + 
  labs(x = "Log Odds Estimate", 
       subtitle = "p is for two tailed test")

#SJPLOT | MODEL | ODDS RATIO
#library(sjPlot)
plot_model(m1, vline.color = "red", 
           show.intercept = TRUE, 
           show.values = TRUE,
           p.threshold = 0.1, #manually adjust to account for directional test
           ci.lvl = 0.90 ) + #manually adjusted for directional test   
  labs(title = "Model Predicted Odds Ratio",
       subtitle = "",
       x = "Condition")

#SJPLOT | MODEL | PROBABILITIES
plot_model(m1, type="eff",
           show.intercept = TRUE,
           show.values = TRUE,
           title = "Model Predicted Probability of Accuracy",
           axis.title = c("Condition","Probability of Accurate Response"))

```

```{r}
#SJPLOT | MODEL | TABLE
# tab_model(m1)


# #MODEL SUMMARY | save latex table
# models <- list("odds ratios" = m1, "(log odds)" = m1)
# notes = list('N(subject) = 126 $\tau_{00}$(subject) = 22.22',
#              'N(question) = 13 $\tau_{00}$(question) = 0.31',
#                "*** indicates p < 0.001")
# # 
# modelsummary(models,
#              exponentiate = c(TRUE, FALSE),
#              shape = term ~ model + statistic,
#              fmt = 2, #two digits w/ trailing zero
#              estimate  = "{estimate} {stars}",
#              statistic = "conf.int",
#              coef_rename = c("pretty_conditionimpasse" = "Condition[impasse]"))

#              # coef_omit = "Intercept",
#              gof_omit = 'AIC|RMSE|ICC|BIC',
#              title = 'Accuracy ~ Condition (Mixed Logistic Regression)', notes = notes,
#              output = "analysis/SGC3A/models/tables/GLMER_OverallAccuracy_lab.tex")

```

##### Diagnostics

```{r}
#| warning: false
#| message: false

print("SANITY CHECK REPORTING")
# report(m1)

print("MODEL PERFORMANCE")
performance(m1)

print("DIAGNOSTICS")
check_model(m1)
binned_residuals(m1)
```

##### TODO

-   sanity check interpretation
-   sanity check random effects structure :
    -   do I need to have ITEM as random intercept? What does it mean to have two random intercepts?
-   DIAGNOSTICS: What in the world is happening with the normality of random effects plot? Do the fixed effects residuals need to be normally distributed?
-   Are there other plots or recommended diagnostics for mixed log regression
-   consider multiple regression with rt, sequence cluster, confidence, etc.
-   What else needs to be interpreted with respect to the item and subject random effects?
-   Double check: can't have condition by subject or item slope bc subjects are nested in conditions, not crossed

### SHIFT IN MODAL MASS

The Effect of Condition on Total Scaled Score can be described as a 'shift' in mass between the low and high modes of each distribution.

*First, we use the Kolmogorov-Smirnov test as a Robust alternative to the t-test to test if the two distributions likely come from different populations.*

```{r}
#| label: COMPARE-DIST-NABS-comb

# HACK WD FOR LOCAL RUNNING?
# imac = "/Users/amyraefox/Code/SGC-Scaffolding_Graph_Comprehension/SGC-X/ANALYSIS/MAIN"
# mbp = "/Users/amyfox/Sites/RESEARCH/SGCâ€”Scaffolding Graph Comprehension/SGC-X/ANALYSIS/MAIN"
# setwd(mbp)

#(requires shift function files loaded)
#LOAD MODAL SHIFT FUNCTION RESOURCES
source("analysis/utils/shift_function/Rallfun-v30.txt")
source("analysis/utils/shift_function/wilcox_modified.txt")
source("analysis/utils/shift_function/rgar_visualisation.txt")
source("analysis/utils/shift_function/rgar_utils.txt")
#NOTE: something in these breaks the stat_ecdf in ggplot2

#PREP DATA 
df <- df_subjects %>%
  dplyr::select(s_SCALED, pretty_condition) %>%
  mutate(
    data = as.numeric(s_SCALED),
    #flip order levels to correctly orient graph
    # gr = recode_factor(pretty_condition, "impasse" = "impasse", "control"="control")
    gr = as.character(pretty_condition)
  ) %>% dplyr::select(data,gr)


g1 <- df %>% filter(gr == "control") %>% dplyr::pull(data)
g2 <- df %>% filter(gr == "impasse") %>% dplyr::pull(data)


#COMPARE DISTRIBUTIONS WITH ROBUST TESTS

#What do common tests say about the difference?

# Kolmogorov-Smirnov test
#If y is numeric, a two-sample (Smirnov) test of the null hypothesis that x and y 
#were drawn from the same continuous distribution is performed. Alternatively, y ...

#null is X is drawn from CDF EQUAL TO Y
ks.test(g1,g2) 
print("SUGGESTS that impasse and control come from different population distributions")

# #null is X is NOT LESS THAN Y
ks.test(g1,g2, alternative = "greater") 
print("SUGGESTS that true CDF of CONTROL is greater than that of IMPASSE [consistent with higher probability of low scores]")

#REGULAR T-TEST
t.test(g1,g2) # regular Welsh t-test

```

```{r}
#| label: SHIFT-FN-NABS-comb
#| warnings: false
#| messages: false

#IF THIS ERRORS, consider loadling plyr (older than dplyr)
# kernel density estimate + rug plot + superimposed deciles
kde <- plot.kde_rug_dec2(df)
# kde

# compute shift function
out <- shifthd( g1, g2, nboot=200)

# plot shift function
sf <- plot.sf(data=out) # function from rgar_visualisation.txt
# sf

# combine KDE + SF
cowplot::plot_grid(kde, sf, labels=c("A", "B"), ncol = 1, nrow = 2, rel_heights = c(1.5, 1),label_size = 18,hjust = -1,scale=.95)

```

### H1B \| TEST PHASE INTERPRETATION STATE

**Do Ss in the IMPASSE condition offer less-orthogonal interpretations across the test phase questions?**

While absolute accuracy score tells us whether a participant successfully interpreted the coordinate system, it doesn't allow us to differentiate between different kinds of incorrect interpretations. Here we examine the (categorical) interpretation state type based on the nature of subject's response, and determine if these interpretations differ by experimental condition. State is a 3-category variable that groups the following interpretations:

-   **"orthogonal-like"** \[reference category\] includes orthogonal and satisficing responses ==\> indicates a primarily *orthogonal* state of coordinate system understanding
-   **"unknown"** includes: blank, reference point, responses that can't be classified (including selecting all datapoints) =\> indicates an uncertain or unidentifiable state of coordinate system understanding, but one that is distinctly *not* orthogonal nor triangular
-   **"triangle-like"** includes correct triangular and 'lines connecting' responses as well as responses that include both orthogonal *and* triangular answers =\> indicates some degree of angular/triangular coordinate understanding

+-----------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| Research Question     | Does Ss in the impasse condition produce less orthogonal responses across questions in the test phase?                                          |
+=======================+=================================================================================================================================================+
| **Hypothesis**        | H1A \| Ss in the IMPASSE condition will have a higher likelihood of producing unknown and triangle-like response states across test phase items |
+-----------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| **Data**              | -   data: `df_items` where `q nin 1,2,3,4,5,6,9` (8 discriminant test phase items)                                                              |
|                       | -   outcome: `state` ( 3 level factor from high_interpretation )                                                                                |
|                       | -   predictor: `condition` \[between-subjects factor\]                                                                                          |
+-----------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| **Analysis Strategy** | 1.  MIXED Multinomial (Logistic) Regression on state predicted by condition                                                                     |
|                       |                                                                                                                                                 |
|                       | Alternative:                                                                                                                                    |
|                       |                                                                                                                                                 |
|                       | -   MIXED Ordinal regression on state (doesn't meet proportional odds assumption-I think)                                                       |
|                       | -   MIXED Multinomial or Ordinal regression on high_interpretation (some cells are 0, produces problems)                                        |
+-----------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+

```{r}
#| label: SETUP-TEST-INTERPRETATION

#:::::::: PREP DATA
df = df_items %>% filter(q %nin% c(1,2,3,4,5,6,9)) %>% mutate(
  q = as.factor(q),
  subject = as.factor(subject)
)

#:::::::: STACKED BAR CHART
df %>% 
  ggplot(data = .,
         mapping = aes(x = pretty_condition,
                       fill = state)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_brewer(palette = "Set1")  +
  facet_wrap(~pretty_mode) + 
   labs(title = "Test Phase Interpretation",
       x = "Condition",
       fill = "",
       subtitle="")

```

A proportional bar chart visualizing the proportion of each interpretations type by condition for each data collection modality (left/right facet) reveals that the pattern of responses are similar regardless of the data collection modality, by differ by condition. In the impasse condition, there are more triangular responses than in control. In the impasse condition, there are also more positive transition (i.e. triangle-like) and neutral (ie. blank or uncertain response types) than in the control condition.


```{r}

#:::::::: IN PERSON ONLY
df <- df_items %>% filter(mode == "lab-synch") %>% filter(q %nin% c(1,2,3,4,5,6,9)) 

#::::::::::::DESCRIPTIVES

table(df$state, df$pretty_condition) %>% addmargins(2) %>% #display sum for row
      prop.table(margin=2) %>%  #return proportion (of column)
      addmargins(1) #sanity check sum of columns


(t <- table(df$state, df$pretty_condition) %>% addmargins(2) %>% #display sum for row
      addmargins(1)) #sanity check sum of columns

```

#### MIXED MULTINOMIAL REGRESSION

**TODO** - add a 1 to the empty cell and re-run mblogit to show that estimates are more similar to the brms results - run individual mixed models to show results are similar to mblogit vs brms

*Does condition affect the response state of of items in the test phase?*

*Fit a MIXED logistic regression predicting interpretation state (k=3) by condition(k = 2).*

-   Can use mclogit mblogit() with random effect *or* bayesian brms package b/c nlme, lme4 don't support random effects on multinomial (ie no categorical family on glmer())

-   Alternative would be to manually run 2 X binomial mixed models \[should compare outcomes\]

-   2 equations will be estimated (# categories - 1); each representing the odds of answering in that particular interpretation (vs) the reference category (orthogonal answer) \[essentially a series of binary logistic regressions, but instead of incorrect/correct, comparing \[reference category\] vs \[this category\])

-   For *each* equation:

    -   $\beta_{0}$ *= Log Odds of \[this category type vs. reference category type) response in CONTROL condition*
    -   $e^{\beta_{0}}$ *= ODDS of \[this category type vs. reference category type\] response in CONTROL condition*
    -   $\beta_{1}$ *=* $\beta_{1impasse}$ *Log Odds (Log OR; change in odds for \[this category\] type response in impasse (vs) control \[log scale\])*
    -   $e^{\beta_{1}}$ *= ODDS RATIO of \[this. vs reference category type\] response in IMPASSE (vs) CONTROL*
    -   Two-tailed NHST *Null hypothesis:* $\beta_{impasse} = 0$ *the odds for \[this category of response vs. reference\] are not different for IMPASSE condition*
    -   *Alternative hypothesis:* $\beta_{impasse} \ne 0$ *the odds of \[this category of response vs. reference\] increases or decreases for IMPASSE condition*

##### Fit Model \[MANUAL INDIVIDUAL BINOMIALS\]

```{r}

#VERIFY RESULTS BELOW VIA MULTIPLE INDIVIDUAL MODELS

paste("ORTH vs. UNKNOWN")

d1 <- df %>% filter(state %nin% c("tri-like")) %>% droplevels()
table(d1$condition, d1$state)
plot(d1$condition, d1$state)

m.unknown <- glmer(state ~ pretty_condition + ( 1 | subject), family = "binomial", data = d1)
summary(m.unknown)
```

*Being in the IMPASSE condition increases* the odds of giving an unknown (potentially nonsense) or blank/uncertain response rather than an orthogonal (or satisficing) response by a factor of 7.7 ( logodds = 2.041, z = 0.559, p \< 0.001) . Participants in the impasse condition were 7.7x as likely to give an unknown/uncertain response rather than an orthogonal response compared to participants in control. (Conditional R2 = 0.59, marginal R2 = 0.13; SD(subject) = 1.93)

```{r}

paste("ORTH vs. TRIANGULAR")

d2 <- df %>% filter(state %nin% c("unknown")) %>% droplevels()
table(d2$condition, d2$state)
plot(d2$condition, d2$state)

m.tri <- glmer(state ~ pretty_condition + ( 1 | subject), family = "binomial", data = d2)
summary(m.tri)

```

*Being in the IMPASSE condition increases* the odds of giving an triangle-like response by a factor of 1604 ( logodds = 7.38, z = 1.86, p \< 0.001) . Participants in the impasse condition were 1604x as likely to give an triangle-like response rather than an orthogonal response compared to participants in control. (Conditional R2 = 0.96, marginal R2 = 0.0.16; SD(subject) = 8.29)

##### Fit Model \[mblogit\]

```{r}

#https://www.elff.eu/software/mclogit/manual/mblogit/
#"baseline category logit" model matches multinom()

#check reference level 
print("Categories (first is reference)")
levels(df$state)

#FIT EMPTY MODEL
# print("EMPTY MODEL")
m.mbl0 <- mblogit(state ~ pretty_condition ,  #no random intercepts; fixed only model 
                  data = df)
#summary(m.mbl0)

#FIT PREDICTOR MODEL
# print("PREDICTOR MODEL")
m.mbl1 <- mblogit(state ~ pretty_condition , 
                  random = ~ 1 | subject , 
                  data = df)
# summary(m.mbl1)

#COMPARE MODEL FIT
paste("AIC wth predictor is lower than empty model?", AIC(m.mbl0) > AIC(m.mbl1))
test_lrt(m.mbl0, m.mbl1)

#DESCRIBE MODEL
summary(m.mbl1)
# car::Anova(m.mbl1)

#INTERPRET COEFFICIENTS
cint <- confint(m.mbl1, level = 0.95)
print("ODDS RATIO")
(e <- cbind( exp(coef(m.mbl1)), exp(cint))) #exponentiated, adjusted

#PERFORMANCE
performance(m.mbl1)

#TABLE
tab_model(m.mbl1, transform = "exp", title = "Model Predicted Odds Ratio")
```

##### Inference

-   Being in the IMPASSE condition *increases* the odds of giving an unknown (potentially nonsense) or blank/uncertain response rather than an orthogonal (or satisficing) response by a factor of 4.7 (z = 3.92, p \< 0.001) . **Participants in the impasse condition were 4.7x as likely to give an unknown/uncertain response rather than an orthogonal response compared to participants in control**.

-   Being in the IMPASSE condition *increases* the odds of giving 'triangle-like' response rather than an orthogonal (or satisficing) response by a factor of 8.61 (z = 3.30, p \< 0.001 ). **Participants in the impasse condition were more than 8.6x as likely to give an a triangular response rather than an orthogonal response compared to participants in control**.

-   As with the (binary) logistic regression on accuracy \~ condition, significant model intercepts indicate that the odds of being in any particular response state (vs) orthogonal are significantly different than 1 *in the control condition.* (i.e. not 1:1 odds or 50% chance of being in that response state. Orthogonal is a much more probable response state in control)

-   TODO: these estimates seem low to me, given the estimates for the Q1 only model. Also different from brms estimates (below) Suspect NaNs error thrown with mblogit() may be relevant

##### Visualize

```{r}
#| label: VIS-TEST-INTERPRETATION-LAB

#:::::::: PLOT

#SJPLOT | MODEL | ODDS RATIO
#library(sjPlot)
plot_model(m.mbl1, vline.color = "red", 
           transform = "exp", #for some reason have to manually add for mixed?
           show.intercept = TRUE, 
           show.values = TRUE,
           p.threshold = 0.05, #can manually adjust to account for directional test
           ci.lvl = 0.95) +  #can manually adjusted for directional test   
  labs(title = "ODDS RATIO | Test Phase State ~ condition",
       subtitle = "(p for  two-tailed test)")

#SJPLOT | MODEL | TABLE
tab_model(m.mbl1)

```

##### Diagnostics

```{r}

print("MODEL PERFORMANCE")
performance(m.mbl1)

#General Goodness of Fit
#library(generalhoslem)
#logitgof(df$state, catm$fitted.values, g = 3)
#A non-significant p value indicates that there is no evidence that the observed and expected frequencies differ (i.e., evidence of good fit).
#don't fret! this version of the hoslem-lem test is problematic with fewer than 10 input variables

# print("MODEL DIAGNOSTICS")
# check_model(m.mbl1) can't do overall diagnostics, have to do them on individual model equations

```

##### Fit Model \[brms\]

```{r}


#library(brms) #bayesian mixed regression models

#BAYESIAN MIXED VERSION
mixcat.1 <- brm( state ~ condition + (1|subject), data = df, family = "categorical",
                                          file = "analysis/models/sgc3a_brms_mixedcat_teststate_LAB.rds") # cache model (can be removed)))

#DESCRIBE MODEL
summary(mixcat.1)
# report(mixcat.1)

#VISUALIZE

plot(mixcat.1)
plot_model(mixcat.1)
check_posterior_predictions(mixcat.1, draws=1000)
library(bayesplot)
library(bayestestR)
plot(rope(mixcat.1, ci = 0.89))

#PERFORMANCE
performance(mixcat.1)

#TABLE
tab_model(mixcat.1,
          show.r2 = FALSE) #, transform = "exp", title = "Model Predicted Odds Ratio")

# modelsummary(mixcat.1, s)
#TODO OUTPUT TABLE 
#https://arelbundock.com/posts/modelsummary_multinomial_logit/
```

##### Inference

-   Being in the IMPASSE condition *increases* the odds of giving an unknown (potentially nonsense) or blank/uncertain response rather than an orthogonal (or satisficing) response by a factor of 43.86.

-   Being in the IMPASSE condition *increases* the odds of giving 'triangle-like' response rather than an orthogonal (or satisficing) response by a factor of 6.64.

-   TODO RECONCILE:: brms model provides *substantially* higher estimate for blank/uncertain response (vs) the mblogit frequentist model. I think these should be similar, as they were for the non-mixed veresions. Suspect NaNs error thrown with mblogit() may be relevant

##### Visualize

```{r}

#:::::::: PLOT

#SJPLOT | MODEL | ODDS RATIO
#library(sjPlot)
plot_model(mixcat.1, vline.color = "red", 
           show.intercept = TRUE, 
           show.values = TRUE,
           p.threshold = 0.05, #can manually adjust to account for directional test
           ci.lvl = 0.95 ) +  #can manually adjusted for directional test   
  labs(title = "ODDS RATIO | Test Phase State ~ condition",
       subtitle = "(p for one two test)")


result <- estimate_density(mixcat.1)
plot(result, stack = FALSE, priors = TRUE)

result <- describe_posterior(mixcat.1)
plot(result, stack = FALSE, priors = TRUE)

result <- p_direction(mixcat.1)
plot(result, stack = FALSE)

prior_summary(mixcat.1)

hypothesis(mixcat.1, "muunknown_condition121 > 0 ")


```

##### Diagnostics

##### TODO

-   priors? used default flat priors... ok?
-   posterior predictive checks
-   diagnostics on random effects
-   reconcilliation of mblogit() vs brms versions of the model; seems like they should yield similar estimates
