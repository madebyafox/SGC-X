---
subtitle: 'Study SGC3A | (OSPAN) Hypothesis Testing'
# YAML FOR generating modelsummary tables
# uncomment to run those  cells only 
# \usepackage{booktabs}
# \usepackage{siunitx}
# \newcolumntype{d}{S[input-symbols = ()]}
---

\newpage

# SGC3 (OSPAN) Hypothesis Testing {#sec-SGC3A-ospan-hypotesting}

*The purpose of this notebook is test the hypotheses that determined the design of the SGC3A study WITH OSPAN.*

```{r}
#| label: SETUP
#| warning : false
#| message : false


#UTILITIES
library(Hmisc) # %nin% operator
library(broom) #tidy model output
library(broom.mixed) #tidy mixed models
library(mosaic) #favstats
library(svglite) #saving plots as svg
library(distributional)

#VISUALIZATION
# library(ggpubr) #arrange plots
# library(cowplot) #arrange shift function plots
library(ggformula) #easy graphs
library(scales) 
# # library(vcd) #mosaic plots
# # library(vcdExtra) #mosaic plots
library(kableExtra) #printing tables
library(sjPlot) #visualize model coefficients
library(ggdist) #uncertainty viz
library(modelr) #needed for ggdist
library(gghalves) # plots. in half
library(ggbeeswarm) # violin plot stuffs
library(statsExpressions)
library(ggstatsplot) #plots with stats
library(modelsummary) #latex tables for models!
library(cowplot) #arrange plots

#MODELLING
# library(rstatix) #helpful testing functions incl wilcoxon, etc
library(report) #easystats reporting
library(see) #easystats visualization
library(performance) #easystats model diagnostics
library(parameters) #easystats model summary and vis
library(marginaleffects) #contrasts on brms multinomials 
# library(qqplotr) #confint on qq plot
# library(gmodels) #contingency table and CHISQR
# library(equatiomatic) #extract model equation
# library(pscl) #zeroinfl / hurdle models 
library(lme4) #mixed effects models
library(lmerTest) #for CIs in glmer
library(merTools) #predictInterval
library(emmeans) #estimated marginal effects and posthocs on interactions
# library(ggeffects) #visualization log regr models
#MULTINOMIAL 
library(nnet) #multinomial logistic regression [not mixed] #no p values
library(mclogit) #frequentist mixed multinomial logistic regression [mblogit] #gives p values
#BAYESIAN
library(cmdstanr) #executing stan
library(brms) #bayesian mixed multinomials [+ other bayesian reg models]
library(bayestestR) 
library(tidybayes)
library(posterior)

library(tidyverse) #ALL THE THINGS

#OUTPUT OPTIONS
library(dplyr, warn.conflicts = FALSE)
options(dplyr.summarise.inform = FALSE)
options(ggplot2.summarise.inform = FALSE)
options(scipen=1, digits=3)

#GRAPH THEMEING
# theme_set(theme_minimal()) 

# Custom ggplot theme to make pretty plots
# Get the font at https://fonts.google.com/specimen/Barlow+Semi+Condensed
theme_clean <- function() {
  theme_minimal(base_family = "Barlow Semi Condensed") +
    theme(panel.grid.minor = element_blank(),
          plot.title = element_text(family = "BarlowSemiCondensed-Bold"),
          axis.title = element_text(family = "BarlowSemiCondensed-Medium"),
          strip.text = element_text(family = "BarlowSemiCondensed-Bold",
                                    size = rel(1), hjust = 0),
          strip.background = element_rect(fill = "grey80", color = NA))
}

set_theme(base = theme_clean())

##IMPORT CUSTOM COLOR PALETTES
source("analysis/utils/foxy_palettes.R")

set.seed(12345)

```

In SGC3A-OSPAN we set out to answer the following question: Does posing a mental impasse improve performance on the interval graph comprehension task? Does WORKING MEMORY CAPACITY (as measured by the OSPAN task) explain performance on the graph comprehension task?


```{r}
#| label: IMPORT-DATA
#| warning : false
#| message : false

#IMPORT DATA 

df_subjects <- read_rds('analysis/SGC3A/data/2-scored-data/sgc3a_scored_participants_OSPAN.rds') %>% mutate(
  task_percent = DV_percent_NABS,
  ospan_split = recode_factor(ospan_split, 
                                "low-memory" = "low-memory", "high-memory"="high-memory")) %>% #recode ospan_split as factor with low as reference 
  droplevels()

df_items <- read_rds('analysis/SGC3A/data/2-scored-data/sgc3a_scored_items_OSPAN.rds') %>% 
   mutate (
    q = as.factor(q), 
    subject = as.factor(subject),
    accuracy = recode_factor(score_niceABS, "0" ="incorrect","1"="correct"),
    # CODES TVERSKY AS TRI-LIKE
    # state = recode_factor(score_SCALED, #for ordinal
    #                      "-1" = "orth-like",
    #                      "-0.5" = "unknown",
    #                      "0" = "unknown",
    #                      "0.5" = "tri-like",
    #                      "1" = "tri-like"),
    # CODES TVERSKY AS OTHER
    state = recode_factor(score_SCALED, #for ordinal
                         "-1" = "orthogonal",
                         "-0.5" = "other",
                         "0" = "other",
                         "0.5" = "angular",
                         "1" = "triangular"),
    state = as.ordered(state))
    




##ADD OSPAN SCORE TO ITEM RECORD
subjects <- df_subjects %>% dplyr::select(subject,OSPAN.weighted, ospan_split)
items <- df_items 
items <- merge(items,subjects)
df_items <- items
rm(subjects,items)


```

## SAMPLE

### Data Collection

Data was collected (online, via SONA) in Fall 2021. Note that approximately 200 subjects were run in Fall 2021, but only 133 of them completed the OSPAN task. Therefore subjects who did not complete the task are discarded from analysis.

```{r}
#| label : DESC-DATA-COLLECTION

title = "Participants by Condition and Data Collection Period"
cols = c("Control Condition","Impasse Condition","Total for Period")
cont <- table(df_subjects$term, df_subjects$condition)
cont %>% addmargins() %>% kbl(caption = title, col.names = cols) %>%  kable_classic()

```

### Participants

```{r}
#| label: DESC-PARTICIPANTS

#Describe participants
subject.stats <-df_subjects %>% dplyr::select(age) %>% unlist() %>% favstats()
subject.stats$percent.male <- ((df_subjects %>% filter(gender=="Male") %>% count())/count(df_subjects))$n
subject.stats$percent.female <- ((df_subjects %>% filter(gender=="Female") %>% count())/count(df_subjects))$n
subject.stats$percent.other <- ((df_subjects %>% filter(gender %nin% c("Female","Male")) %>% count())/count(df_subjects))$n


title = "Descriptive Statistics of Participant Age and Gender"
subject.stats %>% kbl (caption = title) %>% kable_classic()%>% 
  footnote(general = "Age in Years", 
           general_title = "Note: ",footnote_as_chunk = T) 
```
**REPORTED**


**Overall** `r subject.stats$n` participants (`r round((subject.stats$percent.male),2) * 100` % male, `r round((subject.stats$percent.female),2) * 100` % female, `r round((subject.stats$percent.other),2) * 100` % other)  undergraduate STEM majors at a public American University participated in exchange for course credit (age: `r (subject.stats$min)` - `r (subject.stats$max)` years).

[230 subjects were recorded to study database in FA21 - 32 pilot sgc3b] 


### OSPAN



```{r}
#| label: DESC-SUBJ-OSPAN
 
title = "Descriptive Statistics of OSPAN Task Accuracy"
ospan.stats <- rbind(
  "MATH" = df_subjects %>% dplyr::select(OSPAN.math_acc) %>% unlist() %>% favstats(),
  "ORDER" = df_subjects %>%  dplyr::select(OSPAN.order_acc) %>% unlist() %>% favstats(),
  "WEIGHTED" = df_subjects %>% dplyr::select(OSPAN.weighted) %>% unlist() %>% favstats()

)
ospan.stats %>% kbl (caption = title) %>% kable_classic() %>%
  footnote(general = "MATH = %correct of all math questions;
           ORDER = % correct of OSPAN ordering (out of 30); WEIGHTED = math*ospan number correct", general_title = "Note: ",footnote_as_chunk = T)

```


```{r}
#| label: VIS-SUBJ-OSPAN

# #GGFORMULA | DENSITY HISTOGRAM 
 med = median(df_subjects$OSPAN.weighted)
  gf_dhistogram(~OSPAN.weighted, data = df_subjects) %>% 
  gf_vline(xintercept = ~med, color = "red") +
  labs(x = "OSPAN (weighted) score",
       y = "% of subjects",
       title = "Distribution of OSPAN SCORE",
       subtitle = "line indicates median split")


#:::::::: STACKED PROPORTIONAL BAR CHART
df_subjects %>% 
  ggplot(data = .,
         mapping = aes(x = pretty_condition,
                       fill = ospan_split)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_brewer(palette = "Set1")  +
  # facet_wrap(~ospan_split) + 
   labs(title = "OSPAN SPLIT",
       x = "Condition",
       fill = "",
       subtitle="After taking a median split, comparable high(vs) low in each condition")

```









## OVERALL ACCURACY



#### Setup
```{r}
#| label: SETUP-ACC

df_i = df_items %>% filter(q %nin% c(6,9)) %>% 
  dplyr::select(pretty_condition, accuracy, subject,q, ospan_split, OSPAN.weighted)

df_s <- df_subjects %>% 
  dplyr::select(pretty_condition, ospan_split, task_percent)

```


#### Visualize

##### Explore

```{r}

#:::::::: STACKED BAR CHART BY QUESTION
df_i %>% 
  ggplot(data = .,
         mapping = aes(x = pretty_condition,
                       fill = accuracy)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_brewer(palette = "Set1")  +
  facet_wrap( q ~ ospan_split) +
   labs(title = "Accuracy by Question",
       x = "Condition",
       fill = "",
       subtitle="Q6 and Q9 are non-discriminative")

#:::::::: FACETED HISTOGRAM
stats = df_s %>% group_by(pretty_condition) %>% dplyr::summarise(mean = mean(task_percent))
gf_props(~task_percent,
         fill = ~pretty_condition, data = df_s) %>%
  gf_facet_grid(pretty_condition ~ ospan_split) %>%
  gf_vline(data = stats, xintercept = ~mean, color = "red") +
  labs(x = "% Correct",
       y = "proportion of subjects",
       title = "Overall Absolute Score (% Correct)",
       subtitle = "") + theme(legend.position = "blank")

```

##### Present
```{r}
#| message: false
#| warning: false

#TODO   
p <- grouped_ggbetweenstats(data = df_s,
                       y = task_percent, x = pretty_condition, grouping.var = ospan_split,
               plot.type = "box", type = "nonparametric", var.equal = FALSE,
               centrality.type = "parametric",
               results.subtitle = FALSE,
               centrality.point.args = list(color="black", size = 3, shape = 1),
               # point.args = list(alpha=0), #suppress points
               ggplot.component = ## modify further with `{ggplot2}` functions
                list(
                  labs(y = "Percentage of correct responses across task", x = ""),
                  aes(color = pretty_condition, fill = pretty_condition),
                  scale_fill_grey(), scale_color_grey()
                  # scale_colour_manual(values = paletteer::paletteer_c("viridis::viridis", 3)),
                  # scale_fill_manual(values = paletteer::paletteer_c("viridis::viridis", 3))
                  # theme(axis.text.x = element_text(angle = 90)
                )) 

p1 <- p[[1]] + coord_flip() + theme_clean() +
   ggeasy::easy_remove_legend()

p2 <- p[[2]] + coord_flip() + 
  labs(
       subtitle = "") + 
  theme_clean() + ggeasy::easy_remove_axes(which = "x") + ggeasy::easy_remove_legend()


pg <- cowplot::plot_grid(p2, p1, ncol=1)
pg

# ggsave(pg, filename = "figures/SGC3A_OSPAN_totalscore.png", width = 6, height =4)


```

```{r}
#| label: DESC-ACC

#:::::::: STACKED PROPORTIONAL BAR CHART
p <- df_i %>% 
  ggplot(data = .,
         mapping = aes(x = pretty_condition,
                       fill = accuracy)) +
  geom_bar(position = "fill", width = 0.5 ) + #,color = "black") +
  scale_fill_foxy(discrete = TRUE, "accuracy")  +
  # scale_fill_manual(values = paletteer::paletteer_d("lisa::FridaKahlo", 2))+
  facet_wrap(~ospan_split)+
  theme(legend.position="bottom")+
   labs(title = "DISTRIBUTION | Question Accuracy",
       x = "Condition",
       y = "Proportion of Questions",
       fill = "")
       # subtitle="Impasse is particularly effective for participants with high-working memory")
p
# ggsave(p, filename = "figures/SGC3A_OSPAN_accuracy.png", width = 6, height =4)


#:::::::: LABELLED 
# 
# temp <- df_i %>% mutate(
#   accuracy = fct_rev(accuracy)
# )  
# 
# #CREATE PLOT WITH LABELS
# p <- grouped_ggbarstats(data = temp, x = accuracy, y = pretty_condition,
#                grouping.var = ospan_split,
#                results.subtitle = FALSE,
#                ggplot.component = ## modify further with `{ggplot2}` functions
#                 list(
#                   scale_fill_manual(values = paletteer::paletteer_d("lisa::FridaKahlo", 2))
#                   # theme(axis.text.x = element_text(angle = 90)))
#                ))  + theme_clean() 
# 
# #FIX LABELS
# p1 <- p[[1]] +  labs(
#   subtitle = "Impasse is particularly effective for subjects with high-working memory",
#     x = "Condition", y = "Probability of Response"
#   ) + theme_clean() + theme(legend.position = "blank") 
#  
# p2 <-   p[[2]] + labs(
#     x = "Condition", y = "Probability of Response",
#     subtitle = "   "
#   ) + theme_clean() + theme(legend.position = "blank") +
#   ggeasy::easy_remove_axes(which="y", what=c("text","title"))
#   # ggeasy::easy_remove_axes(which="y", what= ""))
# 
# #CREATE ROW
# 
# plot_row <- plot_grid(p1,p2, rel_widths = c(1,0.85))
# 
# title <- ggdraw() + 
#   draw_label(
#     "DISTRIBUTION | Question Accuracy",
#     fontface = 'bold',
#     x = 0,
#     hjust = 0
#   ) +
#   theme(
#     # add margin on the left of the drawing canvas,
#     # so title is aligned with left edge of first plot
#     plot.margin = margin(0, 0, 0, 7)
#   )
# 
# 
# pg <- plot_grid(
#   title,
#   plot_row,
#   ncol = 1,
#   # rel_heights values control vertical title margins
#   rel_heights = c(0.1, 1)
# ) + theme_clean()
#   
# pg
# ggsave(pg, filename = "figures/SGC3A_OSPAN_Accuracy.png", width = 6, height =4)

```


### Describe
```{r}
#| label: DESC2-ACC

title = "Descriptive Statistics of Response Accuracy (Total % Correct)"
tbl1 <- mosaic::favstats(~task_percent, data = df_s) 
tbl1 %>% kbl (caption = title) %>% kable_classic()


title = "Descriptive Statistics of Response Accuracy (Total % Correct) BY CONDITION"
tbl2 <- mosaic::favstats(task_percent ~ pretty_condition, data = df_s) 
tbl2 %>% kbl (caption = title) %>% kable_classic()

title = "Descriptive Statistics of Response Accuracy (Total % Correct) BY OSPAN SPLIT"
tbl2 <- mosaic::favstats(task_percent ~ ospan_split, data = df_s) 
tbl2 %>% kbl (caption = title) %>% kable_classic()


title = "Descriptive Statistics of Response Accuracy (Total % Correct) BY OSPAN SPLIT & CONDITION"
tbl2 <- mosaic::favstats(task_percent ~ ospan_split+pretty_condition, data = df_s) 
tbl2 %>% kbl (caption = title) %>% kable_classic()


```

**REPORTED**

Across both conditions, overall accuracy on the task ranges from `r tbl1$min *100` to `r tbl1$max *100` with a mean of `r tbl1$mean * 100`. We see that the distribution of this outcome variable is clearly bimodal: with modes near the floor (0% correct) and ceiling (100% correct) of the scale. This bimodality is sensical considering the nature of the task, where each item in the task indexes a different information extraction operation over the same coordinate system.

Task level accuracy on the graph comprehension task follows the same pattern of behaviour observed in Study 3A: the distribution is bimodal. Total scores were higher in the impasse condition (M = 35\%, SD = 41\%, n = 65)  than control condition (M = 15\%, SD = 30\%, n = 68), implying a likely main effect of scaffold condition.  Comparing total scores across the median split on the OSPAN task (high working memory (vs) low working memory), we see readers with high working memory (M = 31 \%, SD = 41\%, n = 66) performed better than readers with low working memory (M = 19 \%, SD = 31\%, n = 67). In Figure \ref{fig_3C_ospan_raw_accuracy} we see that while readers in the impasse condition performed consistently better than those in the control condition, the effect is particularly pronounced for readers with high-working memory, implying a potential interaction between condition and working memory. 

#### WILCOXON RANK SUM (Mann-Whitney Test) 

-   **Non parametric alternative** to t-test; compares median rather than mean by ranking data
-   Does not assume normality
-   Does not assume equal variance of samples (homogeneity of variance)


##### Test

```{r}
#| label: TEST-ACC


#WILCOXON ON ACCURACY X OSPAN-SPLIT in LOW WORKING MEMORY
df_low <- df_s %>% filter(ospan_split == "low-memory")
(w <- wilcox.test(df_low$task_percent ~ df_low$pretty_condition,
                 paired = FALSE, alternative = "less")) #less, greater

#WILCOXON ON ACCURACY X OSPAN-SPLIT in HIGH
df_high <- df_s %>% filter(ospan_split == "high-memory")
(w <- wilcox.test(df_high$task_percent ~ df_high$pretty_condition,
                 paired = FALSE, alternative = "less")) #less, greater


grouped_ggbetweenstats( data = df_s, type = "nonparametric",
                        y = task_percent, x = pretty_condition, grouping.var = ospan_split)

grouped_ggbarstats( data = df_i, type = "nonparametric",
                        y = pretty_condition, x = accuracy, grouping.var = ospan_split)
                    

```


##### Inference — EFFECT

A Wilcoxon-Rank sum test on task accuracy x condition for the low-memory participants indicate that impasse is not significantly higher. A Wilcoxon rank sum test on task accuracy x condition for high-memory participants indicate that impasse IS higher. Taken together, this indiates there may be an interaction between working memory and condition. 

##### Visualize




#### MIXED LOGISTIC REGRESSION [IXN!!]

*Fit a mixed logistic regression (at the item level), predicting accuracy (absolute score) on all discriminating questions by condition; accounting for random effects of subject and item.*

_NOTE: that we take an opan_split on the data, but the same inference is valid on a mean-centered continuous OSPAN weighted score_

##### Fit Model

```{r}
#| label: MODEL-FIT-ACC

## 0 | SETUP
#confirm 13 items [all discriminating items]
nrow(df_i) / nrow(df_s) == 13
#confirm all factors 
is.factor(df_i$q) && is.factor(df_i$subject) && is.factor(df_i$pretty_condition) && is.factor(df_i$accuracy) && is.factor(df_i$ospan_split)


## 1 | SETUP RANDOM EFFECTS

#:: RANDOM INTERCEPT SUBJECT + ITEM
print("Subject Intercept + Item intercept random model")
mm.rSQ <- glmer(accuracy ~ (1|subject) + (1|q), data = df_i, family = "binomial")
#summary(mm.rSQ)

## 2 | ADD SIMPLE MAIN EFFECTS 

print("FIXED Condition + Subject & Item random intercepts")
mm.C.OrSQ <- glmer(accuracy ~ pretty_condition + ospan_split + (1|subject) + (1|q) ,
                data = df_i, family = "binomial")
#summary(mm.C.OrSQ)
# car::Anova(mm.C.OrSQ)


paste("FIXED EFFECTS better than random only?" )
test_lrt(mm.rSQ,mm.C.OrSQ) #same as anova(m0, m1, test = "Chi")


## 3 | ADD INTERACTION TERM
print("FIXED Condition * FIXED OSPAN + Subject & Item random intercepts")
mm.COrSQ <- glmer(accuracy ~ pretty_condition *ospan_split + (1|subject) + (1|q) ,
                data = df_i, family = "binomial")
# summary(mm.COrSQ)
# car::Anova(mm.COrSQ)

paste("INTERACTION model better than MAIN EFFECTS model?" )
test_lrt(mm.C.OrSQ,mm.COrSQ) #same as anova(m0, m1, test = "Chi")


paste("Model Performance")
performance(mm.COrSQ)
```

**REPORTED**

To explore the effect of working memory capacity on ACCURACY, we fit a mixed effects logistic regression model with random intercepts for subjects and questions, with CONDITION, WORKING MEMORY and their interaction term as fixed effects.  

A likelihood ratio test indicates that a model including the the interaction term explains significantly more variance in accuracy than a main-effects only model ($\chi^2 (5,6) = 5.04, p < 0.05$). The explanatory power of the entire model is substantial ($conditional \ R^2 = 0.92$) and the part related to the fixed effects CONDITION and WORKING MEMORY ($marginal \ R^2$) explains 18\% of variance. 


##### Describe

```{r}
#| label: MODEL-DESC-ACC

# best model
m <- mm.COrSQ
m %>% write_rds(file = "analysis/SGC3A/models/sgc3a_glmer_acc_mm.COrSQ_OSPAN.rds")

#::::::::: PRINT MODEL 

print("PREDICTOR MODEL")
summary(m)


print("SIGNIFICANCE TEST [non directional]")
car::Anova(m, type=3) #TYPE 3 SS FOR IXNS

#:::::::: INTERPRET COEFFICIENTS

paste("LOG ODDS")
# se <- sqrt(diag(stats::vcov(m)))
# (tab <- cbind(Est = fixef(m),
#               LL = fixef(m) - 1.96 * se,
#               UL = fixef(m) + 1.96 * se))
tidy(m,   conf.int = TRUE, conf.level = 0.95, conf.method = "Wald")

paste("ODDS RATIOS")
# (e <- exp(tab))
tidy(m,   conf.int = TRUE, conf.level = 0.95, conf.method = "Wald", exponentiate = TRUE)

paste("PROBABILITIES")

#sanity check
#probability control = plogis(intercept)
#probability impasse = plogis(intercept + coefficient)

#FROM predict()
# newdata <- df_i %>% dplyr::select(pretty_condition, subject, q)
# preds <- predict(m, newdata = newdata, type = "response")
# preds <- cbind(newdata, preds)
# p <- preds %>% 
#   dplyr::select(pretty_condition, preds) %>% 
#   group_by(pretty_condition) %>% 
#   summarise(
#     median = median(preds),
#     se = sd(preds)/sqrt(n()),
#     lwr = median - 1.96*se,
#     upr = median + 1.96*se)
    
  
#FROM merTools
newdata <- df_i %>% dplyr::select(pretty_condition, ospan_split, subject, q)
#make predictions
preds <- predictInterval(m, newdata = newdata,
                              which = "fixed", #full, fixed or random for those only
                              type = "probability", #linear.prediction
                              stat = "median",
                              n.sims = 1000,
                              level = 0.80) #width of prediction interval
#join predictions to the new dataframe
preds <- cbind(newdata, preds)
#summarize
(summ_preds <- preds %>% 
  dplyr::select(pretty_condition, ospan_split, fit, lwr, upr) %>% 
  group_by(pretty_condition, ospan_split) %>% 
  summarise(
    median = median(fit),
    lower = median(lwr),
    upper = median(upr)
  )) 




```

##### INFERENCE

**REPORTED**

Although Wald Chi-Square tests revealed no significant main effects, there was a significant interaction between CONDITION and OSPAN, ($\chi^2 (1) = 4.62, p < 0.05$).  [SEE POSTHOCS BELOW]

The model predicts that, in the control condition, the probability of a correct response for a participant with high vs. low working memory increases from (0.1 to 0.5%) a negligible difference. In the impasse condition, however, the probability of a correct response increases from only 1% for participants with low working memory, to 42% for participants with high working memory.  These results are consistent with the intuition we develop from Figure TODO. Participants with high working memory capacity are most able to take advantage of the impasse scaffold.

##### Interactions

```{r}

# https://cran.r-project.org/web/packages/emmeans/vignettes/interactions.html#simple
# https://stats.oarc.ucla.edu/stata/faq/how-can-i-understand-a-categorical-by-categorical-interaction-in-logistic-regression-stata-12/
# https://stats.oarc.ucla.edu/stata/seminars/deciphering-interactions-in-logistic-regression/
  
library(emmeans)

#sanity check reference grid
ref_grid(m)

#PRINT ESTIMATED MARGINAL MEANS
#should be same as summ_preds
emmeans(m,  ~ pretty_condition + ospan_split, type = "response")

##POST-HOC COMPARISONS
print("POSTHOC COMPARISONS")
emmeans(m,  pairwise ~ pretty_condition + ospan_split, 
        type = "response" , adjust = "none") #sidak, tukey




##PLOT INTERACTION
#equivalent to plot_model, type = "int"
emmip(m, ospan_split ~ pretty_condition ,
      type = "response",
      CIs = TRUE,
      linearg = list(linetype = "dashed"),
      engine = "ggplot")


##PLOT PROBABILITY
plot(ref_grid(m), by = "ospan_split", type = "response")

```
**REPORTED**

Posthoc paired comparisons reveal that there is not a significant difference in accuracy between the control and impasse condition for participants in the low-memory group (OR = 0.1, SE  = 0.15, z = -1.47, p = 0.46). 
For those with low working memory capacity, performance with comparably low, regardless of condition.  

For those who were assigned to the control condition, working memory capacity did not change performance. There was not significant difference in accuracy between participants with low vs. high working memory (OR = 1.95, SE= 2.80, z = 0.47  p = 0.97).  

For those assigned to the impasse condition, however, if you had high working memory capacity, you had significantly higher probability of accurate responses (OR = 0.02, SE = 0.03, z = -2.370  p = 0.0180).  

##### Print
```{r}
#| label: MODEL-TBL-ACC

#SJPLOT | MODEL | TABLE
# tab_model(m)

# #MODEL SUMMARY | save latex table

# models <- list("odds ratios" = m, "(log odds)" = m)
# title = "Study 3C (OSPAN) | Question Accuracy | Mixed Logistic Regression"
# notes = list("* p < 0.05, ** p < 0.01, *** p < 0.001",
#              paste("n = ",n_obs(m), "R^2(Conditional) =", round(r2(m)[[1]],2),
#                    "R^2(Marginal) =", round(r2(m)[[2]],2)),
#              "Accuracy  ~ Condition * OSPAN +  (1 | subject) + (1 | q)")
# 
# modelsummary(models,
#              exponentiate = c(TRUE, FALSE),
#              shape = term ~ model + statistic,
#              fmt = 2, #two digits w/ trailing zero
#              estimate  = "{estimate} {stars}",
#              statistic = "conf.int",
#              gof_map = c("AIC", "sigma"),
#              gof_omit = 'RMSE|ICC|BIC',
#              coef_rename = c("pretty_conditionimpasse" = "Condition[impasse]"),
#              title = title,
#              notes = notes,
#              output = "tables/SGC3C_OSPAN_GLMER_OverallAccuracy.tex")
#              # coef_omit = "Intercept",

# extract_eq(m, use_coefs = TRUE, wrap = TRUE)


```


##### Visualize

```{r}
#| label: MODEL-VIS-ACC

## | PLOT PARAMETERS 

#SJPLOT | MODEL | ODDS RATIO
plot_model(m, vline.color = "red", 
           show.intercept = TRUE, 
           show.values = TRUE,
           p.threshold = 0.1, #manually adjust to account for directional test
           ci.lvl = 0.90 ) + #manually adjusted for directional test   
  labs(title = "Model Estimate | Odds Ratio",
       subtitle = "",
       x = "Condition")


#EASYSTATS | MODEL | ODDS RATIO
# result <- model_parameters(m, exponentiate = TRUE, component = "all")
# plot(result)


## | PLOT TESTS

result <- equivalence_test(m, rule = "classic", ci=0.9) #classic[tost], , bayes
plot(result)


#ONLY FOR BAYESIAN VERSION
# result <- rope(m)
# plot(result)
# 
# result <- pd(m)
# plot(result)


## | PLOT PREDICTIONS

#SJPLOT | MODEL | PROBABILITIES
plot_model(m, type="int",
           show.intercept = TRUE,
           show.values = TRUE,
           title = "Model Prediction | Probability of Accurate Response",
           axis.title = c("Condition","Probability of Accurate Response"))

#PLOT MODEL PREDICTION
plot_model(m, type = "pred")  
plot_model(m, type = "eff")  
  # ylim(0,1) + 
  # labs(
  #   title = "Model Prediction | Probability of Accurate Response",
  #   subtitle = "Impasse increases Probability of Correct Response"
  # )


#GGDIST | MODEL | PREDICTED PROBABILITIES
preds %>% 
  ggplot(aes( x = fit, y = pretty_condition, fill = ospan_split)) + 
  stat_halfeye(alpha = 0.5, normalize = "panels") + 
  xlim(0,0.3) + theme_clean() + labs(
    title = "Model PREDICTION | Probability of Accurate Response",
    subtitle = "TODO check preds to see if fixed or includes random"
  )

```

```{r}
## PLOT INTERACTION
library(ggeffects)
g <- ggpredict(m, terms = c("pretty_condition","ospan_split")) %>% 
  plot(connect.lines = FALSE) + 
  scale_color_manual(values = fct_rev(paletteer::paletteer_d("nbapalettes::bulls")))+
  # scale_color_manual(values = paletteer::paletteer_d("awtools::gpalette",3))+
  # scale_color_manual(values = paletteer::paletteer_d("lisa::FridaKahlo", 3))+
  # scale_colour_manual(values = paletteer::paletteer_c("viridis::viridis", 2)) + 
  theme_clean() + labs(
  title = "MODEL | Predicted probability of correct response",
  x = "Condition"
) + theme(legend.position="bottom")
g
# ggsave(g, filename = "figures/SGC3A_OSPAN_accuracy_prediction.png", width = 6, height =4)

```

##### Diagnostics

```{r}
#| label: MODEL-DIAG-ACC
#| warning: false
#| message: false

# print("SANITY CHECK REPORTING")
# report(m)

# print("MODEL PERFORMANCE")
# performance(m)

print("DIAGNOSTICS")
check_model(m)

```

## OVERALL INTERPRETATION STATE


-   **"orthogonal"** \[reference category\] includes orthogonal and satisficing responses ==\> indicates a primarily *orthogonal* state of coordinate system understanding

-   **"other"** includes: blank, reference point, responses that can't be classified (including selecting all datapoints), =\> indicates an uncertain or unidentifiable state of coordinate system understanding, but one that is distinctly *not* orthogonal nor triangular

-   **"angular"** includes 'lines connecting' responses as well as responses that include both orthogonal *and* triangular answers =\> indicates some degree of angular/triangular coordinate understanding

-   **"triangular"** includes correct triangular =\> indicates a correct triangular coordinate understanding


#### Setup

```{r}
#| label: SETUP-STATE

df_i = df_items %>% filter(q %nin% c(6,9)) %>% dplyr::select(q,subject,state,pretty_condition, ospan_split) %>% droplevels()

```

#### Visualize

```{r}
#| warning: false
#| message: false

#:::::::: STACKED BAR CHART
df_i %>% 
  ggplot(data = .,
         mapping = aes(x = pretty_condition,
                       fill = state)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_manual(values = paletteer::paletteer_d("ggthemes::calc", 4))+
  facet_wrap(~ospan_split) +
   labs(title = "Interpretation across all Questions",
       x = "Condition",
       fill = "",
       subtitle="")


#:::::::: STACKED BAR CHART BY QUESTION
df_i %>% 
  ggplot(data = .,
         mapping = aes(x = pretty_condition,
                       fill = state)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_manual(values = paletteer::paletteer_d("ggthemes::calc", 4))+
  # scale_fill_brewer(palette = "Set1")  +
  facet_wrap(q ~ ospan_split) +
   labs(title = "Interpretation by Question",
       x = "Condition",
       fill = "",
       subtitle="")

```
```{r}

#:::::::: STACKED BAR CHART

p <- df_i %>% 
  ggplot(data = .,
         mapping = aes(x = pretty_condition,
                       fill = state)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_foxy(discrete = TRUE, "state")  +
  facet_wrap(~ospan_split) +
  labs(title = "DISTRIBUTION | Question Interpretation",
       x = "Condition", y = "Proportion of Questions",
       fill = "",
       subtitle="") + theme_clean()
p 
# ggsave(p, filename = "figures/SGC3A_OSPAN_interpretation.png", width = 6, height =4)

```


```{r}
#| warning: false
#| message: false

#:::::::: LABELLED 

temp <- df_i %>% mutate(
  state = fct_rev(state)
)

grouped_ggbarstats(data = temp, x = state, y = pretty_condition,
                          grouping.var = ospan_split,
               results.subtitle = FALSE,
               ggplot.component = ## modify further with `{ggplot2}` functions
                list(
                  scale_fill_manual(values = paletteer::paletteer_d("ggthemes::calc", 4))
                  # theme(axis.text.x = element_text(angle = 90)))
               ))


# # ggsave(p, filename = "figures/SGC3A_LAB_Accuracy.png", width = 6, height =4)


#:::::::: LABELLED 
# 
# temp <- df_i 
# # %>% mutate(
# #   accuracy = fct_rev(accuracy)
# # )
# 
# #CREATE PLOT WITH LABELS
# p <- grouped_ggbarstats(data = temp, x = state, y = pretty_condition,
#                grouping.var = ospan_split,
#                results.subtitle = FALSE,
#                ggplot.component = ## modify further with `{ggplot2}` functions
#                 list(
#                   scale_fill_manual(values = paletteer::paletteer_d("ggthemes::calc", 4))
#                   # theme(axis.text.x = element_text(angle = 90)))
#                )) 
# 
# #FIX LABELS
# p1 <- p[[1]] +  labs(
#   subtitle = "Impasse is particularly effective for subjects with high-working memory",
#     x = "Condition", y = "Probability of Response"
#   ) + theme_clean() + theme(legend.position = "blank") 
#  
# p2 <-   p[[2]] + labs(
#     x = "Condition", y = "Probability of Response",
#     subtitle = "   "
#   ) + theme_clean() + theme(legend.position = "blank") +
#   ggeasy::easy_remove_axes(which="y", what=c("text","title"))
#   # ggeasy::easy_remove_axes(which="y", what= ""))
# 
# #CREATE ROW
# 
# plot_row <- plot_grid(p1,p2, rel_widths = c(1,0.85))
# 
# title <- ggdraw() + 
#   draw_label(
#     "DISTRIBUTION | Question Accuracy",
#     fontface = 'bold',
#     x = 0,
#     hjust = 0
#   ) +
#   theme(
#     # add margin on the left of the drawing canvas,
#     # so title is aligned with left edge of first plot
#     plot.margin = margin(0, 0, 0, 7)
#   )
# 
# 
# pg <- plot_grid(
#   title,
#   plot_row,
#   ncol = 1,
#   # rel_heights values control vertical title margins
#   rel_heights = c(0.1, 1)
# ) + theme_clean()
#   
# 
# update_geom_defaults("text", list(colour = "grey20", family = theme_get()$text$family))
# 
# 
# pg


# ggsave(pg, filename = "figures/SGC3A_OSPAN_Accuracy.png", width = 6, height =4)


```

#### Describe
```{r}

#::::::::::::DESCRIPTIVES

table(df_i$state, df_i$pretty_condition) %>% addmargins(2) %>% #display sum for row
      prop.table(margin=2) %>%  #return proportion (of column)
      addmargins(1) #sanity check sum of columns


(t <- table(df_i$state, df_i$pretty_condition, df_i$ospan_split) %>% addmargins(2) %>% #display sum for row
      addmargins(1)) #sanity check sum of columns

```

#### MIXED MULTINOMIAL REGRESSION


*Does condition affect the response state of of items across the task?*

*Fit a MIXED logistic regression predicting interpretation state (k=3) by condition(k = 2).*

-   mblogit version wouldn't coverge, so using brms

##### Fit Model \[brms\]

```{r}
#| label: FIT-BRMS-STATE

inf_priors_condition <- c(
  #prior on INTERCEPTS 
  #25% chance of each answer in control, scale = from 0.01 to 62%
  prior(normal(-1.1, 1.5),  class = "Intercept", dpar = "muangular"),
  prior(normal(-1.1, 1.5),  class = "Intercept", dpar = "muother"),
  prior(normal(-1.1, 1.5),  class = "Intercept", dpar = "mutriangular"),
  #prior on COEFFICIENT
  #likely to change odds between 0 and 2.4
  prior(normal(0, 2.42), class = b, coef="pretty_conditionimpasse", dpar = "muangular"),
  prior(normal(0, 2.42), class = b, coef="pretty_conditionimpasse", dpar = "muother"),
  prior(normal(0, 2.42), class = b, coef="pretty_conditionimpasse", dpar = "mutriangular")
)

inf_priors_condition.ospan <- c(
  #prior on INTERCEPTS 
  #25% chance of each answer in control, scale = from 0.01 to 62%
  prior(normal(-1.1, 1.5),  class = "Intercept", dpar = "muangular"),
  prior(normal(-1.1, 1.5),  class = "Intercept", dpar = "muother"),
  prior(normal(-1.1, 1.5),  class = "Intercept", dpar = "mutriangular"),
  #prior on COEFFICIENT
  #likely to change odds between 0 and 2.4
  prior(normal(0, 2.42), class = b, coef="pretty_conditionimpasse", dpar = "muangular"),
  prior(normal(0, 2.42), class = b, coef="pretty_conditionimpasse", dpar = "muother"),
  prior(normal(0, 2.42), class = b, coef="pretty_conditionimpasse", dpar = "mutriangular"),
  #prior on OSPAN COEFFICIENT
  #likely to change odds between 0 and 2.4
  prior(normal(0, 2.42), class = b, coef="ospan_splithighMmemory", dpar = "muangular"),
  prior(normal(0, 2.42), class = b, coef="ospan_splithighMmemory", dpar = "muother"),
  prior(normal(0, 2.42), class = b, coef="ospan_splithighMmemory", dpar = "mutriangular")
)

inf_priors_ixn <- c(
  #prior on INTERCEPTS 
  #25% chance of each answer in control, scale = from 0.01 to 62%
  prior(normal(-1.1, 1.5),  class = "Intercept", dpar = "muangular"),
  prior(normal(-1.1, 1.5),  class = "Intercept", dpar = "muother"),
  prior(normal(-1.1, 1.5),  class = "Intercept", dpar = "mutriangular"),
  #prior on CONDITION COEFFICIENT
  #likely to change odds between 0 and 2.4
  prior(normal(0, 2.42), class = b, coef="pretty_conditionimpasse", dpar = "muangular"),
  prior(normal(0, 2.42), class = b, coef="pretty_conditionimpasse", dpar = "muother"),
  prior(normal(0, 2.42), class = b, coef="pretty_conditionimpasse", dpar = "mutriangular"),
  #prior on OSPAN COEFFICIENT
  #likely to change odds between 0 and 2.4
  prior(normal(0, 2.42), class = b, coef="ospan_splithighMmemory", dpar = "muangular"),
  prior(normal(0, 2.42), class = b, coef="ospan_splithighMmemory", dpar = "muother"),
  prior(normal(0, 2.42), class = b, coef="ospan_splithighMmemory", dpar = "mutriangular"),
  #prior on IXN COEFFICIENT
  #likely to change odds between 0 and 2.4
  prior(normal(0, 2.42), class = b, coef="pretty_conditionimpasse:ospan_splithighMmemory", dpar = "muangular"),
  prior(normal(0, 2.42), class = b, coef="pretty_conditionimpasse:ospan_splithighMmemory", dpar = "muother"),
  prior(normal(0, 2.42), class = b, coef="pretty_conditionimpasse:ospan_splithighMmemory", dpar = "mutriangular")
)

#BAYESIAN RANDOM ONLY
Bmm.cat.rSQ <- brm( state ~ 1 + (1|subject) + (1|q), 
                 data = df_i, 
                 family = "categorical",
                 chains = 4, iter = 2500, warmup = 1000,
                 cores = 4, seed = 1234,
                 save_pars = save_pars(all = TRUE),
                 # backend = "cmdstanr",
                 file ="analysis/SGC3A/models/sgc3a_brms_state_Bmm.cat.rSQ_OSPAN.rds")


# CONDITION ONLY MODEL
Bmm.cat.CrSQ <- brm( state ~ pretty_condition + (1|subject) + (1|q), 
                 data = df_i, 
                 prior = inf_priors_condition,
                 family = "categorical",
                 chains = 4, iter = 2000, warmup = 1000,
                 cores = 4, seed = 1234,
                 save_pars = save_pars(all = TRUE),
                 control = list(adapt_delta = 0.98),  # to deal with divergent transitions
                 backend = "cmdstanr",
                 file ="analysis/SGC3A/models/sgc3a_brms_state_Bmm.cat.CrSQ_OSPAN.rds")


##MODEL COMPARISON
# print("MODEL COMPARISON: random effects (vs) CONDITION")
# bayesfactor(Bmm.cat.rSQ, Bmm.cat.CrSQ)
#substantial evidence in favor of conditon model over random only BF 1.64e+16


# CONDITION + OSPAN MODEL
Bmm.cat.C.OrSQ <- brm( state ~ pretty_condition+ospan_split + (1|subject) + (1|q), 
                 data = df_i, 
                 prior = inf_priors_condition.ospan,
                 family = "categorical",
                 chains = 4, iter = 2500, warmup = 1000,
                 cores = 4, seed = 1234,
                 save_pars = save_pars(all = TRUE),
                 control = list(adapt_delta = 0.98),  # to deal with divergent transitions
                 backend = "cmdstanr",
                 file ="analysis/SGC3A/models/sgc3a_brms_state_Bmm.cat.C.OrSQ_OSPAN.rds")
# summary(Bmm.cat.C.OrSQ)
# describe_posterior(Bmm.cat.C.OrSQ)


# CONDITION * OSPAN MODEL
Bmm.cat.COrSQ <- brm( state ~ pretty_condition*ospan_split + (1|subject) + (1|q), 
                 data = df_i, 
                 prior = inf_priors_ixn,
                 family = "categorical",
                 chains = 4, iter = 2500, warmup = 1000,
                 cores = 4, seed = 1234,
                 save_pars = save_pars(all = TRUE),
                 control = list(adapt_delta = 0.98),  # to deal with divergent transitions
                 # backend = "cmdstanr",
                 file ="analysis/SGC3A/models/sgc3a_brms_state_Bmm.cat.COrSQ_OSPAN.rds")
# describe_posterior(Bmm.cat.COrSQ)


##MODEL COMPARISON
print("IS FACTORIAL better than MAIN EFFECTS model?")
(b <- bayesfactor(Bmm.cat.CrSQ, Bmm.cat.COrSQ))
compare_models(Bmm.cat.CrSQ, Bmm.cat.COrSQ)

```

**Reported** 

To quantify the effect of working memory capacity on INTERPRETATION, we fit a (bayesian) mixed multinomial regression model with random intercepts for subjects and questions. 

A Bayes Factor model comparison (against a random intercepts only model) indicates extreme evidence for the final model including fixed effects of CONDITION, OSPAN and their interaction term  (BF = 1.69e+13)

(note, the BF may change as it is estimated via simulation each time)

##### Describe

```{r}
#| label: DESC-BRMS-STATE

# best model
m <- Bmm.cat.COrSQ

#::::::::: PRINT MODEL 

print("PREDICTOR MODEL")
summary(m)
(d <- describe_posterior(ci=.95, m))

print("BAYES FACTOR [comparison to RANDOM ONLY model]")
#think of this like the anova(model) to get p values for each predictor
#has to recompile the models with rstan. total drag
#already calculated bayes factor above, this just interprets it
effectsize::interpret_bf(exp(b$log_BF), include_value = TRUE)

print("DESCRIBE POSTERIOR")

#:::::::: INTERPRET COEFFICIENTS

paste("LOG ODDS")
(l <- describe_posterior(m))
# (tm <- tidy(m,   conf.int = TRUE))

paste("ODDS RATIOS")
(e <- model_parameters(m, exponentiate = TRUE))

paste("PROBABILITIES")

#PREDICT METHOD
newdata <- df_i %>% dplyr::select(pretty_condition, ospan_split, subject, q)
preds <- predict(m, newdata = newdata, type = "response")
preds <- cbind(newdata, preds)
# lengthen data frame to handle multinomial
preds <- preds %>%
  dplyr::select(-subject, -q) %>% #marginalize over subject and q
  pivot_longer(
  cols = !pretty_condition & !ospan_split,
  values_to = "preds",
  names_to = "state",
)

(p <- preds %>%
  group_by(pretty_condition, ospan_split, state ) %>%
  summarise(
    median = median(preds),
    se = sd(preds)/sqrt(n()),
    lwr = median - 1.96*se,
    upr = median + 1.96*se))

##DRAWS METHOD
# GENERATE draws from model
# draws <- df_i %>%
#   data_grid(pretty_condition, subject, q) %>% 
#   add_fitted_draws(Bmm.cat.CrSQ,
#                    # n = 100,
#                    # dpar = TRUE,
#                    # transform = TRUE, #gives prob%, otherwise OR
#                    re_formula = NA)
# # draws %>% write_rds(file = "analysis/SGC3A/models/draws/draws_BB.catCrSQ.rds")
# 
# #OR load from file
# # draws <- read_rds(file = "analysis/SGC3A/models/draws/draws_BB.catCrSQ.rds")
# 
# # SUMMARIZE draws from model
# (k <- kable(draws %>%
#   dplyr::select(pretty_condition, .category, .value) %>%
#   group_by(pretty_condition, .category) %>%
#   median_hdci(.value), digits = 4, col.names =
#     c("Condition","Category", "Probability","Lower Cred.I","Upper Cred.I", "CI Width", "Point Type", "Interval Type")) %>%
#   kable_styling())



## USING MARGINALEFFECTS package
library(marginaleffects)


```

##### INFERENCE



##### Bayes Factor
- https://easystats.github.io/bayestestR/articles/bayes_factors.html

Compute bayes factor for model parameters

```{r}

#define null on the log odds scale as the range from -0.4 to 0.4, a 1.5X increase or decrease in odds 
(coef_bf <- bayesfactor(m, null = c(-0.4, 0.4)))

#plot bayes factors
plot(coef_bf)

#interpretation guidelines
effectsize::interpret_bf(exp(coef_bf$log_BF), include_value = TRUE)

```

**REPORTED**

The model predicts similar probabilities for orthogonal, other, and angular interpretations by high vs. low working memory participants. It is only the (correct) triangular interpretation in which we have evidence for a reliable interaction between OSPAN and CONDITION. 

It is only the (correct) triangular interpretation in which we have moderate evidence for a reliable interaction between OSPAN and CONDITION ($e^{\beta_{interaction}} = 15.73, \  95 \% \ CI \  [0.89, 249.91], \ pd = 97.3\%, BF = 3.86 $)

Much like the pattern of results for accuracy, it is high working memory participants with higher probability of triangular responses, but only in impasse condition. 

##### Interactions

```{r}

#EMMEANS doesn't support multinomial brms models. BUMMER
#BUT brms has some built in stuffs. 

# FOR MAIN EFFECTS PLOTS 
print("MAIN EFFECTS")
conditional_effects(m, categorical = TRUE)


print("INTERACTION PLOT")
conditions <- make_conditions(m, vars = c("ospan_split"))
conditional_effects(m, "pretty_condition", conditions = conditions,
                    categorical = TRUE)
                    

print("INTERACTION PLOT")
plot_model(m, type="int")

## MARGINAL EFFECTS

# from easystats 
# library(modelbased)
# uses emmeans, doesn't support brms categorical 
# estimate_contrasts(m, test = "bf", bf_prior = m)

# library(marginaleffects)
# https://vincentarelbundock.github.io/marginaleffects/articles/brms.html
## takes a really long time... maybe hangs machine??
(mfx <- marginaleffects::marginaleffects(m))
summary(mfx)

```



##### Print 
```{r}
#| label: MODEL-TBL-STATE

#SJPLOT | MODEL | TABLE
# tab_model(m)

# #MODEL SUMMARY | save latex table
#model summary doesn't work for brms multinomial

# DOESN'T WORK FOR BRMS
# extract_eq(m, use_coefs = TRUE, wrap = TRUE)
# 
# 
# #GET MODEL ESTIMATES
# t <- as.data.frame(model_parameters(m, exponentiate = TRUE))
# # 
# # #REFORMAT
# x <- t %>%
#   mutate(
#     Parameter = str_remove_all(Parameter,"_pretty"),
#     Parameter = str_remove_all(Parameter,"b_mu"),
#     Interpretation = word(Parameter, 1, sep = "_"),
#     Interpretation = fct_relevel(Interpretation, levels = c("other","angular","triangular")),
#     Factor = word(Parameter, 2, sep = "_"),
#     Factor = recode_factor(Factor,
#                          "Intercept" = "(Intercept)",
#                          "conditionimpasse" = "Condition[impasse]",
#                          "ospan" = "OSPAN[high-memory]",
#                          "conditionimpasse:ospan" = "Condition:OSPAN"),
#     Median = round(Median,2),
#     CI_low = round(CI_low,2),
#     CI_high = round(CI_high,2),
#     pd = round(pd,2),
#     ROPE_Percentage = round(ROPE_Percentage,2)) %>%
#   arrange(Interpretation) %>%
#   dplyr::select(-CI, -Rhat, -ESS) %>%
#   rename( "%_in_ROPE"="ROPE_Percentage",
#   "(Odds Ratio)" = "Median") %>%
#   dplyr::select(Interpretation, Factor, `(Odds Ratio)`, CI_low, CI_high, pd, `%_in_ROPE`)
# 
# # #KNIT
# title = "Study 3C (OSPAN) | Question Interpretation | Mixed Multinomial Regression"
# tab <- kbl(x, format = "latex", caption = title,
#            booktabs = FALSE) %>% kable_classic() %>%
# footnote(general = paste("Model Interpretation ~ ",b$Model[2], "Bayes Factor ", format( exp(b$log_BF[2]), digits =2 ) ), footnote_as_chunk = T, general_title = "")
# writeLines(tab, "tables/SGC3C_OSPAN_BRMS_state.tex")


```
##### Visualize



```{r}
## PLOT INTERACTION
library(ggeffects)
g <- ggpredict(m, terms = c("pretty_condition","ospan_split")) %>% 
  plot(connect.lines = FALSE) + 
  scale_color_manual(values = fct_rev(paletteer::paletteer_d("nbapalettes::bulls")))+
  # scale_color_manual(values = paletteer::paletteer_d("awtools::gpalette",3))+
  # scale_color_manual(values = paletteer::paletteer_d("lisa::FridaKahlo", 3))+
  # scale_colour_manual(values = paletteer::paletteer_c("viridis::viridis", 2)) + 
  theme_clean() + labs(
  title = "MODEL | Predicted probability of correct response",
  x = "Condition"
) + theme(legend.position="bottom")
g 
# ggsave(g, filename = "figures/SGC3A_OSPAN_interpretation_prediction.png", width = 6, height =4)
```

```{r}
#| label: VIS-BRMS-STATE


## | PLOT PARAMETERS 

#SJPLOT | MODEL | ODDS RATIO
# plot_model(m, vline.color = "red", 
#            show.intercept = TRUE, 
#            show.values = TRUE,
#            p.threshold = 0.1, #manually adjust to account for directional test
#            ci.lvl = 0.90 ) + #manually adjusted for directional test   
#   labs(title = "Model Estimate | Odds Ratio",
#        subtitle = "",
#        x = "Condition")


#EASYSTATS | MODEL | ODDS RATIO
result <- model_parameters(m, exponentiate = TRUE, component = "all")
plot(result, show_intercept = TRUE, show_labels = TRUE) 
# + theme_clean()

## | PLOT TESTS

result <- equivalence_test(m, rule = "classic", ci=0.9) #classic[tost], , bayes
plot(result)

result <- rope(m)
plot(result)

##TODO see documentation for removing, reorganizing parameters
result <- pd(m, effects = "fixed", component = "all")
plot(result, show_intercept = FALSE,
     n_columns = 3)


## | PLOT PREDICTIONS

#SJPLOT | MODEL | PROBABILITIES
plot_model(m, type="int",
           show.intercept = TRUE,
           show.values = TRUE,
           title = "Model Prediction | Probability of Accurate Response",
           axis.title = c("Condition","Probability of Accurate Response"))

#PLOT MODEL PREDICTION
# plot_model(m, type = "pred")  
# plot_model(m, type = "eff")  
  # ylim(0,1) + 
  # labs(
  #   title = "Model Prediction | Probability of Accurate Response",
  #   subtitle = "Impasse increases Probability of Correct Response"
  # )

```

```{r}
#::::: GGDIST POSTERIOR PROBABILITY OF RESPONSE
##WORKING
# https://mjskay.github.io/ggdist/reference/stat_slab.html
## VIS probability of correct response
#TAKES A REALLY LONG TIME

#1 | get draws
# draws <- df_i %>%
#   data_grid(pretty_condition, ospan_split, subject, q) %>%
#   add_epred_draws(m,
#                    # ndraws = 100, # n = 100,
#                    # dpar = TRUE,
#                    transform = TRUE, #gives prob%, otherwise OR
#                    re_formula = NA)


# draws %>% write_rds(file = "analysis/SGC3A/models/draws/draws_Bmm.catCOrSQ_OPSAN.rds")

#OR load from file
# draws <- read_rds(file = "analysis/SGC3A/models/draws/draws_Bmm.catCOrSQ_OPSAN.rds")

#2| VISUALIZE PREDICTIONS | GGDIST
##TODO figure out height normalization.
##do it with much smaller number of draws 
#TODO adjust bandwidth/smoothing? + put on same line + 
#TAKES A REAAALY LONG TIME
# d <- 

# d <- draws %>% sample_n(10) %>% 
#   ggplot(aes(x = .epred,  y = pretty_condition, fill = ospan_split)) +
#   stat_slab(width = c(.95), alpha = 0.5, normalize="xy") +
#   facet_wrap(~.category) +
#   #   #normalize = all, panels, xy, groups, none
#   xlim(0,1) + labs(
#     title = "Model Predicted Probability of Correct Response",
#     x = "probability of correct response",
#     y = "Interpretation"
#   ) +  theme_clean() #+ ggeasy::easy_remove_legend() + ggeasy::easy_remove_y_axis()
# # #TO PLOT ON THE SAME LINE, INCLUDE Y = 0 in aes and ggeasy::remove_y_axis()
# # 
# # ggsave(d, filename = "figures/sgc3a_BBm.cat.CrSQ_lab_posterior.svg", width = 6, height =4)
d
```

```{r}
###VISUALIZE
#make predictions
pred <- predictions(m)

#get draws
draws <- posteriordraws(pred)

#plot draws

##PLOT ANGULAR
ggplot(draws %>% sample_n(1000), aes(x = draw, fill = group)) +
    geom_density(alpha = 0.8, color = "white", trim = TRUE) +
    facet_grid(ospan_split ~ pretty_condition) +
    labs(x = "Predicted probability",
         y = "Density",
         fill = "INTERPRETATION")


## AS DENSITY RIDGES
ggplot(draws %>% sample(100000), aes(x = draw, y = pretty_condition, fill = ospan_split)) +
    geom_density_ridges(alpha = 0.5, rel_min_height = 0.01) +
    facet_grid(group ~ .) +
    labs(x = "Predicted probability",
         y = "Density")


```


##### Diagnostics

```{r}

#CHECK Fit of posterior predictive to data
pp_check(m, ndraws=1000)

#CHECK posterior vs. priors
result <- estimate_density(m)
plot(result, stack = FALSE, priors= TRUE)

#CHECK model
plot(m)

```


## CUMULATIVE PROGRESS 

```{r}

#SETUP
df_scaled <- read_csv('analysis/SGC3A/data/2-scored-data/sgc3a_scaled_progress_OSPAN.csv')
df_absolute <- read_csv('analysis/SGC3A/data/2-scored-data/sgc3a_absolute_progress_OSPAN.csv')

## JOIN OSPAN score to progress data 

#get ospan scores
temp_ospans <- df_subjects %>% dplyr::select(subject,
  OSPAN.weighted, ospan_split) 

#MERGE into progress 
df_scaled <- merge(df_scaled, temp_ospans, by="subject")
df_absolute <- merge(df_absolute, temp_ospans, by="subject")


```

### Visualize Progress over Task
```{r}

#VISUALIZE progress over time SCALED score 
ggplot(data = df_scaled, aes(x = question, y = score, group = subject, alpha = 0.01, color = pretty_condition)) + 
 geom_line(position=position_jitter(w=0.10, h=0.0), size=1) +
 # geom_line( size=1) +
 facet_wrap(ospan_split ~ pretty_condition) + 
 labs (title = "Cumulative Scaled Score over sequence of task", x = "Question" , y = "Cumulative Scaled Score") + 
 scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9,10,11,12,13)) +
 # scale_y_continuous(lim=c(-13,13))+
 theme_minimal() + theme(legend.position = "blank")



#VISUALIZE progress over time SCALED score 
ggplot(data = df_absolute, aes(x = question, y = score, group = subject, alpha = 0.1, color = pretty_condition)) + 
 # geom_line(position=position_jitter(w=0.15, h=0.15), size=0.5) +
 geom_line(position=position_jitter(w=0.15, h=0.15), size=1.5) +
 # geom_line( size=1) +
 facet_wrap(ospan_split ~ pretty_condition) + 
 labs (title = "Cumulative Scaled Score over sequence of task", x = "Question" , y = "Cumulative Scaled Score") + 
 scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9,10,11,12,13)) +
 # scale_y_continuous(lim=c(0,13))+
 theme_minimal() + theme(legend.position = "blank")

```


## Q1 ACCURACY



#### Setup
```{r}
#| label: SETUP-Q1ACC

df <- df_items %>% filter(q==1) %>% dplyr::select(accuracy, pretty_condition, ospan_split)

```

#### Describe 
```{r}
#| label: VIS-Q1ACC

#:::::::: STACKED BAR CHART
df %>% 
  ggplot(data = .,
         mapping = aes(x = pretty_condition,
                       fill = accuracy)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_brewer(palette = "Set1")  +
  facet_wrap(~ospan_split) +
   labs(#y = "Correct Response on Q 1",
       title = "Q1 Accuracy",
       x = "Condition",
       fill = "",
       subtitle="Impasse Condition yields a greater proportion of correct responses")

```


```{r}
#| label: DESC-Q1ACC

#::::::::::::DESCRIPTIVES

paste("Proportions of Correct Responses by Condition")
table(df$accuracy, df$pretty_condition) %>% addmargins(2) %>% #display sum for row
      prop.table(margin=2) %>%  #return proportion (of column)
      addmargins(1) #sanity check sum of columns

paste("Number of Correct Responses by Condition")
table(df$accuracy, df$pretty_condition, df$ospan_split) %>% addmargins(2) %>% #display sum for row
      addmargins(1) %>% prop.table() #sanity check sum of columns
```

#### CHI SQUARE [YES]

```{r}
#| label: TESTS-Q1ACC

#CHI SQUARE ON ACCURACY X OSPAN-SPLIT in LOW WORKING MEMORY
df_low <- df %>% filter(ospan_split == "low-memory")
# table(df_low$pretty_condition, df_low$accuracy)
chisq.test( x = df_low$pretty_condition, y = df_low$accuracy, correct = TRUE)

#CHI SQUARE ON ACCURACY X OSPAN-SPLIT in HIGH WORKING MEMORY
df_high <- df %>% filter(ospan_split == "high-memory")
#table(df_high$pretty_condition, df_high$accuracy)
chisq.test( x = df_high$pretty_condition, y = df_high$accuracy,correct = TRUE)
#significant if correct = FALSE
```
TODO why do these chisqrs not match the grouped bar stats?
```{r}

# INTERACTION (OSPAN X CONDITION)
grouped_ggbarstats( data = df, x = accuracy, y = pretty_condition, 
                    grouping.var = ospan_split,
                    type = "nonparametric")

# MAIN EFFECT CONDITION (yes)
# ggbarstats( data = df, x = accuracy, y = pretty_condition, 
#                     type = "nonparametric")

# MAIN EFFECT OSPAN (none)
# ggbarstats( data = df, x = accuracy, y = ospan_split, 
#                     type = "nonparametric")

```


There is no non-parametric version of two-way ANOVA, so we perform individual CHI-SQR tests. We split the data into two groups (low memory, and high memory, based on the median split). For each, we run a CHI SQR test of independence testing the null hypothesis that Q1 ACCURACY is independent of CONDITION.  In the low-working memory group, we cannot reject the null hypothesis, suggesting that accuracy does not differ by condition. But in the HIGH working memory group we do reject the null hypothesis.  The proportion of correct responses in IMPASSE is much higher than in CONTROL, but only in the HIGH WORKING MEMORY group. 


#### LOGISTIC REGRESSION (MAIN EFFECT CONDITION)

TODO:: consider weighted(centered) continuous vs ospan split

Fit a logistic regression predicting accuracy (absolute score) (n = `r nrow(df)`) by condition (k = 2).\

-   Parameter estimate: $\beta_{0}$ = Log Odds of (correct) responses in CONTROL condition
-   $e^{\beta_{0}}$ = ODDS of correct response in CONTROL condition
-   Parameter estimate: $\beta_{1}$ = $\beta_{1impasse}$ Log Odds (Log OR; change in odds for correct response in impasse (vs) control \[log scale\])
-   $e^{\beta_{1}}$ = ODDS RATIO of correct response in IMPASSE (vs) CONTROL
-   **Null hypothesis**:$\beta_{impasse} \le 0$ the odds for a correct response does not change, or decreases
-   **Alternative hypothesis:** $\beta_{impasse} \gt 0$ the odds of a correct response increases

##### Fit CONDITION Model

*First, we fit a logistic regression with condition as predictor, and compare its fit to an empty (intercept-only) model.*

```{r}
#| label: FIT-MODEL-Q1ACC
#| warning: false
#| message: false

# MODEL FITTING ::::::::

#: 1 EMPTY MODEL baseline glm model intercept only
m.0 = glm(accuracy ~ 1, data = df, family = "binomial")
# print("EMPTY MODEL")
# summary(m0)

#: 2 CONDITION model
m.C <- glm( accuracy ~ pretty_condition, data = df, family = "binomial")
# print("PREDICTOR MODEL")
# summary(m1)

#: 2 TEST SUPERIOR FIT
paste("AIC wth predictor is lower than empty model?", m.0$aic > m.C$aic)
test_lrt(m.0,m.C) #same as anova(m0, m1, test = "Chi")
paste("Likelihood Ratio test is significant? p = ",(test_lrt(m.0,m.C))$p[2])

summary(m.C)


##### Fit OSPAN Models

#: 3 OSPAN ONLY MODEL 
m.O = glm(accuracy ~ ospan_split, data = df, family = "binomial")
# print("EMPTY MODEL")
# summary(m0)

#: 3 TEST SUPERIOR FIT
paste("AIC OSPAN predictor is lower than CONDITION model?", m.C$aic > m.O$aic)


#: 4 OSPAN + CONDITION model
m.CO <- glm( accuracy ~ pretty_condition + ospan_split, data = df, family = "binomial")
# print("PREDICTOR MODEL")
summary(m.CO)
car::Anova(m.CO, type=3)

#: 4 TEST SUPERIOR FIT
paste("AIC wth OSPAN is lower than CONDITION only model?", m.C$aic > m.CO$aic)
test_lrt(m.C,m.CO) #same as anova(m0, m1, test = "Chi")
paste("Likelihood Ratio test is significant? p = ",(test_lrt(m.C,m.CO))$p[2])


##Adding OSPAN as a predictor (no interaction) decreases AIC, but does not improve fit (LRT)


#: 5 OSPAN + CONDITION INTERACTION model
m.C.O <- glm( accuracy ~ pretty_condition * ospan_split, data = df, family = "binomial")
# print("PREDICTOR MODEL")
# summary(m.C.O)
# car::Anova(m.C.O, type =3)

#: 5 TEST SUPERIOR FIT
paste("AIC wth OSPAN IXN lower than CONDITION + OSPAN only model?", m.CO$aic > m.C.O$aic)
test_lrt(m.CO,m.C.O) 


paste("AIC wth OSPAN IXN is lower than CONDITION only model?", m.C$aic > m.C.O$aic)
test_lrt(m.C,m.C.O) 
```

**Adding OSPAN interaction does not improve model fit over condition-only model, or main effects only model.**

##### Describe

```{r}
#| label: DESC-MODEL-Q1ACC

#set model
m <- m.C.O

# DESCRIBE MODEL ::::::::::::::::::::::::::::::::::::: 

print("PREDICTOR MODEL [default two-tailed sig test]")
summary(m)

print("SIGNIFIGANCE TEST")
car::Anova(m, type=3)

# MANUAL ONE-SIDED SIGTEST ::::::::::::::::::::::::::: 

# one-sided (right tail) z test for B COEFFICIENT
#https://stats.stackexchange.com/questions/330655/strategy-for-a-one-sided-test-of-glms-coefficients

#SANITY CHECK 2-tailed test should match the model output
# tt <- 2*pnorm(summary(m)$coefficients[2:4], lower.tail = F)
# paste("p value for two-tailed test, null B = 0 : ",round(tt,3))
# ot <- pnorm(summary(m)$coefficients[2:4], lower.tail = F)
# paste("BUT we want a one tailed directional, null: B <= 0: ",round(ot,3))
# paste("adjusted confint for directional hypothesis")
# (dcint <- confint(m, level = 0.90)) # get 90% for right side))
# # https://stats.stackexchange.com/questions/20734/is-a-1-sided-90-prediction-interval-equivalent-to-a-2-sided-95-prediction-inte

#:::::::: INTERPRET COEFFICIENTS

# print("Confidence Interval —- LOG ODDS")
# confint(m1) #not adjusted for 1-tailed
print("Coefficients —- ODDS RATIOS")
(e <- cbind( exp(coef(m)), exp(confint(m)))) #exponentiated, not adjusted
# (e <- cbind( exp(coef(m)), exp(dcint))) #exponentiated, adjusted

#TODO INTERACTIONS & ESTIMATED MARGINAL MEANS 
# print("MODEL PREDICTIONS")
# Retrieve predictions as probabilities 
# (for each level of the predictor)
# pred.control <- predict(m,data.frame(pretty_condition="control"),type="response")
#this should match : plogis(intercept coefficient)
# paste("Probability of success in control,", pred.control)
# pred.impasse <- predict(m,data.frame(pretty_condition="impasse"),type="response")
#this should match : plogis(intercept coefficient + predictor coeff)
# paste("Probability of success in impasse,", pred.impasse)
```

##### Inference

TODO double check chisqrs vs grouped_barstats. Why is the tests not the same. Otherwise report mm.C as ospan didn't improve fit

##### Visualize

```{r}
#| label: MODEL-VIS-Q1ACC
#| message: false
#| warning : false


## | PLOT PARAMETERS 

#SJPLOT | MODEL | ODDS RATIO
plot_model(m, vline.color = "red", 
           show.intercept = TRUE, 
           show.values = TRUE,
           p.threshold = 0.1, #manually adjust to account for directional test
           ci.lvl = 0.90 ) + #manually adjusted for directional test   
  labs(title = "Model Estimate | Odds Ratio",
       subtitle = "",
       x = "Condition")


#EASYSTATS | MODEL | ODDS RATIO
# result <- model_parameters(m, exponentiate = TRUE, component = "all")
# plot(result)



## | PLOT TESTS
result <- equivalence_test(m, rule = "classic", ci=0.9) #classic[tost], , bayes
plot(result)

#ONLY FOR BAYESIAN VERSION
# result <- rope(m)
# plot(result)
# 
# result <- pd(m)
# plot(result)


## | PLOT PREDICTIONS

#SJPLOT | MODEL | PROBABILITIES
plot_model(m, type="int",
           show.intercept = TRUE,
           show.values = TRUE,
           title = "Model Prediction | Probability of Accurate Response",
           axis.title = c("Condition","Probability of Accurate Response"))

#PLOT MODEL PREDICTION
plot_model(m, type = "pred")  
plot_model(m, type = "eff")  
  # ylim(0,1) + 
  # labs(
  #   title = "Model Prediction | Probability of Accurate Response",
  #   subtitle = "Impasse increases Probability of Correct Response"
  # )


```

```{r}
#| label: TBL-MODEL-Q1ACC

#SJPLOT | MODEL | TABLE
tab_model(m)

# #MODEL SUMMARY | save latex table
# models <- list("odds ratios" = m1, "(log odds)" = m1)
# notes = list("* p < 0.05, ** p < 0.01, *** p < 0.001",
#              '$sigma^{2}$ = 3.29" N(subject) = 126 $\tau_{00}$(subject) = 22.22 N(question) = 13 $\tau_{00}$(question) = 0.31'
#                )
# 
# modelsummary(models,
#              exponentiate = c(TRUE, FALSE),
#              shape = term ~ model + statistic,
#              fmt = 2, #two digits w/ trailing zero
#              estimate  = "{estimate} {stars}",
#              statistic = "conf.int",
#              gof_map = c("AIC", "sigma"),
#              gof_omit = 'RMSE|ICC|BIC',
#              coef_rename = c("pretty_conditionimpasse" = "Condition[impasse]"),
#              title = 'Accuracy ~ Condition (Mixed Logistic Regression)', 
#              notes = notes,
#              output = "analysis/SGC3A/models/tables/GLMER_OverallAccuracy_lab.tex")
# #              # coef_omit = "Intercept",

```

##### Diagnostics

```{r}
#| label: DIAG-MODEL-Q1ACC
#| message: false
#| warning: false

# print("SANITY CHECK REPORTING")
# report::report(m)

#print("MODEL PERFORMANCE")
# performance(m)

print("MODEL DIAGNOSTICS")
check_model(m)
```


## Q1 INTERPRETATION STATE

**Do Ss in the IMPASSE condition offer less-orthogonal interpretations on first question?**

While absolute accuracy score tells us whether a participant successfully interpreted the coordinate system, it doesn't allow us to differentiate between different kinds of incorrect interpretations. Here we examine the (categorical) interpretation state type based on the nature of subject's response, and determine if these interpretations differ by experimental condition. State is a 3-category derived response variable that groups the following interpretations:

-   **"orthogonal"** \[reference category\] includes orthogonal and satisficing responses ==\> indicates a primarily *orthogonal* state of coordinate system understanding

-   **"other"** includes: blank, reference point, responses that can't be classified (including selecting all datapoints), =\> indicates an uncertain or unidentifiable state of coordinate system understanding, but one that is distinctly *not* orthogonal nor triangular

-   **"angular"** includes 'lines connecting' responses as well as responses that include both orthogonal *and* triangular answers =\> indicates some degree of angular/triangular coordinate understanding

-   **"triangular"** includes correct triangular and 'lines connecting' responses as well as responses that include both orthogonal *and* triangular answers =\> indicates some degree of angular/triangular coordinate understanding

+-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Research Question     | Does Ss in the impasse condition produce less orthogonal responses on the first question?                                                                                                                                                                                                                                                                 |
+=======================+===========================================================================================================================================================================================================================================================================================================================================================+
| **Hypothesis**        | H1A \| Ss in the IMPASSE condition will have a higher likelihood of producing unknown and and triangle-like response states, relative to orthogonal response states, on the first question                                                                                                                                                                |
+-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Data**              | -   data: `df_items` where `q == 1`                                                                                                                                                                                                                                                                                                                       |
|                       | -   outcome: `state` ( 4 level factor from 5 level high_interpretation )                                                                                                                                                                                                                                                                                  |
|                       | -   predictor: `condition` \[between-subjects factor\]                                                                                                                                                                                                                                                                                                    |
+-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Analysis Strategy** | 1.  Multinomial (Logistic) Regression on state predicted by condition                                                                                                                                                                                                                                                                                     |
|                       |                                                                                                                                                                                                                                                                                                                                                           |
|                       | Alternative:                                                                                                                                                                                                                                                                                                                                              |
|                       |                                                                                                                                                                                                                                                                                                                                                           |
|                       | -   Ordinal regression on state; but model doesn't satisfy proportional odds assumption (parallel slopes)                                                                                                                                                                                                                                                 |
|                       | -   Multinomial or Ordinal regression on high_interpretation (5 category interpretation state which distinguishes between uncertain (blank, reference) unclassifiable, triangle-like and true triangular.) There are some cells with zeros, however (no uncertain responses in control) which means the model can't accurately estimate those comparisons |
+-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

#### Setup 
```{r}
#| label: SETUP-Q1-STATE

df <- df_items %>% filter(q==1) %>% 
  dplyr::select(pretty_condition, ospan_split, state)

```


#### Describe 
```{r}
#| label: VIS-Q1STATE

#:::::::: STACKED BAR CHART
df %>% 
  ggplot(data = .,
         mapping = aes(x = pretty_condition,
                       fill = state)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_brewer(palette = "Set1")  +
  facet_wrap(~ospan_split) +
   labs(#y = "Correct Response on Q 1",
       title = "Q1 Interpretation",
       x = "Condition",
       fill = "",
       subtitle="")

```


```{r}
#| label: DESC-Q1STATE

#::::::::::::DESCRIPTIVES

table(df$state, df$pretty_condition) %>% addmargins(2) %>% #display sum for row
      prop.table(margin=2) %>%  #return proportion (of column)
      addmargins(1) #sanity check sum of columns


(t <- table(df$state, df$pretty_condition, df$ospan_split) %>% addmargins(2) %>% #display sum for row
      addmargins(1)) #sanity check sum of columns

```

#### MULTINOMIAL REGRESSION

TODO:: USE MBLOGIT VERSION WITH P VALUES IN MODEL

*Does condition affect the response state of Q1?*

*Fit a logistic regression predicting interpretation state (k=3) by condition(k = 2).*

-   3 equations will be estimated (# categories - 1); each representing the odds of answering in that particular interpretation (vs) the reference category (orthogonal answer) \[essentially a series of binary logistic regressions, but instead of incorrect/correct, comparing \[reference category\] vs \[this category\])

-   For *each* equation:

    -   $\beta_{0}$ *= Log Odds of \[this category type vs. reference category type) response in CONTROL condition*
    -   $e^{\beta_{0}}$ *= ODDS of \[this category type vs. reference category type\] response in CONTROL condition*
    -   $\beta_{1}$ *=* $\beta_{1impasse}$ *Log Odds (Log OR; change in odds for \[this category\] type response in impasse (vs) control \[log scale\])*
    -   $e^{\beta_{1}}$ *= ODDS RATIO of \[this. vs reference category type\] response in IMPASSE (vs) CONTROL*
    -   Two-tailed NHST *Null hypothesis:* $\beta_{impasse} = 0$ *the odds for \[this category of response vs. reference\] are not different for IMPASSE condition*
    -   *Alternative hypothesis:* $\beta_{impasse} \ne 0$ *the odds of \[this category of response vs. reference\] increases or decreases for IMPASSE condition*

##### Fit CONDITION Model

```{r}
#| label: FIT-Q1-INTERPRETATION

#check reference level 
print("Categories (first is reference)")
levels(df$state)

#FIT EMPTY MODEL
# print("EMPTY MODEL")
catm.0 <- multinom(state ~ 1, data = df)
# summary(catm.0)

#FIT PREDICTOR MODEL
# print("PREDICTOR MODEL")
catm.C <- multinom(formula = state ~ pretty_condition, data = df, model = TRUE)
# summary(catm.C)

#COMPARE MODEL FIT
paste("AIC wth predictor is lower than empty model?", catm.0$AIC > catm.C$AIC)
test_lrt(catm.0, catm.C)

##compare bayesian version
#library(brms)
# b.cat <- brm( state2 ~ pretty_condition, data = df, family = "categorical", backend = "cmdstanr")
# summary(b.cat)
# plot_model(b.cat)
# report(b.cat)
# coefficient estimates are very simliar to catm. super cool!

##compare mclogit version
#"baseline-category logit model
# https://www.elff.eu/software/mclogit/manual/mblogit/
# blm1 <- mblogit(state2 ~ pretty_condition , data = df)
# summary(blm1)
#identical to catm. super cool!

```

*AIC in predictor model is less than empty model, and likelihood ratio test indicates predictor model is significantly better fit to the sample data than the empty (intercept only) model.*

##### Fit OSPAN Model

```{r}

#FIT OSPAN only MODEL
# print("OSPAN ONLY MODEL")
catm.O <- multinom(state ~ ospan_split, data = df)
# summary(catm.O) 
# car::Anova(catm.O) 
print("OSPAN ONLY better than empty?")
test_lrt(catm.0, catm.O)


#FIT OSPAN + CONDITION
# print("OSPAN + CONDITION MODEL")
catm.CO <- multinom(formula = state ~ pretty_condition + ospan_split, data = df, model = TRUE)
# summary(catm.CO)
car::Anova(catm.CO) #MainEff condition, marginal ospan

#COMPARE MODEL FIT
paste("Adding OSPAN to CONDITION lowers AIC?", catm.C$AIC > catm.CO$AIC)
test_lrt(catm.C, catm.CO)

```
_Adding (main effect) predictor of OSPAN decreases AIC and is a marginally better fit. In this model, there is still only a main effect of condition. OSPAN is not a significant main effect._

```{r}

#FIT OSPAN * CONDITION
# print("OSPAN * CONDITION MODEL")
catm.C.O <- multinom(formula = state ~ pretty_condition * ospan_split, data = df, model = TRUE)
car::Anova(catm.C.O, type = 3)
# summary(catm.C.O)
# car::Anova(catm.C.O) #MainEff condition, marginal ospan
#COMPARE MODEL FIT
paste("Adding INTERACTION lowers AIC?", catm.CO$AIC > catm.C.O$AIC)
test_lrt(catm.CO, catm.C.O)

```
_Adding interaction of OSPAN does not improve fit and does not lower AIC. In the IXN model, only the main effect of condition is significant._

```{r}
##compare bayesian version
# library(brms)
# b.cat <- brm( state ~ pretty_condition*ospan_split, data = df, family = "categorical", backend = "cmdstanr")
# summary(b.cat)
# plot_model(b.cat) 
# plot(equivalence_test(b.cat))
# plot(rope(b.cat))
# report(b.cat)
# coefficient estimates are very simliar to catm. super cool!

##compare mclogit version
#"baseline-category logit model
# https://www.elff.eu/software/mclogit/manual/mblogit/
blm1 <- mblogit(state ~ pretty_condition *ospan_split , data = df)
summary(blm1)
# car::Anova(blm1) #todo need to separate by individual equation
#identical to catm. super cool!

```

*AIC in predictor model is less than empty model, and likelihood ratio test indicates predictor model is significantly better fit to the sample data than the empty (intercept only) model.*



##### Describe

```{r}
#| label: DESC-Q1-INTERPRETATION

#set model
m <- catm.C.O

#::::::::INTERPRETATION
paste("MODEL SUMMARY")
summary(m)
car::Anova(m, type =3) #always type 3 for ixns 

# calculate z-statistics of coefficients
z_stats <- summary(m)$coefficients/summary(m)$standard.errors
# convert to p-values
p_values <- (1 - pnorm(abs(z_stats)))*2
# display p-values in transposed data frame
(p_values <- data.frame(p = (p_values)))
# display odds ratios in transposed data frame

paste("ODDS RATIOS")
odds_ratios <- data.frame(OR = exp(summary(m)$coefficients))
options(scipen = 2)
(results <- cbind(odds_ratios, p_values))
```

##### Inference 

looking at detailed p values 


... 
OTHER: only main effect of condition 
TRI-LIKE: no effects
TRI: IXN condition * impasse


TODO

-   Being in the IMPASSE condition *increases* the odds of giving an unknown (potentially nonsense) or blank/uncertain response rather than an orthogonal (or satisficing) response by a factor of 45 (z = 3.81, p \< 0.001) . **Participants in the impasse condition were 45x as likely to give an unknown/uncertain response rather than an orthogonal response compared to participants in control**.

-   Being in the IMPASSE condition *increases* the odds of giving 'triangle-like' response rather than an orthogonal (or satisficing) response by a factor of 17.5 (z = 2.60, p \< 0.001 ). **Participants in the impasse condition were almost 6x as likely to give an a triangular response rather than an orthogonal response compared to participants in control**.


-   Being in the IMPASSE condition *increases* the odds of giving 'triangle-like' response rather than an orthogonal (or satisficing) response by a factor of 4.8 (z = 3.30, p \< 0.001 ). **Participants in the impasse condition were almost 6x as likely to give an a triangular response rather than an orthogonal response compared to participants in control**.


-   As with the (binary) logistic regression on accuracy \~ condition, significant model intercepts indicate that the odds of being in any particular response state (vs) orthogonal are significantly different than 1 *in the control condition.* (i.e. not 1:1 odds or 50% chance of being in that response state. Orthogonal is a much more probable response state in control)

-   \[need to to double check interpretation, but I *think* that the OR intercepts converted to probabilities equate to the marginal probability of being in each state in the control condition. which makes sense. I think.?\]

-   IF I change reference category for condition... then the intercepts should no longer be significant. The b1 coefficients should still be significant, but with changed sign (much less likely) \[Yup! this works!\]

##### Visualize

```{r}
#| label: VIS-Q1INTERPRETATION-LAB

#:::::::: PLOT

#SJPLOT | MODEL | ODDS RATIO
#library(sjPlot)
plot_model(m, type = "est",
           vline.color = "red", 
           show.intercept = TRUE, 
           show.values = TRUE,
           p.threshold = 0.1, #manually adjust to account for directional test
           ci.lvl = 0.90 ) +  #manually adjusted for directional test   
  # scale_y_continuous() + #remove to put on log scale x axis 
  # scale_x_discrete(labels=c("control","impasse"))+
  labs(title = "MODEL ESTIMATE  | Q1 Accuracy ~ condition",
       subtitle = "Impasse increases odds of correct response on Q1",
       x = "Condition") + theme_clean()

  
#SJPLOT | MODEL | PROBABILITIES
plot_model(m, type = "int", ci.lvl = 0.95) 
plot_model(m, type="eff", ci.lvl = 0.95) 
# +  ylim(0,1) +
#   labs(title = "MODEL PREDICTION  | Q1 State ~ condition",
#        subtitle = "Impasse increases probability of more accurate response states Q1",
#        x = "Condition") + theme_clean()

#TODO ESTIMAED MARGINALS AND IXN PLOTS 
# https://cran.r-project.org/web/packages/emmeans/vignettes/comparisons.html


```

```{r}

#SJPLOT | MODEL | TABLE
tab_model(m)

# #MODEL SUMMARY | save latex table
# models <- list("odds ratios" = m1, "(log odds)" = m1)
# notes = list("* p < 0.05, ** p < 0.01, *** p < 0.001",
#              '$sigma^{2}$ = 3.29" N(subject) = 126 $\tau_{00}$(subject) = 22.22 N(question) = 13 $\tau_{00}$(question) = 0.31'
#                )
# 
# modelsummary(models,
#              exponentiate = c(TRUE, FALSE),
#              shape = term ~ model + statistic,
#              fmt = 2, #two digits w/ trailing zero
#              estimate  = "{estimate} {stars}",
#              statistic = "conf.int",
#              gof_map = c("AIC", "sigma"),
#              gof_omit = 'RMSE|ICC|BIC',
#              coef_rename = c("pretty_conditionimpasse" = "Condition[impasse]"),
#              title = 'Accuracy ~ Condition (Mixed Logistic Regression)', 
#              notes = notes,
#              output = "analysis/SGC3A/models/tables/GLMER_OverallAccuracy_lab.tex")
# #              # coef_omit = "Intercept",

# modelsummary(mixcat.1, s)
#TODO OUTPUT TABLE 
#https://arelbundock.com/posts/modelsummary_multinomial_logit/


```

##### Diagnostics

```{r}

#EXAMINE PREDICTIONS
#create sample data frame
# test <- data.frame(pretty_condition = c("control", "impasse"))
# pred <- predict(m, newdata = test, "probs")
# paste("Predicted Probability of Being in Each State")
# ( x <- cbind(test, pred))

print("MODEL PERFORMANCE")
performance(m)
DescTools::PseudoR2(m, which = c("McFadden", "CoxSnell", "Nagelkerke"))

#General Goodness of Fit
#library(generalhoslem)
#logitgof(df$state, catm$fitted.values, g = 3)
#A non-significant p value indicates that there is no evidence that the observed and expected frequencies differ (i.e., evidence of good fit).
#don't fret! this version of the hoslem-lem test is problematic with fewer than 10 input variables
chisq.test(df$state,predict(m)) #actual states VS predicted states
# The chi-square test tests the decrease in unexplained variance from the baseline model to the final model

# print("MODEL DIAGNOSTICS")
# check_model(m) can't do overall diagnostics, have to do them on individual model equations

```





## WM in CONTROL CONDITION

**What is the effect of WM capacity in just the control condition?**

Exploration of response accuracy and response latency between working memory groups in the control condition did not reveal any interesting differences. There are a couple of questions where low WM participants were more accurate (5 [midpoint],8[duration constraint, before B/after X]) which seems strange. Low WM participants were also faster on these questions. The faster response time could be explained in Q5 by the distractor answer (A) which was popular. 

### Setup
```{r}

df_s <- df_subjects %>% filter(pretty_condition == "control")
df_i <- df_items %>% filter(subject %in% df_s$subject) %>% filter(q %nin% c(6,9))

#validation 
nrow(df_i) / 13 == nrow(df_s)

```

### Explore 
```{r}

##OVERALL
ggbetweenstats( data = df_s, x = ospan_split, y = s_NABS,
                type = "nonparametric") + 
  labs(title = "Control Condition | Accuracy does not differ by ospan split")


ggbetweenstats( data = df_s, x = ospan_split, y = rt_m,
                type = "nonparametric") + 
  labs(title = "Control Condition | Response time does not differ by ospan split")

ggbarstats( data = df_i, x = state, y = ospan_split) + 
  labs(title = "Control Condition | INTERPRETATION does not differ by ospan split")


##Q1
ggbarstats( data = df_i %>% filter(q==1), x = accuracy, y = ospan_split,
            type = "nonparametric") + 
  labs(title = "Q1 [first exposure] | Performance does not differ by ospan split")

ggbetweenstats( data = df_i %>% filter(q==1), y = rt_s, x = ospan_split,
            type = "parametric") + 
  labs(title = "Q1 [first exposure] | RT does not differ by ospan split")

ggbarstats( data = df_i %>% filter(q==1), x = state, y = ospan_split) + 
  labs(title = "Q1 [first expsoure] | Control Condition | INTERPRETATION does not differ by ospan split")


##Q3
ggbarstats( data = df_i %>% filter(q==3), x = accuracy, y = ospan_split,
            type = "nonparametric") + 
  labs(title = "Q3 [first endtime] | Performance does not differ by ospan split")

ggbetweenstats( data = df_i %>% filter(q==3), y = rt_s, x = ospan_split,
            type = "parametric") + 
  labs(title = "Q1 [first endtime] | RT does not differ by ospan split")

ggbarstats( data = df_i %>% filter(q==3), x = state, y = ospan_split) + 
  labs(title = "Q1 [first endtime] |INTERPRETATION does not differ by ospan split")



##Q8
ggbarstats( data = df_i %>% filter(q==8), x = accuracy, y = ospan_split,
            type = "nonparametric") + 
  labs(title = "Q8 [high orth load] | Accuracy does not differ by ospan split")


ggbetweenstats( data = df_i %>% filter(q==8), y = rt_s, x = ospan_split,
            type = "parametric") + 
  labs(title = "Q8 [high orth load] | RT does not differ by ospan split")


ggbarstats( data = df_i %>% filter(q==8), x = state, y = ospan_split) + 
  labs(title = "Q8 [high orth] |INTERPRETATION does not differ by ospan split")



##Q5
ggbarstats( data = df_i %>% filter(q==5), x = accuracy, y = ospan_split,
            type = "nonparametric") + 
  labs(title = "Q5 [high orth load] | Performance does not differ by ospan split")

ggbetweenstats( data = df_i %>% filter(q==5), y = rt_s, x = ospan_split,
            type = "parametric") + 
  labs(title = "Q5 [high orth load] | RT does not differ by ospan split")

ggbarstats( data = df_i %>% filter(q==5), x = state, y = ospan_split) + 
  labs(title = "Q5 [high orth] |INTERPRETATION does not differ by ospan split")



##Q10
ggbarstats( data = df_i %>% filter(q==10), x = accuracy, y = ospan_split,
            type = "nonparametric") + 
  labs(title = "Q10 [easy tri] | Performance does not differ by ospan split")

ggbetweenstats( data = df_i %>% filter(q==10), y = rt_s, x = ospan_split,
            type = "parametric") + 
  labs(title = "Q10 [easy tri] | RT does not differ by ospan split")

ggbarstats( data = df_i %>% filter(q==5), x = state, y = ospan_split, type = "nonparametric") + 
  labs(title = "Q5 [high orth] |INTERPRETATION does not differ by ospan split")


```




## Q8 INTERPRETATION STATE


#### Setup 
```{r}

df <- df_items %>% filter(q==8) %>% 
  dplyr::select(pretty_condition, ospan_split, state)

```


#### Describe 
```{r}


#:::::::: STACKED BAR CHART
df %>% 
  ggplot(data = .,
         mapping = aes(x = pretty_condition,
                       fill = state)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_brewer(palette = "Set1")  +
  facet_wrap(~ospan_split) +
   labs(#y = "Correct Response on Q 1",
       title = "Q8 Interpretation",
       x = "Condition",
       fill = "",
       subtitle="")

```


```{r}


#::::::::::::DESCRIPTIVES

table(df$state, df$pretty_condition) %>% addmargins(2) %>% #display sum for row
      prop.table(margin=2) %>%  #return proportion (of column)
      addmargins(1) #sanity check sum of columns


(t <- table(df$state, df$pretty_condition, df$ospan_split) %>% addmargins(2) %>% #display sum for row
      addmargins(1)) #sanity check sum of columns

```

#### MULTINOMIAL REGRESSION

TODO:: USE MBLOGIT VERSION WITH P VALUES IN MODEL

*Does condition affect the response state of Q?*


##### Fit CONDITION Model

```{r}

#check reference level 
print("Categories (first is reference)")
levels(df$state)

#FIT EMPTY MODEL
# print("EMPTY MODEL")
catm.0 <- multinom(state ~ 1, data = df)
# summary(catm.0)

#FIT PREDICTOR MODEL
# print("PREDICTOR MODEL")
catm.C <- multinom(formula = state ~ pretty_condition, data = df, model = TRUE)
# summary(catm.C)

#COMPARE MODEL FIT
paste("AIC wth predictor is lower than empty model?", catm.0$AIC > catm.C$AIC)
test_lrt(catm.0, catm.C)

##compare bayesian version
#library(brms)
# b.cat <- brm( state2 ~ pretty_condition, data = df, family = "categorical", backend = "cmdstanr")
# summary(b.cat)
# plot_model(b.cat)
# report(b.cat)
# coefficient estimates are very simliar to catm. super cool!

##compare mclogit version
#"baseline-category logit model
# https://www.elff.eu/software/mclogit/manual/mblogit/
# blm1 <- mblogit(state2 ~ pretty_condition , data = df)
# summary(blm1)
#identical to catm. super cool!

```

*AIC in predictor model is less than empty model, and likelihood ratio test indicates predictor model is significantly better fit to the sample data than the empty (intercept only) model.*

##### Fit OSPAN Model

```{r}

#FIT OSPAN only MODEL
# print("OSPAN ONLY MODEL")
catm.O <- multinom(state ~ ospan_split, data = df)
# summary(catm.O) 
# car::Anova(catm.O) 
print("OSPAN ONLY better than empty?")
test_lrt(catm.0, catm.O)


#FIT OSPAN + CONDITION
# print("OSPAN + CONDITION MODEL")
catm.CO <- multinom(formula = state ~ pretty_condition + ospan_split, data = df, model = TRUE)
# summary(catm.CO)
car::Anova(catm.CO) #MainEff condition, marginal ospan

#COMPARE MODEL FIT
paste("Adding OSPAN to CONDITION lowers AIC?", catm.C$AIC > catm.CO$AIC)
test_lrt(catm.C, catm.CO)

```
_Adding (main effect) predictor of OSPAN decreases AIC and is a marginally better fit. In this model, there are main effects of condition and OSPAN._

```{r}

#FIT OSPAN * CONDITION
# print("OSPAN * CONDITION MODEL")
catm.C.O <- multinom(formula = state ~ pretty_condition * ospan_split, data = df, model = TRUE)
car::Anova(catm.C.O, type = 3)
# summary(catm.C.O)
# car::Anova(catm.C.O) #MainEff condition, marginal ospan
#COMPARE MODEL FIT
paste("Adding INTERACTION lowers AIC?", catm.CO$AIC > catm.C.O$AIC)
test_lrt(catm.CO, catm.C.O)

```
_Adding interaction of OSPAN does not improve fit and does not lower AIC. In the IXN model, no effects are significant._ So we conclude that the main effects only model is the final model. 

```{r}
##compare bayesian version
# library(brms)
# b.cat <- brm( state ~ pretty_condition*ospan_split, data = df, family = "categorical", backend = "cmdstanr")
# summary(b.cat)
# plot_model(b.cat) 
# plot(equivalence_test(b.cat))
# plot(rope(b.cat))
# report(b.cat)
# coefficient estimates are very simliar to catm. super cool!

##compare mclogit version
#"baseline-category logit model
# https://www.elff.eu/software/mclogit/manual/mblogit/
# blm1 <- mblogit(state ~ pretty_condition *ospan_split , data = df)
# summary(blm1)
# car::Anova(blm1) #todo need to separate by individual equation
#identical to catm. super cool!

```




##### Describe

```{r}


#set model
m <- catm.CO

#::::::::INTERPRETATION
paste("MODEL SUMMARY")
summary(m)
car::Anova(m, type =2) #always type 3 for ixns 

# calculate z-statistics of coefficients
z_stats <- summary(m)$coefficients/summary(m)$standard.errors
# convert to p-values
p_values <- (1 - pnorm(abs(z_stats)))*2
# display p-values in transposed data frame
(p_values <- data.frame(p = (p_values)))
# display odds ratios in transposed data frame

paste("ODDS RATIOS")
odds_ratios <- data.frame(OR = exp(summary(m)$coefficients))
options(scipen = 2)
(results <- cbind(odds_ratios, p_values))
```

##### Inference 



##### Visualize

```{r}

#:::::::: PLOT

#SJPLOT | MODEL | ODDS RATIO
#library(sjPlot)
plot_model(m, type = "est",
           vline.color = "red", 
           show.intercept = TRUE, 
           show.values = TRUE,
           p.threshold = 0.1, #manually adjust to account for directional test
           ci.lvl = 0.90 ) +  #manually adjusted for directional test   
  # scale_y_continuous() + #remove to put on log scale x axis 
  # scale_x_discrete(labels=c("control","impasse"))+
  labs(title = "MODEL ESTIMATE  | Q1 Accuracy ~ condition",
       subtitle = "Impasse increases odds of correct response on Q1",
       x = "Condition") + theme_clean()

  
#SJPLOT | MODEL | PROBABILITIES
# plot_model(m, type = "int", ci.lvl = 0.95) 
plot_model(m, type="eff", ci.lvl = 0.95) 
# +  ylim(0,1) +
#   labs(title = "MODEL PREDICTION  | Q1 State ~ condition",
#        subtitle = "Impasse increases probability of more accurate response states Q1",
#        x = "Condition") + theme_clean()

#TODO ESTIMAED MARGINALS AND IXN PLOTS 
# https://cran.r-project.org/web/packages/emmeans/vignettes/comparisons.html


```

```{r}

#SJPLOT | MODEL | TABLE
# tab_model(m)

# #MODEL SUMMARY | save latex table
# models <- list("odds ratios" = m1, "(log odds)" = m1)
# notes = list("* p < 0.05, ** p < 0.01, *** p < 0.001",
#              '$sigma^{2}$ = 3.29" N(subject) = 126 $\tau_{00}$(subject) = 22.22 N(question) = 13 $\tau_{00}$(question) = 0.31'
#                )
# 
# modelsummary(models,
#              exponentiate = c(TRUE, FALSE),
#              shape = term ~ model + statistic,
#              fmt = 2, #two digits w/ trailing zero
#              estimate  = "{estimate} {stars}",
#              statistic = "conf.int",
#              gof_map = c("AIC", "sigma"),
#              gof_omit = 'RMSE|ICC|BIC',
#              coef_rename = c("pretty_conditionimpasse" = "Condition[impasse]"),
#              title = 'Accuracy ~ Condition (Mixed Logistic Regression)', 
#              notes = notes,
#              output = "analysis/SGC3A/models/tables/GLMER_OverallAccuracy_lab.tex")
# #              # coef_omit = "Intercept",

# modelsummary(mixcat.1, s)
#TODO OUTPUT TABLE 
#https://arelbundock.com/posts/modelsummary_multinomial_logit/


```

##### Diagnostics

```{r}

#EXAMINE PREDICTIONS
#create sample data frame
# test <- data.frame(pretty_condition = c("control", "impasse"))
# pred <- predict(m, newdata = test, "probs")
# paste("Predicted Probability of Being in Each State")
# ( x <- cbind(test, pred))

# print("MODEL PERFORMANCE")
# performance(m)
# DescTools::PseudoR2(m, which = c("McFadden", "CoxSnell", "Nagelkerke"))

#General Goodness of Fit
#library(generalhoslem)
#logitgof(df$state, catm$fitted.values, g = 3)
#A non-significant p value indicates that there is no evidence that the observed and expected frequencies differ (i.e., evidence of good fit).
#don't fret! this version of the hoslem-lem test is problematic with fewer than 10 input variables
chisq.test(df$state,predict(m)) #actual states VS predicted states
# The chi-square test tests the decrease in unexplained variance from the baseline model to the final model

# print("MODEL DIAGNOSTICS")
# check_model(m) can't do overall diagnostics, have to do them on individual model equations

```





## EXPLORE specific question 

```{r}

df <- df_items %>% filter(q==10)
grouped_ggbarstats( data = df, x = accuracy, y = pretty_condition, grouping.var = ospan_split)

```