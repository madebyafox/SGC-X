---
subtitle: 'Study SGC2 | Description'
---

\newpage

# Description {#sec-SGC2-description}

*The purpose of this notebook is describe the distributions of dependent variables for Study SGC2.*


```{r}
#| label: SETUP
#| warning : false
#| message : false

library(Hmisc) # %nin% operator
library(mosaic) #simple descriptives [favstats]

library(kableExtra) #printing tables 
library(vcd) #mosaicplots
library(ggpubr) #arrange plots
library(ggformula) #quick easy plots
library(ggdist) # uncertainty viz
library(ggeasy) #easy edits to graph format

library(multimode) #test for multimodality
library(fitdistrplus) #fitting distributions
library(performance) #multimodality

library(tidyverse) #ALL THE THINGS

#OUTPUT OPTIONS
library(dplyr, warn.conflicts = FALSE)
options(dplyr.summarise.inform = FALSE)
options(ggplot2.summarise.inform = FALSE)
options(scipen=1, digits=3)

#GRAPH THEMEING
theme_set(theme_minimal()) 

```

```{r}
#| label: IMPORT-DATA
#| warning : false
#| message : false

# HACK WD FOR LOCAL RUNNING?
# imac = "/Users/amyraefox/Code/SGC-Scaffolding_Graph_Comprehension/SGC-X/ANALYSIS/MAIN"
# mbp = "/Users/amyfox/Sites/RESEARCH/SGCâ€”Scaffolding Graph Comprehension/SGC-X/ANALYSIS/MAIN"
# setwd(mbp)

#IMPORT DATA 
df_items <- read_rds('analysis/SGC2/data/2-scored-data/sgc2_items.rds')
df_subjects <- read_rds('analysis/SGC2/data/2-scored-data/sgc2_participants.rds') 

```

## SAMPLE

### Data Collection

Data was initially collected (in person, SONA groups in computer lab) in Spring 2017. 

```{r}
#| label : INSPECT-DATA-COLLECTION

title = "Participants by Condition and (counterbalanced) Task-order"
cols = c("Control","Text[what]","Text[how]","Image[static]", "Image[ixv]","Total")
cont <- table(df_subjects$order, df_subjects$pretty_condition)
cont %>% addmargins() %>% kbl(caption = title, col.names = cols) %>%  kable_classic()

```

### Participants

```{r}
#| label: DESC-PARTICIPANTS

#Describe participants
subject.stats <- df_subjects %>% dplyr::select(AGE) %>% unlist() %>% favstats() 

subject.stats$percent.female <- df_subjects %>% filter(GENDER=="Female") %>% count() %>% pull()/nrow(df_subjects)


title = "Descriptive Statistics of Participant Age and Gender"
subject.stats %>% kbl (caption = title) %>% kable_classic()%>% 
  footnote(general = "Age in Years", 
           general_title = "Note: ",footnote_as_chunk = T) 
```

For **in person** data collection `r subject.stats$n` participants (`r  round((subject.stats$percent.female),2) * 100` % female ) undergraduate STEM majors at a public American University participated in exchange for course credit (age: `r (subject.stats$min)` - `r (subject.stats$max)` years).

## RESPONSE ACCURACY

### Block Scores

Subject level scores summarize the the response accuracy by a particular participant across all blocks of the two graph comprehension tasks. The task score refers to the number of questions correct (absolute scoring) in each block (linear graph, triangular graph) of the graph comprehension task.

```{r}
#| label: DESC-SUBJ-SCORE
 
title = "Descriptive Statistics of Response Accuracy by Block (Total Absolute Score)"
abs.stats <- rbind(
  "linear.block"= df_subjects %>% dplyr::select(linear_score) %>% unlist() %>% favstats(),
  "triangular.block" = df_subjects %>% dplyr::select(triangular_score) %>% unlist() %>% favstats(),
  "block.differences" = df_subjects %>% dplyr::select(score_diff) %>% unlist() %>% favstats(),
  "total" = df_subjects %>% dplyr::select(totalScore) %>% unlist() %>% favstats()
)

abs.stats %>% kbl (caption = title) %>% kable_classic() %>%
  footnote(general = "block # questions correct [0,15]; DIFF = triangular - linear",
           general_title = "Note: ",footnote_as_chunk = T)

```

Total absolute scores for the LINEAR graph  (n = `r abs.stats["linear.block",]$n`) range from `r round(abs.stats["linear.block",]$min,2)` to `r round(abs.stats["linear.block",]$max,2)` with a mean score of (M = `r round(abs.stats["linear.block",]$mean,2)`, SD = `r round(abs.stats["linear.block",]$sd,2)`).

Total absolute scores for the TRIANGULAR graph  (n = `r abs.stats["triangular.block",]$n`) range from `r round(abs.stats["triangular.block",]$min,2)` to `r round(abs.stats["triangular.block",]$max,2)` with a mean score of (M = `r round(abs.stats["triangular.block",]$mean,2)`, SD = `r round(abs.stats["triangular.block",]$sd,2)`).

Total absolute scores across the ENTIRE TASK  (n = `r abs.stats["total",]$n`) range from `r round(abs.stats["total",]$min,2)` to `r round(abs.stats["total",]$max,2)` with a mean score of (M = `r round(abs.stats["total",]$mean,2)`, SD = `r round(abs.stats["total",]$sd,2)`).

Difference scores (difference between TRIANGULAR and LINEAR) scores for each participant (n = `r abs.stats["block.differences",]$n`) range from `r round(abs.stats["block.differences",]$min,2)` to `r round(abs.stats["block.differences",]$max,2)` with a mean score of (M = `r round(abs.stats["block.differences",]$mean,2)`, SD = `r round(abs.stats["block.differences",]$sd,2)`). (note: negative difference scores indicate the participant performed better on the linear block than the triangular block.)

#### By Block
```{r}
#| label: VIS-SCORE-by-GRAPH

#DATA SETUP
long_scores <- df_subjects %>% dplyr::select(subject,pretty_condition,order,lm_scenarios,tm_scenarios,linear_score, triangular_score) %>% pivot_longer(
  cols = ends_with("score"),
  names_to = "graph",
  values_to = "score"
)

#DISTRIBUTION OF SCORES BY GRAPH
stats <- favstats(score~graph, data = long_scores)
gf_dhistogram(~score, fill = ~graph, binwidth = 0.5,data = long_scores) %>%
  gf_vline(xintercept = ~mean, color = ~graph, data = stats) %>%
  gf_dens(color = ~graph) %>%  
  gf_facet_grid(~ graph) +
  labs( title = "Distribution of Score (by Block)",
        subtitle ="Performance on Linear Graph is better than Triangular",
        x = "Block Score (# correct)", y = "proportion of subjects") +
  easy_remove_legend()

##VERTICAL RAINCLOUD USING GGDISTR
ggplot(long_scores, aes(x = graph, y = score,
                        fill = graph) ) + 
  ggdist::stat_halfeye(
    side = "left",
    justification = 1.1,
    width = 1, 
    point_colour = NA
   ) + 
  geom_boxplot(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = score),
    width = .15, 
    outlier.shape = NA
  ) + 
  geom_point(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = score, color = graph),
    size = 1.3,
    alpha = .3,
    position = position_jitter( 
      seed = 1, width = .05
  )) + labs( 
    title = "Distribution of Score (by Block) ",
    x = "Condition", y = "Score (# correct)") +
  theme(legend.position = "blank") + 
  coord_cartesian(xlim = c(0.5, NA), clip = "off")


```


**TODO explore interactions**
```{r}
# 
# 
# library(interactions)
m = lm(score ~ graph + pretty_condition + order + tm_scenarios, data = long_scores)
m2 = lm(score ~ graph * pretty_condition * order * tm_scenarios, data = long_scores)
# 
# cat_plot(model = m, pred = graph, modx = order, mod2 = pretty_condition,
#          INT.TYPE = "confidence", int.width = 0.95,
#          rug = TRUE)
# 
# cat_plot(model = m2, pred = graph, modx = tm_scenarios, mod2 = pretty_condition,
#          INT.TYPE = "confidence", int.width = 0.95,
#          rug = TRUE)
# 
# # cat_plot(model = m, pred = graph, modx = tm_scenarios, mod2 = pretty_condition,
# #          INT.TYPE = "confidence", int.width = 0.95,
# #          rug = TRUE)
```

#### By Condition
```{r}
#| label: VIS-SCORE-by-CONDITION

#DISTRIBUTION OF SCORES BY GRAPH
stats <- favstats(score ~ pretty_condition+graph, data = long_scores)
gf_dhistogram(~score, fill = ~pretty_condition, binwidth = 0.5,data = long_scores) %>% 
  gf_dens(color = ~pretty_condition) %>%  
  # gf_vline(xintercept = ~mean, data = stats) %>% 
  gf_facet_grid(pretty_condition ~ graph) +
  labs( title = "Distribution of Score (by Condition)",
        subtitle ="",
        x = "Block Score (# correct)", y = "number of subjects") + 
  easy_remove_legend()


##VERTICAL RAINCLOUD USING GGDISTR
ggplot(long_scores, aes(x = graph, y = score,
                        fill = graph) ) + 
  ggdist::stat_halfeye(
    side = "left",
    justification = 1.1,
    width = 1, 
    point_colour = NA
   ) + 
  geom_boxplot(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = score),
    width = .15, 
    outlier.shape = NA
  ) + 
  geom_point(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = score, color = graph),
    size = 1.3,
    alpha = .3,
    position = position_jitter( 
      seed = 1, width = .05
  )) + 
  facet_wrap(~pretty_condition) + labs( 
    title = "Distribution of Score (by Condition) ",
    x = "Condition", y = "Score (# correct)") +
  theme(legend.position = "blank") + 
  coord_cartesian(xlim = c(0.5, NA), clip = "off")
  
```

#### By Order
```{r}
#| label: VIS-SCORE-by-ORDER

#DISTRIBUTION OF SCORES BY GRAPH
gf_dhistogram(~score, fill = ~graph, binwidth = 0.5,data = long_scores) %>% 
  gf_dens(color = ~graph) %>%  
  gf_facet_grid(graph~order) +
  labs( title = "Distribution of Score (by Order)",
        subtitle ="",
        x = "Block Score (# correct)", y = "number of subjects") + 
  easy_remove_legend()


##VERTICAL RAINCLOUD USING GGDISTR
ggplot(long_scores, aes(x = graph, y = score,
                        fill = graph) ) + 
  ggdist::stat_halfeye(
    side = "left",
    justification = 1.1,
    width = 1, 
    point_colour = NA
   ) + 
  geom_boxplot(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = score),
    width = .15, 
    outlier.shape = NA
  ) + 
  geom_point(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = score, color = graph),
    size = 1.3,
    alpha = .3,
    position = position_jitter( 
      seed = 1, width = .05
  )) + 
  facet_wrap(~order) + labs( 
    title = "Distribution of Score (by Order)",
    x = "Graph", y = "Score (# correct)") +
  theme(legend.position = "blank") + 
  coord_cartesian(xlim = c(0.5, NA), clip = "off")
  
```

#### By Scenario

```{r}
#| label: VIS-SCORE-by-SCENARIO

#DISTRIBUTION OF SCORES BY GRAPH
gf_dhistogram(~score, fill = ~graph, binwidth = 0.5,data = long_scores) %>% 
  gf_dens(color = ~graph) %>%  
  gf_facet_grid(graph~tm_scenarios) +
  labs( title = "Distribution of Score (by Scenario)",
        subtitle ="",
        x = "Block Score (# correct)", y = "number of subjects") + 
  easy_remove_legend()


##VERTICAL RAINCLOUD USING GGDISTR
ggplot(long_scores, aes(x = graph, y = score,
                        fill = graph) ) + 
  ggdist::stat_halfeye(
    side = "left",
    justification = 1.1,
    width = 1, 
    point_colour = NA
   ) + 
  geom_boxplot(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = score),
    width = .15, 
    outlier.shape = NA
  ) + 
  geom_point(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = score, color = graph),
    size = 1.3,
    alpha = .3,
    position = position_jitter( 
      seed = 1, width = .05
  )) + 
  facet_wrap(~tm_scenarios) + labs( 
    title = "Distribution of Score (by Scenario) ",
    x = "Graph", y = "Score (# correct)") +
  theme(legend.position = "blank") + 
  coord_cartesian(xlim = c(0.5, NA), clip = "off")
  
```

### Block Difference Scores
```{r}
#| label: VIS-SCOREDIFF-by-CONDITION

#DIFFERENCE SCORE BY SUBJECT
gf_line(score~graph, group=~subject, color = ~order, data = long_scores) %>% 
  gf_facet_grid(order~pretty_condition) + 
  labs(title = "Block Scores by Condition") + easy_remove_legend()

#DISTRIBUTION OF SCORES BY GRAPH
gf_dhistogram(~score_diff, fill = ~pretty_condition, binwidth = 0.5,data = df_subjects) %>% 
  # gf_dens(color = ~graph) %>%  
  gf_facet_grid(order~pretty_condition) +
  labs( title = "Block Difference Score (by Condition)",
        subtitle ="",
        x = "Difference Score (Triangular - Linear)", y = "number of subjects") + 
  easy_remove_legend()
```




### Item Scores

Task Accuracy summarized over items rather than subjects

```{r}
#| label: VIS-ITEM-SCORE

df <- df_items %>% filter(graph %in% c("linear","triangular"))

#VISUALIZE distribution of response accuracy across ITEMS

#HISTOGRAM by Condition
# gf_props(~correct, data = df) %>% 
#   gf_facet_grid(pretty_condition~graph, labeller = label_both) +
#   labs(x = "Item Accuracy",
#        title = "Item Accuracy by Graph and Condition",
#        subtitle="")

#STACKED BAR CHART
df %>% 
  ggplot(data = .,
         mapping = aes(x = graph,
                       fill = score)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_brewer(palette = "Set1")  +
  facet_wrap(~pretty_condition) +
   labs(y = "Proportion of Items",
       title = "Item Accuracy by Graph and Condition",
       x = "Condition",
       fill = "",
       subtitle="")


#HISTOGRAM
# gf_props(~correct, data = df) %>% 
#   gf_facet_grid(scenario~graph, labeller = label_both) +
#   labs(x = "Item Accuracy",
#        title = "Item Accuracy by Graph and (TM Graph) Scenario",
#        subtitle="")

#STACKED BAR CHART
df %>% 
  ggplot(data = .,
         mapping = aes(x = graph,
                       fill = score)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_brewer(palette = "Set1")  +
  facet_wrap(~scenario) +
   labs(y = "Proportion of Items",
       title = "Item Accuracy by Graph and (TM Graph) Scenario",
       x = "TM Graph Scenario",
       fill = "",
       subtitle="If the scenarios are of equal difficulty, these should be the same")


#HISTOGRAM
# gf_props(~correct, data = df) %>% 
#   gf_facet_grid(order~graph, labeller = label_both) +
#   labs(x = "Item Accuracy",
#        title = "Item Accuracy by Graph and Block Order",
#        subtitle="")

#STACKED BAR CHART
df %>% 
  ggplot(data = .,
         mapping = aes(x = graph,
                       fill = score)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_brewer(palette = "Set1")  +
  facet_wrap(~order) +
   labs(y = "Proportion of Items",
       title = "Item Accuracy by Graph and Block Order",
       x = "Block Order",
       fill = "",
       subtitle="")

#STACKED BAR CHART
df %>% 
  ggplot(data = .,
         mapping = aes(x = graph,
                       fill = score)) +
  geom_bar(position = "fill" ) + #,color = "black") +
  scale_fill_brewer(palette = "Set1")  +
  facet_wrap(~q) +
   labs( 
     #y = "Proportion of Items",
       title = "Item Accuracy by Graph and Question Number",
       x = "Question Number",
       fill = "",
       subtitle="")

```

## RESPONSE LATENCY


### Time on Block

```{r}
#| label: DESC-SUBJ-TIME
 
title = "Descriptive Statistics of Response Time by Block"
time.stats <- rbind(
  "linear.block"= df_subjects %>% dplyr::select(LM_T_M) %>% unlist() %>% favstats(),
  "triangular.block" = df_subjects %>% dplyr::select(TM_T_M) %>% unlist() %>% favstats(),
  "block.differences" = df_subjects %>% dplyr::select(DIFF_T_M) %>% unlist() %>% favstats(),
  "total" = df_subjects %>% dplyr::select(TOTAL_T_M) %>% unlist() %>% favstats()
)

time.stats %>% kbl (caption = title) %>% kable_classic() %>%
  footnote(general = "time in minutes; DIFF = triangular - linear",
           general_title = "Note: ",footnote_as_chunk = T)

```

Response time (in minutes) for the LINEAR graph  (n = `r time.stats["linear.block",]$n`) range from `r round(time.stats["linear.block",]$min,2)` to `r round(time.stats["linear.block",]$max,2)` with a mean time of (M = `r round(time.stats["linear.block",]$mean,2)`, SD = `r round(time.stats["linear.block",]$sd,2)`).

Response time (in minutes) for the TRIANGULAR graph  (n = `r time.stats["triangular.block",]$n`) range from `r round(time.stats["triangular.block",]$min,2)` to `r round(time.stats["triangular.block",]$max,2)` with a mean time of (M = `r round(time.stats["triangular.block",]$mean,2)`, SD = `r round(time.stats["triangular.block",]$sd,2)`).

Response time (in minutes) across the ENTIRE TASK  (n = `r time.stats["total",]$n`) range from `r round(time.stats["total",]$min,2)` to `r round(time.stats["total",]$max,2)` with a mean time of (M = `r round(time.stats["total",]$mean,2)`, SD = `r round(time.stats["total",]$sd,2)`).

Difference in response time (in minutes) (difference between TRIANGULAR - LINEAR) for each participant (n = `r time.stats["block.differences",]$n`) range from `r round(time.stats["block.differences",]$min,2)` to `r round(time.stats["block.differences",]$max,2)` with a mean difference in time of (M = `r round(time.stats["block.differences",]$mean,2)`, SD = `r round(time.stats["block.differences",]$sd,2)`). (note: negative difference scores indicate the participant performed faster on the linear block than the triangular block.)


```{r}
#| label: VIS-TIME-by-GRAPH

#DATA SETUP
long_times <- df_subjects %>% dplyr::select(subject,pretty_condition,order,lm_scenarios,tm_scenarios, LM_T_M, TM_T_M) %>% pivot_longer(
  cols = ends_with("M"),
  names_to = "graph",
  values_to = "time") %>% mutate(
    graph = recode(graph, "LM_T_M" = "Linear Graph", "TM_T_M" = "Triangular Graph")
  )

#DISTRIBUTION OF SCORES BY GRAPH
stats <- favstats(time~graph, data = long_times)
gf_dhistogram(~time, fill = ~graph, binwidth = 0.5,data = long_times) %>%
  gf_vline(xintercept = ~mean, color = ~graph, data = stats) %>%
  gf_dens(color = ~graph) %>%  
  gf_facet_grid(~ graph) +
  labs( title = "Distribution of Response Time",
        subtitle ="Performance on Linear Graph is faster than Triangular",
        x = "Block Score (# correct)", y = "number of subjects") +
  easy_remove_legend()

##VERTICAL RAINCLOUD USING GGDISTR
ggplot(long_times, aes(x = graph, y = time,
                        fill = graph) ) + 
  ggdist::stat_halfeye(
    side = "left",
    justification = 1.1,
    width = 1, 
    point_colour = NA
   ) + 
  geom_boxplot(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = time),
    width = .15, 
    outlier.shape = NA
  ) + 
  geom_point(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = time, color = graph),
    size = 1.3,
    alpha = .3,
    position = position_jitter( 
      seed = 1, width = .05
  )) + labs( 
    title = "Distribution of Response Time by Graph ",
    x = "Condition", y = "Response Time (minutes)") +
  theme(legend.position = "blank") + 
  coord_cartesian(xlim = c(0.5, NA), clip = "off")

```


```{r}
#| label: VIS-TIME-by-CONDITION

#DISTRIBUTION OF TIME BY GRAPH
stats <- favstats(time ~ pretty_condition+graph, data = long_times)
gf_dhistogram(~time, fill = ~pretty_condition, binwidth = 0.5,data = long_times) %>% 
  gf_dens(color = ~pretty_condition) %>%  
  gf_facet_grid(pretty_condition ~ graph) +
  labs( title = "Distribution of Response Time (by Condition)",
        subtitle ="",
        x = "Response Time (minutes)", y = "number of subjects") + 
  easy_remove_legend()


##VERTICAL RAINCLOUD USING GGDISTR
ggplot(long_times, aes(x = graph, y = time,
                        fill = graph) ) + 
  ggdist::stat_halfeye(
    side = "left",
    justification = 1.1,
    width = 1, 
    point_colour = NA
   ) + 
  geom_boxplot(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = time),
    width = .15, 
    outlier.shape = NA
  ) + 
  geom_point(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = time, color = graph),
    size = 1.3,
    alpha = .3,
    position = position_jitter( 
      seed = 1, width = .05
  )) + 
  facet_wrap(~pretty_condition) + labs( 
    title = "Distribution of Response Time by Graph ",
    x = "Condition", y = "Response Time (minutes)") +
  theme(legend.position = "blank") + 
  coord_cartesian(xlim = c(0.5, NA), clip = "off")
  
```

```{r}
#| label: VIS-TIME-by-ORDER

#DISTRIBUTION OF TIMES BY GRAPH
gf_dhistogram(~time, fill = ~graph, binwidth = 0.5,data = long_times) %>% 
  gf_dens(color = ~graph) %>%  
  gf_facet_grid(graph~order) +
  labs( title = "Distribution of Response Time (by Order)",
        subtitle ="",
        x = "Response Time (minutes)", y = "number of subjects") + 
  easy_remove_legend()


##VERTICAL RAINCLOUD USING GGDISTR
ggplot(long_times, aes(x = graph, y = time,
                        fill = graph) ) + 
  ggdist::stat_halfeye(
    side = "left",
    justification = 1.1,
    width = 1, 
    point_colour = NA
   ) + 
  geom_boxplot(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = time),
    width = .15, 
    outlier.shape = NA
  ) + 
  geom_point(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = time, color = graph),
    size = 1.3,
    alpha = .3,
    position = position_jitter( 
      seed = 1, width = .05
  )) + 
  facet_wrap(~order) + labs( 
    title = "Distribution of Response Time (by Order)",
    x = "", y = "Response Time (minutes)") +
  theme(legend.position = "blank") + 
  coord_cartesian(xlim = c(0.5, NA), clip = "off")
  
```

```{r}
#| label: VIS-TIME-by-SCENARIO

#DISTRIBUTION OF SCORES BY GRAPH
gf_dhistogram(~time, fill = ~graph, binwidth = 0.5,data = long_times) %>% 
  gf_dens(color = ~graph) %>%  
  gf_facet_grid(graph~tm_scenarios) +
  labs( title = "Distribution of Response Time (by Scenario)",
        subtitle ="",
        x = "Response Time (minutes)", y = "number of subjects") + 
  easy_remove_legend()


##VERTICAL RAINCLOUD USING GGDISTR
ggplot(long_times, aes(x = graph, y = time,
                        fill = graph) ) + 
  ggdist::stat_halfeye(
    side = "left",
    justification = 1.1,
    width = 1, 
    point_colour = NA
   ) + 
  geom_boxplot(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = time),
    width = .15, 
    outlier.shape = NA
  ) + 
  geom_point(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = time, color = graph),
    size = 1.3,
    alpha = .3,
    position = position_jitter( 
      seed = 1, width = .05
  )) + 
  facet_wrap(~tm_scenarios) + labs( 
    title = "Distribution of Response Time (by Scenario) ",
    x = "TM Scenario", y = "Respone Time (minutes)") +
  theme(legend.position = "blank") + 
  coord_cartesian(xlim = c(0.5, NA), clip = "off")
  
```



```{r}
#| label: VIS-TIMEDIFF-by-CONDITION

#DIFFERENCE TIME BY SUBJECT
gf_line(time~graph, group=~subject, color = ~order, data = long_times) %>% 
  gf_facet_grid(order~pretty_condition) + 
  labs(title = "Response Times by Condition") + easy_remove_legend()

#DISTRIBUTION OF SCORES BY GRAPH
gf_dhistogram(~DIFF_T_M, fill = ~pretty_condition, binwidth = 0.5,data = df_subjects) %>% 
  # gf_dens(color = ~graph) %>%  
  gf_facet_grid(order~pretty_condition) +
  labs( title = "Block Time Difference (by Condition)",
        subtitle ="",
        x = "Difference Time (Triangular - Linear)", y = "number of subjects") + 
  easy_remove_legend()
```









### Time on Item

```{r}
#| label: DESC-SUBJ-STUDYTIME
 
title = "Descriptive Statistics of Item Response Time by Block"
time.stats <- rbind(
  "linear.block"= df_items %>% filter(graph == "linear") %>% dplyr::select(rt_sec) %>% unlist() %>% favstats(),
  "triangular.block" = df_items %>%  filter(graph == "triangular") %>% dplyr::select(rt_sec) %>% unlist() %>% favstats()
)

time.stats %>% kbl (caption = title) %>% kable_classic() %>%
  footnote(general = "time in minutes; DIFF = triangular - linear",
           general_title = "Note: ",footnote_as_chunk = T)

```

Item Response time (in seconds) for the LINEAR graph  (n = `r time.stats["linear.block",]$n`) range from `r round(time.stats["linear.block",]$min,2)` to `r round(time.stats["linear.block",]$max,2)` with a mean time of (M = `r round(time.stats["linear.block",]$mean,2)`, SD = `r round(time.stats["linear.block",]$sd,2)`).

Item Response time (in seconds) for the TRIANGULAR graph  (n = `r time.stats["triangular.block",]$n`) range from `r round(time.stats["triangular.block",]$min,2)` to `r round(time.stats["triangular.block",]$max,2)` with a mean time of (M = `r round(time.stats["triangular.block",]$mean,2)`, SD = `r round(time.stats["triangular.block",]$sd,2)`).


```{r}
#| label: VIS-ITEM-TIME-by-GRAPH

#DISTRIBUTION OF SCORES BY GRAPH
stats <- favstats(rt_sec~graph, data = df)
gf_dhistogram(~rt_sec, fill = ~graph, binwidth = 0.5,data = df) %>%
  gf_vline(xintercept = ~mean, color = ~graph, data = stats) %>%
  gf_dens(color = ~graph) %>%  
  gf_facet_grid(~ graph) +
  labs( title = "Distribution of Response Time",
        subtitle ="Performance on Linear Graph is faster than Triangular",
        x = "Block Score (# correct)", y = "number of subjects") +
  easy_remove_legend()

##VERTICAL RAINCLOUD USING GGDISTR
ggplot(df, aes(x = graph, y = rt_sec,
                        fill = graph) ) + 
  ggdist::stat_halfeye(
    side = "left",
    justification = 1.1,
    width = 1, 
    point_colour = NA
   ) + 
  geom_boxplot(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = rt_sec),
    width = .15, 
    outlier.shape = NA
  ) + 
  geom_point(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = rt_sec, color = graph),
    size = 1.3,
    alpha = .05,
    position = position_jitter( 
      seed = 1, width = .05
  )) + labs( 
    title = "Distribution of Item Response Time by Graph ",
    x = "Condition", y = "Response Time (seconds)") +
  theme(legend.position = "blank") + 
  coord_cartesian(xlim = c(0.5, NA), clip = "off")

```


```{r}
#| label: VIS-ITEMTIME-by-CONDITION

#DISTRIBUTION OF TIME BY GRAPH
stats <- favstats(rt_sec ~ pretty_condition+graph, data = df)
gf_dhistogram(~rt_sec, fill = ~pretty_condition, binwidth = 0.5,data = df) %>% 
  gf_dens(color = ~pretty_condition) %>%  
  gf_facet_grid(pretty_condition ~ graph) +
  labs( title = "Distribution of Item Response Time (by Condition)",
        subtitle ="",
        x = "Response Time (seconds)", y = "proportion of items") + 
  easy_remove_legend()


##VERTICAL RAINCLOUD USING GGDISTR
ggplot(df, aes(x = graph, y = rt_sec,
                        fill = graph) ) + 
  ggdist::stat_halfeye(
    side = "left",
    justification = 1.1,
    width = 1, 
    point_colour = NA
   ) + 
  geom_boxplot(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = rt_sec),
    width = .15, 
    outlier.shape = NA
  ) + 
  geom_point(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = rt_sec, color = graph),
    size = 1.3,
    alpha = .3,
    position = position_jitter( 
      seed = 1, width = .05
  )) + 
  facet_wrap(~pretty_condition) + labs( 
    title = "Distribution of Item Response Time by Graph ",
    x = "Condition", y = "Response Time (seconds)") +
  theme(legend.position = "blank") + 
  coord_cartesian(xlim = c(0.5, NA), clip = "off")
  
```

```{r}
#| label: VIS-ITEM-TIME-by-ORDER

#DISTRIBUTION OF TIMES BY GRAPH
gf_dhistogram(~rt_sec, fill = ~graph, binwidth = 0.5,data = df) %>% 
  gf_dens(color = ~graph) %>%  
  gf_facet_grid(graph~order) +
  labs( title = "Distribution of Item Response Time (by Order)",
        subtitle ="",
        x = "Item Response Time (sec)", y = "number of subjects") + 
  easy_remove_legend()


##VERTICAL RAINCLOUD USING GGDISTR
ggplot(df, aes(x = graph, y = rt_sec,
                        fill = graph) ) + 
  ggdist::stat_halfeye(
    side = "left",
    justification = 1.1,
    width = 1, 
    point_colour = NA
   ) + 
  geom_boxplot(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = rt_sec),
    width = .15, 
    outlier.shape = NA
  ) + 
  geom_point(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = rt_sec, color = graph),
    size = 1.3,
    alpha = .3,
    position = position_jitter( 
      seed = 1, width = .05
  )) + 
  facet_wrap(~order) + labs( 
    title = "Distribution of Item Response Time (by Order)",
    x = "", y = "Response Time (seconds)") +
  theme(legend.position = "blank") + 
  coord_cartesian(xlim = c(0.5, NA), clip = "off")
  
```

```{r}
#| label: VIS-ITEM-TIME-by-SCENARIO

#DISTRIBUTION OF SCORES BY GRAPH
gf_dhistogram(~rt_sec, fill = ~graph, binwidth = 0.5,data = df) %>% 
  gf_dens(color = ~graph) %>%  
  gf_facet_grid(graph~scenario) +
  labs( title = "Distribution of Item Response Time (by Scenario)",
        subtitle ="",
        x = "Response Time (seconds)", y = "number of subjects") + 
  easy_remove_legend()


##VERTICAL RAINCLOUD USING GGDISTR
ggplot(df, aes(x = graph, y = rt_sec,
                        fill = graph) ) + 
  ggdist::stat_halfeye(
    side = "left",
    justification = 1.1,
    width = 1, 
    point_colour = NA
   ) + 
  geom_boxplot(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = rt_sec),
    width = .15, 
    outlier.shape = NA
  ) + 
  geom_point(
    inherit.aes = FALSE, #supress fill
    mapping = aes(x=graph, y = rt_sec, color = graph),
    size = 1.3,
    alpha = .3,
    position = position_jitter( 
      seed = 1, width = .05
  )) + 
  facet_wrap(~scenario) + labs( 
    title = "Distribution of Item Response Time (by Scenario) ",
    x = "TM Scenario", y = "Item Response Time (seconds)") +
  theme(legend.position = "blank") + 
  coord_cartesian(xlim = c(0.5, NA), clip = "off")
  
```





## DRAWING TASK

Finally, we explore the distribution of graph types produced by participants during the graph drawing task. 

```{r}
#| label: VIS-DRAWING

gf_props(~draw_type, data = df_subjects) %>% 
  gf_facet_wrap(~pretty_condition) + labs(
    title = "Type of Graph drawn by Participant"
  )

```

## EXPLORING RELATIONSHIPS

#### Block Accuracy

```{r}
#SCATTERPLOT 
gf_jitter( linear_score ~ triangular_score, data = df_subjects, alpha = 0.5, color=~pretty_condition) %>% 
  gf_facet_wrap(~pretty_condition) + labs(
    title = "Relationship between Linear and Triangular Block Scores",
    subtitle = "", 
    x = "Linear Score", y = "Triangular Score"
  ) + easy_remove_legend()

```

#### Time + Accuracy

```{r}

q.stats <- df %>%  dplyr::group_by(graph, q, pretty_condition, score) %>% dplyr::summarise(
  m = mean(rt_sec),
  sd = sd(rt_sec),
  sd = tidyr::replace_na(sd,0),
  lo = m-sd/2,
  hi = m+sd/2,
  group = paste(pretty_condition,"-",score)
)

gf_line( m ~ q, group = ~group,  color = ~score, data = q.stats) %>% 
  gf_point() %>% 
  gf_ribbon(lo+hi~q) %>% 
  gf_facet_grid(graph~pretty_condition) + scale_color_manual(values=c("red","green")) + 
  labs(title = "Average Item Response Time by Absolute Score",
       subtitle = "",
       x = "Question", y = "Averate Item Response Time", color="Correct Response")


#GGDIST LINERIBBON
df %>%
  ggplot(aes(y = rt_sec, x = q,  fill = pretty_condition)) +
  stat_lineribbon(alpha = 1/4, point_interval = "mean_qi") + facet_grid(graph~pretty_condition)+labs(title = "Average Item Response Time by Absolute Score",
       subtitle = "",
       x = "Question", y = "Averate Item Response Time", color="Correct Response")
```




## RESOURCES


```{r}
#| label: session
sessionInfo()
```